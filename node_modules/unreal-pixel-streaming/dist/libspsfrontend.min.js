(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["libspsfrontend"] = factory();
	else
		root["libspsfrontend"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./src/Afk/AfkLogic.ts":
/*!*****************************!*\
  !*** ./src/Afk/AfkLogic.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* binding */ AfkLogic)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");

var AfkLogic = /** @class */ (function () {
    function AfkLogic(controlScheme, afkTimeout) {
        this.warnTimeout = 0;
        this.closeTimeout = 10;
        this.active = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.warnTimeout = afkTimeout;
        this.controlScheme = controlScheme;
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    AfkLogic.prototype.onAfkClick = function () {
        this.hideCurrentOverlay();
        clearInterval(this.countDownTimer);
        this.startAfkWarningTimer();
    };
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    AfkLogic.prototype.startAfkWarningTimer = function () {
        if (this.warnTimeout > 0) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    };
    /**
     * Stop the timer which when elapsed will warn the user they are inactive.
     */
    AfkLogic.prototype.stopAfkWarningTimer = function () {
        this.active = false;
    };
    /**
     * If the user interacts then reset the warning timer.
     */
    AfkLogic.prototype.resetAfkWarningTimer = function () {
        var _this = this;
        if (this.active) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(function () { _this.activateAfkEvent(); }, this.warnTimeout * 1000);
        }
    };
    /**
     * Show the AFK overlay and begin the countDown
     */
    AfkLogic.prototype.activateAfkEvent = function () {
        var _this = this;
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.stopAfkWarningTimer();
        // instantiate a new overlay 
        this.showAfkOverlay();
        // update our countDown timer and overlay contents
        this.countDown = this.closeTimeout;
        this.updateAfkCountdown();
        // if we are in locked mouse exit pointerlock 
        if (this.controlScheme == _Config_Config__WEBPACK_IMPORTED_MODULE_0__.ControlSchemeType.LockedMouse) {
            document.exitPointerLock();
        }
        // reset our countDown interval accordingly 
        this.countDownTimer = setInterval(function () {
            _this.countDown--;
            if (_this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                _this.hideCurrentOverlay();
                _this.closeWebSocket();
                // switch off the afk feature as stream has closed 
                _this.active = false;
                _this.warnTimeout = 0;
            }
            else {
                // Update the countDown message.
                _this.updateAfkCountdown();
            }
        }, 1000);
    };
    /**
     * An override method for updating the afk countdown number in the overlay
     */
    AfkLogic.prototype.updateAfkCountdown = function () { };
    /**
     * An override method for showing the afk overlay
     */
    AfkLogic.prototype.showAfkOverlay = function () { };
    /**
     * An override method for hiding the afk overlay
     */
    AfkLogic.prototype.hideCurrentOverlay = function () { };
    /**
     * An override method for closing the websocket connection from the clients side
     */
    AfkLogic.prototype.closeWebSocket = function () { };
    return AfkLogic;
}());



/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ ControlSchemeType)
/* harmony export */ });
var Config = /** @class */ (function () {
    /**
     * @param signallingServerAddress - the address of the signaling server
     * @param playerElement - the player element ID
     */
    function Config(signallingServerAddress, playerElement) {
        // enable the autoplay of the video
        this.enableSpsAutoplay = true;
        // start the video muted
        this.startVideoMuted = false;
        // set the amount of wait time in seconds while there is inactivity for afk to occur 
        this.afkTimeout = 120;
        // The control scheme controls the behaviour of the mouse when it interacts with the WebRTC player.
        this.controlScheme = ControlSchemeType.HoveringMouse;
        // Browser keys are those which are typically used by the browser UI. We usually want to suppress these to allow, for example, UE4 to show shader complexity with the F5 key without the web page refreshing.
        this.suppressBrowserKeys = false;
        // UE4 has a fake touches option which fakes a single finger touch when the user drags with their mouse. 
        // We may perform the reverse; a single finger touch may be converted into a mouse drag UE4 side. This allows a non-touch application to be controlled partially via a touch device.
        this.fakeMouseWithTouches = true;
        this.signallingServerAddress = signallingServerAddress;
        this.playerElement = document.getElementById(playerElement);
    }
    // PRESET OPTIONS
    // TODO: expose config through delegate so we don't need static
    Config._enableVerboseLogging = false;
    return Config;
}());

/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataChannelController": () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataChannelReceiveMessageType */ "./src/DataChannel/DataChannelReceiveMessageType.ts");
/* harmony import */ var _InitialSettings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");




/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
var DataChannelController = /** @class */ (function () {
    function DataChannelController() {
        this.isReceivingFreezeFrame = false;
    }
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    DataChannelController.prototype.createDataChannel = function (peerConnection, label, datachannelOptions) {
        this.logging = false;
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = "arraybuffer";
        this.dataChannel.onopen = this.handleOnOpen.bind(this);
        this.dataChannel.onclose = this.handleOnClose.bind(this);
        this.dataChannel.onmessage = this.handleOnMessage.bind(this);
    };
    /**
     * Handles when the Data Channel is opened
     */
    DataChannelController.prototype.handleOnOpen = function () {
        console.debug("Data Channel: " + this.label + " is opened.");
    };
    /**
     * Handles when the Data Channel is closed
     */
    DataChannelController.prototype.handleOnClose = function () {
        console.debug("Data Channel: " + this.label + " is closed.");
    };
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    DataChannelController.prototype.handleOnMessage = function (event) {
        var message = new Uint8Array(event.data);
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Message incoming");
        }
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Message:" + message);
        }
        //there is logic for when a freeze frame is sent;
        // if (this.isReceivingFreezeFrame) {
        //     this.onReceivingFreezeFrame(message);
        // }
        switch (message[0]) {
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.QualityControlOwnership: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.QualityControlOwnership");
                var QualityOwnership = new Boolean(message[1]).valueOf();
                this.onQualityControlOwnership(QualityOwnership);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Response: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Response");
                this.onResponse(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Command: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Command");
                this.onCommand(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.FreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.FreezeFrame");
                this.processFreezeFrameMessage(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.UnfreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.UnfreezeFrame");
                this.isReceivingFreezeFrame = false;
                this.onUnFreezeFrame();
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.VideoEncoderAvgQP: {
                if (this.logging) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.VideoEncoderAvgQP");
                }
                var AvgQP = Number(new TextDecoder("utf-16").decode(message.slice(1)));
                this.onVideoEncoderAvgQP(AvgQP);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.latencyTest: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.latencyTest");
                var latencyAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iLatencyTestResults = JSON.parse(latencyAsString);
                var latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__.LatencyTestResults();
                Object.assign(latencyTestResults, iLatencyTestResults);
                latencyTestResults.processFields();
                this.onLatencyTestResult(latencyTestResults);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.InitialSettings: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.InitialSettings");
                var payloadAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iInitialSettings = JSON.parse(payloadAsString);
                var initialSettings = new _InitialSettings__WEBPACK_IMPORTED_MODULE_2__.InitialSettings();
                Object.assign(initialSettings, iInitialSettings);
                initialSettings.ueCompatible();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog(payloadAsString);
                this.OnInitialSettings(initialSettings);
                break;
            }
            default: {
                console.error("unknown message sent on the Data channel");
                break;
            }
        }
    };
    /**
     * Fired when a Response message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onResponse = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Response");
        var responses = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog(responses);
        //add to response handlers 
    };
    /**
     * Fired when a Command message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onCommand = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Command");
        var commandAsString = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Data Channel Command: " + commandAsString);
        var command = JSON.parse(commandAsString);
        if (command.command === "onScreenKeyboard") {
            //show on screen Keyboard;
        }
    };
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    DataChannelController.prototype.sendData = function (data) {
        // reset the afk inactivity
        this.resetAfkWarningTimerOnDataSend();
        if (this.dataChannel && this.dataChannel.readyState == "open") {
            this.dataChannel.send(data);
        }
        else {
            console.error("Message Failed: " + new Uint8Array(data));
        }
    };
    /**
     * Fired when the UE Instance updates who has Quality Ownership
     * @param hasQualityOwnership - Does the client have Quality Ownership
     */
    DataChannelController.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    /**
     * Fired when the UE Instance sends freeze frame data
     * @param message - Freeze Frame Data
     */
    DataChannelController.prototype.processFreezeFrameMessage = function (message) { };
    /**
     * Fired when the UE Instance sends a un Freeze Frame
     */
    DataChannelController.prototype.onUnFreezeFrame = function () { };
    /**
     * Fired when the UE Instance sends the Video Encoder Avg QP
     * @param AvgQP - Avg QP
     */
    DataChannelController.prototype.onVideoEncoderAvgQP = function (AvgQP) { };
    /**
     * Fired when the UE Instance sends Latency test Results
     * @param latencyTestResults - Latency Test Results
     */
    DataChannelController.prototype.onLatencyTestResult = function (latencyTestResults) { };
    /**
     * Fired when the UE Instance sends Initial Settings
     * @param InitialSettings - Initial Settings
     */
    DataChannelController.prototype.OnInitialSettings = function (InitialSettings) { };
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    DataChannelController.prototype.resetAfkWarningTimerOnDataSend = function () { };
    return DataChannelController;
}());



/***/ }),

/***/ "./src/DataChannel/DataChannelReceiveMessageType.ts":
/*!**********************************************************!*\
  !*** ./src/DataChannel/DataChannelReceiveMessageType.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataChannelReceiveMessageType": () => (/* binding */ DataChannelReceiveMessageType)
/* harmony export */ });
/**
 * Data Channel Receives Message Type
 */
var DataChannelReceiveMessageType;
(function (DataChannelReceiveMessageType) {
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["QualityControlOwnership"] = 0] = "QualityControlOwnership";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Response"] = 1] = "Response";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Command"] = 2] = "Command";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["FreezeFrame"] = 3] = "FreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["UnfreezeFrame"] = 4] = "UnfreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["VideoEncoderAvgQP"] = 5] = "VideoEncoderAvgQP";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["latencyTest"] = 6] = "latencyTest";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["InitialSettings"] = 7] = "InitialSettings";
})(DataChannelReceiveMessageType || (DataChannelReceiveMessageType = {}));


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Encoder": () => (/* binding */ Encoder),
/* harmony export */   "InitialSettings": () => (/* binding */ InitialSettings),
/* harmony export */   "PixelStreaming": () => (/* binding */ PixelStreaming),
/* harmony export */   "WebRTC": () => (/* binding */ WebRTC)
/* harmony export */ });
/**
 * Latency Test Results Data
 */
var InitialSettings = /** @class */ (function () {
    function InitialSettings() {
        this.PixelStreaming = new PixelStreaming();
        this.Encoder = new Encoder();
        this.WebRTC = new WebRTC();
    }
    InitialSettings.prototype.ueCompatible = function () {
        if (this.WebRTC.MaxFPS != null) {
            this.WebRTC.FPS = this.WebRTC.MaxFPS;
        }
    };
    return InitialSettings;
}());

var PixelStreaming = /** @class */ (function () {
    function PixelStreaming() {
    }
    return PixelStreaming;
}());

var Encoder = /** @class */ (function () {
    function Encoder() {
    }
    return Encoder;
}());

var WebRTC = /** @class */ (function () {
    function WebRTC() {
    }
    return WebRTC;
}());



/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatencyTestResults": () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/**
 * Latency Test Results Data
 */
var LatencyTestResults = /** @class */ (function () {
    function LatencyTestResults() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    LatencyTestResults.prototype.setFrameDisplayDeltaTime = function (DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    };
    LatencyTestResults.prototype.processFields = function () {
        if (this.EncodeMs == null && (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            console.log("Setting Encode Ms");
            console.log(this.PostEncodeTimeMs);
            console.log(this.PreEncodeTimeMs);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null && (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            console.log("Setting CaptureToSendMs Ms");
            console.log(this.PostCaptureTimeMs);
            console.log(this.PreCaptureTimeMs);
            this.CaptureToSendMs = this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    };
    return LatencyTestResults;
}());



/***/ }),

/***/ "./src/Delegate/DelegateBase.ts":
/*!**************************************!*\
  !*** ./src/Delegate/DelegateBase.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DelegateBase": () => (/* binding */ DelegateBase)
/* harmony export */ });
/**
 * Provides common base functionality for delegates that implement the IDelegate interface
*/
var DelegateBase = /** @class */ (function () {
    /**
     * @param config - A newly instantiated config object
     * returns the base delegate object with the config inside it along with a new instance of the Overlay controller class
     */
    function DelegateBase(config) {
        this.shouldShowPlayOverlay = true;
        this.config = config;
    }
    /**
     * Hides the current overlay
     */
    DelegateBase.prototype.hideCurrentOverlay = function () {
        if (this.currentOverlay != null) {
            this.currentOverlay.hide();
            this.currentOverlay = null;
        }
    };
    ;
    /**
     * Shows the connect overlay
     */
    DelegateBase.prototype.showConnectOverlay = function () {
        this.hideCurrentOverlay();
        this.connectOverlay.show();
        this.currentOverlay = this.connectOverlay;
    };
    ;
    /**
     * Shows the play overlay
     */
    DelegateBase.prototype.showPlayOverlay = function () {
        this.hideCurrentOverlay();
        this.playOverlay.show();
        this.currentOverlay = this.playOverlay;
    };
    ;
    /**
     * Shows the text overlay
     */
    DelegateBase.prototype.showTextOverlay = function (text) {
        this.hideCurrentOverlay();
        this.infoOverlay.update(text);
        this.infoOverlay.show();
        this.currentOverlay = this.infoOverlay;
    };
    ;
    /**
     * Shows the error overlay
     */
    DelegateBase.prototype.showErrorOverlay = function (text) {
        this.hideCurrentOverlay();
        this.errorOverlay.update(text);
        this.errorOverlay.show();
        this.currentOverlay = this.errorOverlay;
    };
    ;
    /**
     * Activates the connect overlays action
     */
    DelegateBase.prototype.onConnectAction = function () {
        this.connectOverlay.activate();
    };
    ;
    /**
     * Activates the play overlays action
     */
    DelegateBase.prototype.onPlayAction = function () {
        this.playOverlay.activate();
    };
    ;
    /**
     * Shows the afk overlay
     * @param countDown the countdown number for the afk countdown
     */
    DelegateBase.prototype.showAfkOverlay = function (countDown) {
        this.hideCurrentOverlay();
        this.updateAfkOverlay(countDown);
        this.afkOverlay.show();
        this.currentOverlay = this.afkOverlay;
    };
    ;
    /**
     * Update the afk overlays countdown number
     * @param countDown the new countdown number
     */
    DelegateBase.prototype.updateAfkOverlay = function (countDown) {
        this.afkOverlay.update(countDown);
    };
    ;
    /**
     * Activates the afk overlays action
     */
    DelegateBase.prototype.onAfkAction = function () {
        this.afkOverlay.activate();
    };
    ;
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param iWebRtcPlayerController
     */
    DelegateBase.prototype.setIWebRtcPlayerController = function (iWebRtcPlayerController) {
        var _this = this;
        this.iWebRtcController = iWebRtcPlayerController;
        this.iWebRtcController.resizePlayerStyle();
        // update the freeze frame object in the webRtc player controller with the new overlay  
        //this.iWebRtcController.freezeFrame.setFreezeFrameOverlay(//this.freezeFrameOverlay);
        // set up the connect overlays action
        this.setWebRtcConnectOverlay();
        // set up the afk overlays action 
        this.afkOverlay.onAction(function () { return _this.iWebRtcController.onAfkClick(); });
        // set up the play overlays action 
        this.playOverlay.onAction(function () { return _this.iWebRtcController.playStream(); });
    };
    /**
     * Create the webRtc connect overlay based on the autoplay option. This should be done after iWebRtcController has been instantiated
     */
    DelegateBase.prototype.setWebRtcConnectOverlay = function () {
        var _this = this;
        // set up if the auto play will be used or regular click to start
        if (!this.config.enableSpsAutoplay) {
            // Build the webRtc connect overlay Event Listener and show the connect overlay
            this.connectOverlay.onAction(function () { return _this.iWebRtcController.connectToSignallingSever(); });
            this.showConnectOverlay();
        }
        else {
            // if autoplaying show an info overlay while while waiting for the connection to begin 
            this.showTextOverlay("Auto Connecting Now");
            this.iWebRtcController.connectToSignallingSever();
        }
    };
    /**
     * Set up functionality to happen when an instance state change occurs
     * @param instanceState - the message instance state
     */
    DelegateBase.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Set up functionality to happen when receiving an auth response
     * @param authResponse - the auth response message type
     */
    DelegateBase.prototype.onAuthenticationResponse = function (authResponse) { };
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    DelegateBase.prototype.onWebRtcAnswer = function () {
        this.showTextOverlay("RTC Answer");
    };
    /**
     * Creates the play overlay for playing the video stream
     */
    DelegateBase.prototype.onShowPlayOverlay = function () {
        // set shouldShowPlayOverlay to false in this class and also in the freeze
        this.shouldShowPlayOverlay = false;
        //this.iWebRtcController.freezeFrame.setShouldShowPlayOverlay(this.shouldShowPlayOverlay);
    };
    /**
     * Event fired when the video is disconnected
     */
    DelegateBase.prototype.onDisconnect = function (event) {
        this.showErrorOverlay("Disconnected: ".concat(event.code, " -  ").concat(event.reason));
    };
    /**
     * Handles when Web Rtc is connecting
     */
    DelegateBase.prototype.onWebRtcConnecting = function () {
        this.showTextOverlay("Starting connection to server, please wait");
    };
    /**
     * Handles when Web Rtc has connected
     */
    DelegateBase.prototype.onWebRtcConnected = function () {
        this.showTextOverlay("WebRTC connected, waiting for video");
    };
    /**
     * Handles when Web Rtc fails to connect
     */
    DelegateBase.prototype.onWebRtcFailed = function () {
        this.showErrorOverlay("Unable to setup video");
    };
    /**
     * Set up methods and functions to run when the video is initialised
     */
    DelegateBase.prototype.onVideoInitialised = function () { };
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    DelegateBase.prototype.onLatencyTestResult = function (latency) { };
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    DelegateBase.prototype.onVideoStats = function (videoStats) { };
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    DelegateBase.prototype.onVideoEncoderAvgQP = function (QP) { };
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    DelegateBase.prototype.onInitialSettings = function (settings) { };
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    DelegateBase.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    return DelegateBase;
}());



/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FakeTouchController": () => (/* binding */ FakeTouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");


/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoPlayerElement - The video player DOM element
 */
var FakeTouchController = /** @class */ (function () {
    function FakeTouchController(dataChannelController, videoPlayerElement) {
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoPlayerElement = videoPlayerElement;
        document.ontouchstart = this.onTouchStart.bind(this);
        document.ontouchend = this.onTouchEnd.bind(this);
        document.ontouchmove = this.onTouchMove.bind(this);
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    FakeTouchController.prototype.onTouchStart = function (touch) {
        if (this.finger == null) {
            var first_touch = touch.changedTouches[0];
            this.finger = {
                ID: first_touch.identifier,
                X: first_touch.clientX - this.videoPlayerElement.getBoundingClientRect().left,
                Y: first_touch.clientY - this.videoPlayerElement.getBoundingClientRect().top
            };
            var mouseEvent = new MouseEvent(touch.type, first_touch);
            this.videoPlayerElement.onmouseenter(mouseEvent);
            this.ueInputMouseMessage.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, this.finger.X, this.finger.Y);
        }
    };
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchEnd = function (touchEvent) {
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, x, y);
                var mouseEvent = new MouseEvent(touchEvent.type, touch);
                this.videoPlayerElement.onmouseleave(mouseEvent);
                this.finger = null;
            }
        }
    };
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchMove = function (touchEvent) {
        for (var i = 0; i < touchEvent.touches.length; i++) {
            var touch = touchEvent.touches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                x *= 75;
                // let _x = x - this.finger.X
                // if (x < this.finger.X) {
                //     console.log('>>left')
                // } else if (x > this.finger.X) {
                //     console.log('>>right')
                // }
                // console.log('@@', this.finger.X, x, x - this.finger.X)
                this.ueInputMouseMessage.sendMouseMove(x, y, x - this.finger.X, y - this.finger.Y);
                this.finger.X = x;
                this.finger.Y = y;
            }
        }
    };
    return FakeTouchController;
}());



/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GamePadController": () => (/* binding */ GamePadController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputGamePadMessage */ "./src/UeInstanceMessage/UeInputGamePadMessage.ts");

/**
 * The class that handles the functionality of gamepads and controllers
 */
var GamePadController = /** @class */ (function () {
    /**
     * @param dataChannelController - the data chanel controller
     */
    function GamePadController(dataChannelController) {
        this.ueInputGamePadMessage = new _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputGamePadMessage(dataChannelController);
        this.logging = true;
        if ("GamepadEvent" in window) {
            window.addEventListener("gamepadconnected", this.gamePadConnectHandler.bind(this));
            window.addEventListener("gamepaddisconnected", this.gamePadDisconnectHandler.bind(this));
        }
        else if ("WebKitGamepadEvent" in window) {
            window.addEventListener("webkitgamepadconnected", this.gamePadConnectHandler.bind(this));
            window.addEventListener("webkitgamepaddisconnected", this.gamePadDisconnectHandler.bind(this));
        }
        this.controllers = [];
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadConnectHandler = function (gamePadEvent) {
        if (this.logging) {
            console.log("Gamepad connect handler");
        }
        var gamepad = gamePadEvent.gamepad;
        var temp = {
            currentState: gamepad,
            prevState: gamepad
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        if (this.logging) {
            console.log("gamepad: " + gamepad.id + " connected");
        }
        window.requestAnimationFrame(this.updateStatus.bind(this));
    };
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadDisconnectHandler = function (gamePadEvent) {
        if (this.logging) {
            console.log("Gamepad disconnect handler");
            console.log("gamepad: " + gamePadEvent.gamepad.id + " disconnected");
        }
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter(function (controller) { return controller !== undefined; });
    };
    /**
     * Scan for connected gamepads
     */
    GamePadController.prototype.scanGamePads = function () {
        var gamepads = ((navigator.getGamepads) ? navigator.getGamepads() : []); //  : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
        for (var i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && (gamepads[i].index in this.controllers)) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    };
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    GamePadController.prototype.updateStatus = function () {
        this.scanGamePads();
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {
            var controller = _a[_i];
            try {
                var currentState = controller.currentState;
                for (var i = 0; i < controller.currentState.buttons.length; i++) {
                    var currentButton = controller.currentState.buttons[i];
                    var previousButton = controller.prevState.buttons[i];
                    // Button 6 is actually the left trigger, send it to UE as an analog axis
                    // Button 7 is actually the right trigger, send it to UE as an analog axis
                    // The rest are normal buttons. Treat as such
                    if (currentButton.pressed && !previousButton.pressed) {
                        // New press
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, false);
                        }
                    }
                    else if (!currentButton.pressed && previousButton.pressed) {
                        // release
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, 0);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, 0);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonReleased(currentState.index, i);
                        }
                    }
                    else if (currentButton.pressed && previousButton.pressed) {
                        // repeat press / hold
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, true);
                        }
                    }
                    // Last case is button isn't currently pressed and wasn't pressed before. This doesn't need an else block
                }
                for (var i = 0; i < currentState.axes.length; i += 2) {
                    var x = parseFloat(currentState.axes[i].toFixed(4));
                    // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                    var y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                    if (i === 0) {
                        // left stick
                        // axis 1 = left horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 1, x);
                        // axis 2 = left vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 2, y);
                    }
                    else if (i === 2) {
                        // right stick
                        // axis 3 = right horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 3, x);
                        // axis 4 = right vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 4, y);
                    }
                }
                this.controllers[currentState.index].prevState = currentState;
            }
            catch (error) {
                console.error("Oh dear the gamepad poll loop has thrown an error");
            }
        }
        window.requestAnimationFrame(this.updateStatus.bind(this));
    };
    return GamePadController;
}());



/***/ }),

/***/ "./src/Inputs/GyroController.ts":
/*!**************************************!*\
  !*** ./src/Inputs/GyroController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GyroController": () => (/* binding */ GyroController)
/* harmony export */ });
/**
 * The Class that handles gyro input
 */
var GyroController = /** @class */ (function () {
    function GyroController(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    return GyroController;
}());



/***/ }),

/***/ "./src/Inputs/InputController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/InputController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputController": () => (/* binding */ InputController)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseLockedEvents */ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseHoverEvents */ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts");
/* harmony import */ var _GyroController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GyroController */ "./src/Inputs/GyroController.ts");









/**
 * Class for handling inputs for mouse and keyboard
 */
var InputController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     */
    function InputController(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    /**
     * registers browser key events
     * @param suppressBrowserKeys - option to suppress browser keys
     */
    InputController.prototype.registerKeyBoard = function (suppressBrowserKeys) {
        console.debug("Register Keyboard Events");
        this.keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.dataChannelController, suppressBrowserKeys);
        this.keyboardController.registerKeyBoardEvents();
    };
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     * @param videoPlayerController - the video player controller
     */
    InputController.prototype.registerMouse = function (controlScheme, videoPlayerController) {
        console.debug("Register Mouse Events");
        this.mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.dataChannelController);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.LockedMouse:
                videoPlayerController.videoInputBindings = new _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__.VideoPlayerMouseLockedEvents(videoPlayerController.videoElement, this.mouseController);
                videoPlayerController.videoElement.onclick = videoPlayerController.handleClick.bind(videoPlayerController);
                document.addEventListener('pointerlockchange', videoPlayerController.handleLockStateChange.bind(videoPlayerController), false);
                document.addEventListener('mozpointerlockchange', videoPlayerController.handleLockStateChange.bind(videoPlayerController), false);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.HoveringMouse:
                videoPlayerController.videoInputBindings = new _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__.VideoPlayerMouseHoverEvents(this.mouseController);
                // set the onclick to null if the input bindings were previously set to pointerlock
                videoPlayerController.videoElement.onclick = null;
                document.onmousemove = videoPlayerController.videoInputBindings.handleMouseMove.bind(videoPlayerController.videoInputBindings);
                document.onwheel = videoPlayerController.videoInputBindings.handleMouseWheel.bind(videoPlayerController.videoInputBindings);
                videoPlayerController.videoElement.onmousedown = videoPlayerController.videoInputBindings.handleMouseDown.bind(videoPlayerController.videoInputBindings);
                videoPlayerController.videoElement.onmouseup = videoPlayerController.videoInputBindings.handleMouseUp.bind(videoPlayerController.videoInputBindings);
                break;
            default:
                console.warn("unknown Control Scheme Type Defaulting to Locked Mouse Events");
                break;
        }
    };
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     * @param playerElement - the player elements DOM
     */
    InputController.prototype.registerTouch = function (fakeMouseTouch, playerElement) {
        console.log("Registering Touch");
        if (fakeMouseTouch) {
            this.touchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__.FakeTouchController(this.dataChannelController, playerElement.getElementsByTagName("video")[0]);
        }
        else {
            this.touchController = new _TouchController__WEBPACK_IMPORTED_MODULE_3__.TouchController(this.dataChannelController, playerElement);
        }
    };
    /**
     * registers a gamepad
     */
    InputController.prototype.registerGamePad = function () {
        console.debug("Register Game Pad");
        this.gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_4__.GamePadController(this.dataChannelController);
    };
    /**
     * registers a gyro device
     */
    InputController.prototype.registerGyro = function () {
        this.gyroController = new _GyroController__WEBPACK_IMPORTED_MODULE_8__.GyroController(this.dataChannelController);
    };
    return InputController;
}());



/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyboardController": () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputKeyboardMessage */ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Keyboard Inputs for the document
 */
var KeyboardController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     * @param suppressBrowserKeys - Suppress Browser Keys
     */
    function KeyboardController(dataChannelController, suppressBrowserKeys) {
        this.ueInputKeyBoardMessage = new _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputKeyboardMessage(dataChannelController);
        this.suppressBrowserKeys = suppressBrowserKeys;
        this.logging = false;
    }
    /**
     * Registers document keyboard events with the controller
     */
    KeyboardController.prototype.registerKeyBoardEvents = function () {
        document.onkeydown = this.handleOnKeyDown.bind(this);
        document.onkeyup = this.handleOnKeyUp.bind(this);
        //This has been deprecated as at Jun 13 2021
        document.onkeypress = this.handleOnKeyPress.bind(this);
    };
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyDown = function (keyboardEvent) {
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("handleOnKeyDown");
        }
        this.ueInputKeyBoardMessage.sendKeyDown(this.getKeycode(keyboardEvent), keyboardEvent.repeat);
        /* this needs to be tested but it is believed that this is not needed*/
        // backSpace is not considered a keypress in JavaScript but we need it
        // to be so characters may be deleted in a UE4 text entry field.
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.backSpace) {
            //let temp: KeyboardEvent = {charCode: SpecialKeyCodes.backSpace};
            //document.onkeypress({ charCode: SpecialKeyCodes.backSpace });
        }
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyUp = function (keyboardEvent) {
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("handleOnKeyUp");
        }
        this.ueInputKeyBoardMessage.sendKeyUp(this.getKeycode(keyboardEvent));
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    KeyboardController.prototype.handleOnKeyPress = function (keyboard) {
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("handleOnkeypress");
        }
        this.ueInputKeyBoardMessage.sendKeyPress(keyboard.charCode);
    };
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns the key code of the Key
     */
    KeyboardController.prototype.getKeycode = function (keyboardEvent) {
        //Need to move this to a newer version using keyboard event location. as keyboardEvent.keycode is deprecated
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.shift && keyboardEvent.code === 'ShiftRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightShift;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.control && keyboardEvent.code === 'ControlRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightControl;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.alt && keyboardEvent.code === 'AltRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightAlt;
        else
            return keyboardEvent.keyCode;
    };
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     */
    KeyboardController.prototype.isKeyCodeBrowserKey = function (keyCode) {
        // Function keys or tab key.
        return keyCode >= 112 && keyCode <= 123 || keyCode === 9;
    };
    return KeyboardController;
}());

/* 5457524f4d4d */ 


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseButton": () => (/* binding */ MouseButton),
/* harmony export */   "MouseButtonsMask": () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
var MouseButton = /** @class */ (function () {
    function MouseButton() {
    }
    MouseButton.mainButton = 0; // Left button.
    MouseButton.auxiliaryButton = 1; // Wheel button.
    MouseButton.secondaryButton = 2; // Right button.
    MouseButton.fourthButton = 3; // Browser Back button.
    MouseButton.fifthButton = 4; // Browser Forward button.
    return MouseButton;
}());

/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
var MouseButtonsMask = /** @class */ (function () {
    function MouseButtonsMask() {
    }
    MouseButtonsMask.primaryButton = 1; // Left button.
    MouseButtonsMask.secondaryButton = 2; // Right button.
    MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
    MouseButtonsMask.fourthButton = 8; // Browser Back button.
    MouseButtonsMask.fifthButton = 16; // Browser Forward button.
    return MouseButtonsMask;
}());



/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseController": () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Mouse Inputs for the document
 */
var MouseController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function MouseController(dataChannelController) {
        this.unsignedOutOfRange = 65535;
        this.signedOutOfRange = 32767;
        this.printInputs = false;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.releaseMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.pressMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse is moved
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     * @param deltaX - Mouse Delta X Coordinate
     * @param deltaY - Mouse Delta Y Coordinate
     */
    MouseController.prototype.sendMouseMove = function (X, Y, deltaX, deltaY) {
        if (this.printInputs) {
            console.debug("x: ".concat(X, ", y:").concat(Y, ", dX: ").concat(deltaX, ", dY: ").concat(deltaY));
        }
        var mouseCord = this.normaliseAndQuantiseUnsigned(X, Y);
        var deltaCode = this.normaliseAndQuantiseSigned(deltaX, deltaY);
        this.ueInputMouseMessage.sendMouseMove(mouseCord.x, mouseCord.y, deltaCode.x, deltaCode.y);
    };
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseDown = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("mouse button ".concat(button, " down at (").concat(X, ", ").concat(Y, ")"));
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseDown(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseUp = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("mouse button ".concat(button, " up at (").concat(X, ", ").concat(Y, ")"));
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseUp(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse wheel event
     * @param deltaY - Mouse Wheel data
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseWheel = function (deltaY, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("mouse wheel with delta ".concat(deltaY, " at (").concat(X, ", ").concat(Y, ")"));
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseWheel(deltaY, coord.x, coord.y);
    };
    /**
     * Handles mouse enter
     */
    MouseController.prototype.sendMouseEnter = function () {
        this.ueInputMouseMessage.sendMouseEnter();
    };
    /**
     * Handles mouse Leave
     */
    MouseController.prototype.sendMouseLeave = function () {
        this.ueInputMouseMessage.sendMouseLeave();
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Unsigned Data Type
     */
    MouseController.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio');
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / playerElement.clientWidth;
                var normalizedY = ratio * (y / playerElement.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = ratio * (x / playerElement.clientWidth - 0.5) + 0.5;
                var normalizedY = y / playerElement.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    /**
     * Denormalises and unquantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - unquantise and Denormalize Unsigned Data Type
     */
    MouseController.prototype.unquantiseAndDenormaliseUnsigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio');
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (this.unsignedOutOfRange + 1);
                var normalizedY = (y / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                return {
                    x: normalizedX * playerElement.clientWidth,
                    y: normalizedY * playerElement.clientHeight
                };
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = (x / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                var normalizedY = y / (this.unsignedOutOfRange + 1);
                return {
                    x: normalizedX * playerElement.clientWidth,
                    y: normalizedY * playerElement.clientHeight
                };
            }
        }
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Signed Data Type
     */
    MouseController.prototype.normaliseAndQuantiseSigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio');
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (0.5 * playerElement.clientWidth);
                var normalizedY = (ratio * y) / (0.5 * playerElement.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Signed.
                var normalizedX = (ratio * x) / (0.5 * playerElement.clientWidth);
                var normalizedY = y / (0.5 * playerElement.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
        }
    };
    return MouseController;
}());



/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpecialKeyCodes": () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
var SpecialKeyCodes = /** @class */ (function () {
    function SpecialKeyCodes() {
    }
    SpecialKeyCodes.backSpace = 8;
    SpecialKeyCodes.shift = 16;
    SpecialKeyCodes.control = 17;
    SpecialKeyCodes.alt = 18;
    SpecialKeyCodes.rightShift = 253;
    SpecialKeyCodes.rightControl = 254;
    SpecialKeyCodes.rightAlt = 255;
    return SpecialKeyCodes;
}());



/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchController": () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputTouchMessage */ "./src/UeInstanceMessage/UeInputTouchMessage.ts");

/**
 * Handles the Touch input Events
 */
var TouchController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     * @param playerElement - the player element DOM
     */
    function TouchController(dataChannelController, playerElement) {
        this.ueInputTouchMessage = new _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputTouchMessage(dataChannelController);
        this.playerElement = playerElement;
        document.ontouchstart = this.onTouchStart.bind(this);
        document.ontouchend = this.onTouchEnd.bind(this);
        document.ontouchmove = this.onTouchMove.bind(this);
        console.log("Touch Events Registered");
        this.logging = false;
    }
    /**
     * When a touch event starts
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchStart = function (event) {
        if (this.logging) {
            console.log("on Touch Start");
        }
        for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            var finger = this.ueInputTouchMessage.fingers.pop();
            if (finger === undefined) {
                if (this.logging) {
                    console.log("who has more then 10 fingers");
                }
            }
            this.ueInputTouchMessage.fingersIds[touch.identifier] = finger;
            if (this.logging) {
                console.log("touch.identifier: " + touch.identifier);
            }
            if (this.logging) {
                console.log("finger: " + finger);
            }
        }
        this.ueInputTouchMessage.sendTouchStart(event.changedTouches);
    };
    /**
     * When a touch event ends
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchEnd = function (event) {
        if (this.logging) {
            console.log("on Touch END");
        }
        for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            if (this.logging) {
                console.log("on Forget Touch");
                console.log("touch id: " + touch.identifier);
                console.log("Fingers id Touch id: " + this.ueInputTouchMessage.fingersIds[touch.identifier]);
            }
            this.ueInputTouchMessage.fingers.push(this.ueInputTouchMessage.fingersIds[touch.identifier]);
            delete this.ueInputTouchMessage.fingersIds[touch.identifier];
            if (this.logging) {
                console.log("touch.identifier: " + touch.identifier);
            }
        }
        this.ueInputTouchMessage.sendTouchEnd(event.changedTouches);
    };
    /**
     * when a moving touch event occurs
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchMove = function (event) {
        for (var i = 0; i < event.touches.length; i++) {
            var touch = event.touches[i];
            if (this.logging) {
                console.log("X: " + touch.clientX + " Y: " + touch.clientY);
            }
        }
        this.ueInputTouchMessage.sendTouchMove(event.touches);
    };
    return TouchController;
}());



/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");

/**
 * The current logger for the frontend
 */
var Logger = /** @class */ (function () {
    function Logger() {
    }
    /**
     * The standard logging output
     * @param text - the string to be logged
     */
    Logger.infoLog = function (text) {
        console.log(text);
    };
    /**
     * The verbose logging output
     * @param text - the string to be logged
     */
    Logger.verboseLog = function (text) {
        if (_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Config._enableVerboseLogging === true) {
            console.log(text);
        }
    };
    return Logger;
}());



/***/ }),

/***/ "./src/MicPlayer/MicController.ts":
/*!****************************************!*\
  !*** ./src/MicPlayer/MicController.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MicController": () => (/* binding */ MicController)
/* harmony export */ });
var MicController = /** @class */ (function () {
    function MicController(urlParams) {
        // get the mic status from the url 
        this.useMic = urlParams.has('useMic');
        if (this.useMic) {
            console.info("Microphone access is enabled IT IS EXPERIMENTAL AND IS NOT PROPERLY SUPPORTED ACROSS UE. IF IT DOES NOT WORK ITS YOUR OWN FAULT! YOU HAVE BEEN TOLD.");
        }
        // if (!this.useMic) {
        //     console.log("Microphone access is not enabled. Pass ?useMic in the url to enable it.");
        // }
        // check if the connection is not local and is https or mic will not work 
        this.isLocalhostConnection = location.hostname === "localhost" || location.hostname === "127.0.0.1";
        this.isHttpsConnection = location.protocol === 'https:';
        if (this.useMic && !this.isLocalhostConnection && !this.isHttpsConnection) {
            this.useMic = false;
            console.error("Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.");
            console.error("For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
        }
    }
    return MicController;
}());



/***/ }),

/***/ "./src/Overlay/ActionOverlay.ts":
/*!**************************************!*\
  !*** ./src/Overlay/ActionOverlay.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionOverlay": () => (/* binding */ ActionOverlay)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);

/**
 * The abstract class for action overlays
 */
var ActionOverlay = /** @class */ (function () {
    function ActionOverlay() {
        this.eventEmitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    }
    /**
     * Set a method as an event emitter callback
     * @param callBack the method that is to be called when the event is emitted
     */
    ActionOverlay.prototype.onAction = function (callBack) {
        this.eventEmitter.on("action", callBack);
    };
    /**
     * Activate an event that is attached to the event emitter
     */
    ActionOverlay.prototype.activate = function () {
        this.eventEmitter.emit("action");
    };
    return ActionOverlay;
}());



/***/ }),

/***/ "./src/Overlay/AfkOverlay.ts":
/*!***********************************!*\
  !*** ./src/Overlay/AfkOverlay.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkOverlay": () => (/* binding */ AfkOverlay)
/* harmony export */ });
/* harmony import */ var _ActionOverlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ActionOverlay */ "./src/Overlay/ActionOverlay.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The abstract class for the Afk overlay
 */
var AfkOverlay = /** @class */ (function (_super) {
    __extends(AfkOverlay, _super);
    function AfkOverlay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AfkOverlay;
}(_ActionOverlay__WEBPACK_IMPORTED_MODULE_0__.ActionOverlay));



/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AggregatedStats": () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InboundAudioStats */ "./src/PeerConnectionController/InboundAudioStats.ts");
/* harmony import */ var _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InboundVideoStats */ "./src/PeerConnectionController/InboundVideoStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OutBoundVideoStats */ "./src/PeerConnectionController/OutBoundVideoStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};







var AggregatedStats = /** @class */ (function () {
    function AggregatedStats() {
        this.inboundVideoStats = new _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__.inboundVideoStats();
        this.inboundAudioStats = new _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__.inboundAudioStats();
        this.candidatePair = new _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__.CandidatePairStats();
        this.dataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__.dataChannelStats();
        this.outBoundVideoStats = new _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__.OutBoundVideoStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_6__.StreamStats();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    AggregatedStats.prototype.processStats = function (rtcStatsReport) {
        var _this = this;
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        rtcStatsReport.forEach(function (stat) {
            var type = stat.type;
            switch (type) {
                case "candidate-pair":
                    _this.handleCandidatePair(stat);
                    break;
                case "certificate":
                    break;
                case "codec":
                    break;
                case "csrc":
                    break;
                case "data-channel":
                    _this.handleDataChannel(stat);
                    break;
                case "inbound-rtp":
                    _this.handleInBoundRTP(stat);
                    break;
                case "local-candidate":
                    _this.handleLocalCandidate(stat);
                    break;
                case "media-source":
                    break;
                case "outbound-rtp":
                    break;
                case "peer-connection":
                    break;
                case "remote-candidate":
                    _this.handleRemoteCandidate(stat);
                    break;
                case "remote-inbound-rtp":
                    break;
                case "remote-outbound-rtp":
                    _this.handleRemoteOutBound(stat);
                    break;
                case "track":
                    _this.handleTrack(stat);
                    break;
                case "transport":
                    break;
                case "stream":
                    _this.handleStream(stat);
                    break;
                default:
                    console.error("un handled Stat Type");
                    console.dir(stat);
                    break;
            }
        });
    };
    /**
     * Process stream stats data from webrtc
     *
     * @param stat the stats coming in from webrtc
     */
    AggregatedStats.prototype.handleStream = function (stat) {
        this.streamStats = stat;
    };
    /**
     * Process the Ice Candidate Pair Data
     */
    AggregatedStats.prototype.handleCandidatePair = function (stat) {
        this.candidatePair.bytesReceived = stat.bytesReceived;
        this.candidatePair.bytesSent = stat.bytesSent;
        this.candidatePair.localCandidateId = stat.localCandidateId;
        this.candidatePair.remoteCandidateId = stat.remoteCandidateId;
        this.candidatePair.nominated = stat.nominated;
        this.candidatePair.readable = stat.readable;
        this.candidatePair.selected = stat.selected;
        this.candidatePair.writable = stat.writable;
        this.candidatePair.state = stat.state;
        this.candidatePair.currentRoundTripTime = stat.currentRoundTripTime;
    };
    /**
     * Process the Data Channel Data
     */
    AggregatedStats.prototype.handleDataChannel = function (stat) {
        this.dataChannelStats.bytesReceived = stat.dataytesReceived;
        this.dataChannelStats.bytesSent = stat.bytesSent;
        this.dataChannelStats.dataChannelIdentifier = stat.dataChannelIdentifier;
        this.dataChannelStats.id = stat.id;
        this.dataChannelStats.label = stat.label;
        this.dataChannelStats.messagesReceived = stat.messagesReceived;
        this.dataChannelStats.messagesSent = stat.messagesSent;
        this.dataChannelStats.protocol = stat.protocol;
        this.dataChannelStats.state = stat.state;
        this.dataChannelStats.timestamp = stat.timestamp;
    };
    /**
     * Process the Local Ice Candidate Data
     */
    AggregatedStats.prototype.handleLocalCandidate = function (stat) {
        var localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        localCandidate.label = "local-candidate";
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        this.localCandidates.push(localCandidate);
    };
    /**
     * Process the Remote Ice Candidate Data
     */
    AggregatedStats.prototype.handleRemoteCandidate = function (stat) {
        var RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        RemoteCandidate.label = "local-candidate";
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        this.remoteCandidates.push(RemoteCandidate);
    };
    /**
     * Process the Inbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleInBoundRTP = function (stat) {
        switch (stat.kind) {
            case "video":
                this.inboundVideoStats.timestamp = stat.timestamp;
                this.inboundVideoStats.bytesReceived = stat.bytesReceived;
                this.inboundVideoStats.framesDecoded = stat.framesDecoded;
                this.inboundVideoStats.packetsLost = stat.packetsLost;
                this.inboundVideoStats.jitter = stat.jitter;
                this.inboundVideoStats.bytesReceivedStart = (this.inboundVideoStats.bytesReceivedStart == null) ? stat.bytesReceived : this.inboundVideoStats.bytesReceivedStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                this.inboundVideoStats.timestampStart = (this.inboundVideoStats.timestampStart == null) ? stat.timestamp : this.inboundVideoStats.timestampStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate = 8 * (stat.bytesReceived - this.lastVideoStats.bytesReceived) / (stat.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.lowBitrate == undefined || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.bitrate < this.inboundVideoStats.lowBitrate || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.highBitrate == undefined || Number.isNaN(this.inboundVideoStats.highBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.bitrate > this.inboundVideoStats.highBitrate) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.avgBitrate = 8 * (this.inboundVideoStats.bytesReceived - this.lastVideoStats.bytesReceived) / (this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.avgBitrate = Math.floor(this.inboundVideoStats.avgBitrate);
                    this.inboundVideoStats.framerate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecoded) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp) / 1000);
                    this.inboundVideoStats.framerate = Math.floor(this.inboundVideoStats.framerate);
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.lowFramerate == undefined || Number.isNaN(this.inboundVideoStats.lowFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.lowFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.highFramerate == undefined || Number.isNaN(this.inboundVideoStats.highFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.highFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.averageFrameRate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecodedStart) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestampStart) / 1000);
                    this.inboundVideoStats.averageFrameRate = Math.floor(this.inboundVideoStats.averageFrameRate);
                }
                this.lastVideoStats = __assign({}, this.inboundVideoStats);
                break;
            case "audio":
                this.inboundAudioStats.bytesReceived = stat.bytesReceived;
                this.inboundAudioStats.jitter = stat.jitter;
                this.inboundAudioStats.packetsLost = stat.packetslost;
                this.inboundAudioStats.timestamp = stat.timestamp;
                break;
            default:
                console.log("Kind is not handled");
                break;
        }
    };
    /**
     * Process the outbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleRemoteOutBound = function (stat) {
        switch (stat.kind) {
            case "video":
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case "audio":
                break;
            default:
                break;
        }
    };
    /**
     * Process the Inbound Video Track Data
     */
    AggregatedStats.prototype.handleTrack = function (stat) {
        this.inboundVideoStats.framesDropped = stat.framesDropped;
        this.inboundVideoStats.framesReceived = stat.framesReceived;
        this.inboundVideoStats.framesDroppedPercentage = stat.framesDropped / stat.framesReceived * 100;
        this.inboundVideoStats.frameHeight = stat.frameHeight;
        this.inboundVideoStats.frameWidth = stat.frameWidth;
        this.inboundVideoStats.frameHeightStart = (this.inboundVideoStats.frameHeightStart == null) ? stat.frameHeight : this.inboundVideoStats.frameHeightStart;
        this.inboundVideoStats.frameWidthStart = (this.inboundVideoStats.frameWidthStart == null) ? stat.frameWidth : this.inboundVideoStats.frameWidthStart;
    };
    return AggregatedStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CandidatePairStats": () => (/* binding */ CandidatePairStats)
/* harmony export */ });
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
var CandidatePairStats = /** @class */ (function () {
    function CandidatePairStats() {
    }
    return CandidatePairStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CandidateStat": () => (/* binding */ CandidateStat)
/* harmony export */ });
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
var CandidateStat = /** @class */ (function () {
    function CandidateStat() {
    }
    return CandidateStat;
}());



/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dataChannelStats": () => (/* binding */ dataChannelStats)
/* harmony export */ });
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
var dataChannelStats = /** @class */ (function () {
    function dataChannelStats() {
    }
    return dataChannelStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundAudioStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundAudioStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inboundAudioStats": () => (/* binding */ inboundAudioStats)
/* harmony export */ });
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
var inboundAudioStats = /** @class */ (function () {
    function inboundAudioStats() {
    }
    return inboundAudioStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundVideoStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundVideoStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inboundVideoStats": () => (/* binding */ inboundVideoStats)
/* harmony export */ });
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
var inboundVideoStats = /** @class */ (function () {
    function inboundVideoStats() {
        this.receiveToCompositeMs = 0;
        this.timestamp = 0;
        this.bytesReceived = 0;
        this.framesDecoded = 0;
        this.packetsLost = 0;
        this.bytesReceivedStart = 0;
        this.framesDecodedStart = 0;
        this.timestampStart = 0;
        this.bitrate = 0;
        this.lowBitrate = 0;
        this.highBitrate = 0;
        this.avgBitrate = 0;
        this.framerate = 0;
        this.lowFramerate = 0;
        this.highFramerate = 0;
        this.averageFrameRate = 0;
        this.framesDropped = 0;
        this.framesReceived = 0;
        this.framesDroppedPercentage = 0;
        this.frameHeight = 0;
        this.frameWidth = 0;
        this.frameHeightStart = 0;
        this.frameWidthStart = 0;
        this.jitter = 0;
    }
    return inboundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/OutBoundVideoStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundVideoStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
var OutBoundVideoStats = /** @class */ (function () {
    function OutBoundVideoStats() {
    }
    return OutBoundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PeerConnectionController": () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


/**
 * Handles the Peer Connection
 */
var PeerConnectionController = /** @class */ (function () {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     */
    function PeerConnectionController(options, urlParams) {
        // set the turn status 
        this.forceTurn = urlParams.has('ForceTURN');
        // if using TURN set the ice transport policy to relay for the options
        if (this.forceTurn) {
            console.log("Forcing TURN usage by setting ICE Transport Policy in peer connection config.");
            options.iceTransportPolicy = "relay";
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = this.handleSignalStateChange.bind(this);
        this.peerConnection.oniceconnectionstatechange = this.handleIceConnectionStateChange.bind(this);
        this.peerConnection.onicegatheringstatechange = this.handleIceGatheringStateChange.bind(this);
        this.peerConnection.ontrack = this.handleOnTrack.bind(this);
        this.peerConnection.onicecandidate = this.handelIceCandidate.bind(this);
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__.AggregatedStats();
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    PeerConnectionController.prototype.createOffer = function (offerOptions, useMic) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Create Offer");
        this.setupTracksToSendAsync(useMic).finally(function () { });
        this.peerConnection.createOffer(offerOptions).then(function (offer) {
            _this.showTextOverlayConnecting();
            offer.sdp = _this.mungeOffer(offer.sdp, useMic);
            _this.peerConnection.setLocalDescription(offer);
            _this.onSendWebRTCOffer(offer);
        }).catch(function (onRejectedReason) {
            _this.showTextOverlaySetupFailure();
        });
    };
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    PeerConnectionController.prototype.generateStats = function () {
        var _this = this;
        this.peerConnection.getStats(null).then(function (StatsData) {
            _this.aggregatedStats.processStats(StatsData);
            _this.onVideoStats(_this.aggregatedStats);
        });
    };
    /**
     * Close The Peer Connection
     */
    PeerConnectionController.prototype.close = function () {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    };
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    PeerConnectionController.prototype.mungeOffer = function (sdp, useMic) {
        var temp = sdp;
        temp.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, "$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n");
        temp.replace('useinbandfec=1', 'useinbandfec=1;stereo=1;sprop-maxcapturerate=48000');
        // Increase the capture rate of audio so we can have higher quality audio over mic
        if (useMic) {
            temp = temp.replace('useinbandfec=1', 'useinbandfec=1;sprop-maxcapturerate=48000;maxaveragebitrate=510000');
        }
        return temp;
    };
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param sdpAnswer - RTC Session Descriptor from the Signaling Server
     */
    PeerConnectionController.prototype.handleAnswer = function (sdpAnswer) {
        this.peerConnection.setRemoteDescription(sdpAnswer);
    };
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    PeerConnectionController.prototype.handleOnIce = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("peerconnection handleOnIce");
        // // if forcing TURN, reject any candidates not relay
        if (this.forceTurn) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf("relay") < 0) {
                console.warn("Dropping candidate because it was not TURN relay.", "| Type=", iceCandidate.type, "| Protocol=", iceCandidate.protocol, "| Address=", iceCandidate.address, "| Port=", iceCandidate.port, "|");
                return;
            }
        }
        this.peerConnection.addIceCandidate(iceCandidate);
    };
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    PeerConnectionController.prototype.handleSignalStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('signaling state change: ' + state);
    };
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    PeerConnectionController.prototype.handleIceConnectionStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('ice connection state change: ' + state);
    };
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    PeerConnectionController.prototype.handleIceGatheringStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('ice gathering state change: ' + JSON.stringify(state));
    };
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    PeerConnectionController.prototype.handleOnTrack = function (event) {
        this.onTrack(event);
    };
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    PeerConnectionController.prototype.handelIceCandidate = function (event) {
        this.onPeerIceCandidate(event);
    };
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    PeerConnectionController.prototype.onTrack = function (trackEvent) { };
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    PeerConnectionController.prototype.onPeerIceCandidate = function (peerConnectionIceEvent) { };
    /**
     * Setup tracks on the RTC Peer Connection
     */
    PeerConnectionController.prototype.setupTracksToSendAsync = function (useMic) {
        return __awaiter(this, void 0, void 0, function () {
            var hasTransceivers, audioOptions, mediaSendOptions, stream, _i, _a, transceiver, _b, _c, track, _d, _e, track;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        hasTransceivers = this.peerConnection.getTransceivers().length > 0;
                        // Setup a transceiver for getting UE video
                        this.peerConnection.addTransceiver("video", { direction: "recvonly" });
                        if (!!useMic) return [3 /*break*/, 1];
                        this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        return [3 /*break*/, 3];
                    case 1:
                        audioOptions = useMic ?
                            {
                                autoGainControl: false,
                                channelCount: 1,
                                echoCancellation: false,
                                latency: 0,
                                noiseSuppression: false,
                                sampleRate: 48000,
                                sampleSize: 16,
                                volume: 1.0
                            } : false;
                        mediaSendOptions = {
                            video: false,
                            audio: audioOptions,
                        };
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(mediaSendOptions)];
                    case 2:
                        stream = _f.sent();
                        if (stream) {
                            if (hasTransceivers) {
                                for (_i = 0, _a = this.peerConnection.getTransceivers(); _i < _a.length; _i++) {
                                    transceiver = _a[_i];
                                    if (transceiver && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === "audio") {
                                        for (_b = 0, _c = stream.getTracks(); _b < _c.length; _b++) {
                                            track = _c[_b];
                                            if (track.kind && track.kind == "audio") {
                                                transceiver.sender.replaceTrack(track);
                                                transceiver.direction = "sendrecv";
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                for (_d = 0, _e = stream.getTracks(); _d < _e.length; _d++) {
                                    track = _e[_d];
                                    if (track.kind && track.kind == "audio") {
                                        this.peerConnection.addTransceiver(track, { direction: "sendrecv" });
                                    }
                                }
                            }
                        }
                        else {
                            this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        }
                        _f.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    PeerConnectionController.prototype.onVideoStats = function (event) { };
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    PeerConnectionController.prototype.onSendWebRTCOffer = function (offer) { };
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    PeerConnectionController.prototype.showTextOverlayConnecting = function () { };
    /**
     * An override for showing the Peer connection Failed overlay
     */
    PeerConnectionController.prototype.showTextOverlaySetupFailure = function () { };
    return PeerConnectionController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamStats": () => (/* binding */ StreamStats)
/* harmony export */ });
/**
 * Class to hold the stream stats data coming in from webRtc
 */
var StreamStats = /** @class */ (function () {
    function StreamStats() {
    }
    return StreamStats;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeControlMessage.ts":
/*!***************************************************!*\
  !*** ./src/UeInstanceMessage/UeControlMessage.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeControlMessage": () => (/* binding */ UeControlMessage)
/* harmony export */ });
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles Sending control messages to the UE Instance
 */
var UeControlMessage = /** @class */ (function (_super) {
    __extends(UeControlMessage, _super);
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeControlMessage(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send IFrame Request to the UE Instance
     */
    UeControlMessage.prototype.SendIFrameRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.iFrameRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    UeControlMessage.prototype.SendRequestQualityControl = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestQualityControl]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Max FPS Request to the UE Instance
     */
    UeControlMessage.prototype.SendMaxFpsRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.maxFpsRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    UeControlMessage.prototype.SendAverageBitrateRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.averageBitrateRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStartStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.startStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStopStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.stopStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Latency Test to the UE Instance
     * @param StartTimeMs - Start Time of the Latency test
     */
    UeControlMessage.prototype.sendLatencyTest = function (StartTimeMs) {
        var payload = {
            StartTime: StartTimeMs,
        };
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.latencyTest, JSON.stringify(payload));
    };
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    UeControlMessage.prototype.SendRequestInitialSettings = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestInitialSettings]);
        this.sendData(payload.buffer);
    };
    return UeControlMessage;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_1__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDataMessage.ts":
/*!************************************************!*\
  !*** ./src/UeInstanceMessage/UeDataMessage.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDataMessage": () => (/* binding */ UeDataMessage)
/* harmony export */ });
/**
 * Handles sending a message to the UE Instance
 */
var UeDataMessage = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeDataMessage(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    /**
     * Send an Array Buffer to the UE Instance
     * @param buffer - Message Buffer Array
     */
    UeDataMessage.prototype.sendData = function (buffer) {
        this.dataChannelController.sendData(buffer);
    };
    return UeDataMessage;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptor.ts":
/*!***********************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptor.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptor": () => (/* binding */ UeDescriptor)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending a Descriptor to the UE Instance
 */
var UeDescriptor = /** @class */ (function (_super) {
    __extends(UeDescriptor, _super);
    /**
    * @param datachannelController - Data Channel Controller
    */
    function UeDescriptor(datachannelController) {
        var _this = _super.call(this, datachannelController) || this;
        _this.logging = false;
        return _this;
    }
    /**
     * Send a Descriptor to the UE Instances
     * @param messageType - UE Message Type
     * @param JSODescriptor - Descriptor Message as JSON
     */
    UeDescriptor.prototype.sendDescriptor = function (messageType, JSODescriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Sending: " + JSODescriptor);
        // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
        // a time.
        var data = new DataView(new ArrayBuffer(1 + 2 + 2 * JSODescriptor.length));
        var byteIdx = 0;
        data.setUint8(byteIdx, messageType);
        byteIdx++;
        data.setUint16(byteIdx, JSODescriptor.length, true);
        byteIdx += 2;
        for (var i = 0; i < JSODescriptor.length; i++) {
            data.setUint16(byteIdx, JSODescriptor.charCodeAt(i), true);
            byteIdx += 2;
        }
        this.sendData(data.buffer);
    };
    return UeDescriptor;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptorUi.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptorUi.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptorUi": () => (/* binding */ UeDescriptorUi)
/* harmony export */ });
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles the Sending of a UI Descriptor to the UE Instance
 */
var UeDescriptorUi = /** @class */ (function (_super) {
    __extends(UeDescriptorUi, _super);
    /**
     * @param dataChannelController - Data Channel Controller
     */
    function UeDescriptorUi(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send a set res UI Descriptor to UE Instance
     * @param width - Width of res
     * @param height - Height of res
     */
    UeDescriptorUi.prototype.sendUpdateVideoStreamSize = function (width, height) {
        this.sendUiConsoleInteraction("setres " + width + "x" + height);
    };
    /**
     * Send a stat fps UI Descriptor to UE Instance
     */
    UeDescriptorUi.prototype.sendShowFps = function () {
        this.sendUiConsoleInteraction("stat fps");
    };
    /**
     * Send a Encoder Rate Control to UE Instance
     * @param rateControl - Rate Control "CBR" | "VBR" | "ConstQP"
     */
    UeDescriptorUi.prototype.sendEncoderRateControl = function (rateControl) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.RateControl " + rateControl);
    };
    /**
     * Send Encoder Target Bit Rate to the UE Instance
     * @param targetBitRate - Send a Target Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderTargetBitRate = function (targetBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.TargetBitrate " + (targetBitRate > 0 ? targetBitRate : -1));
    };
    /**
     * Send Encoder Max Bit Rate VBR to UE Instance
     * @param maxBitRate - Send A Max Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderMaxBitrateVbr = function (maxBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxBitrateVBR " + (maxBitRate > 0 ? maxBitRate : 1));
    };
    /**
     * Send the Minimum Quantization Parameter to the UE Instance
     * @param minQP - Minimum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMinQP = function (minQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MinQP " + minQP);
    };
    /**
     * Send the Maximum Quantization Parameter to the UE Instance
     * @param maxQP - Maximum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMaxQP = function (maxQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxQP " + maxQP);
    };
    /**
     * Send Enable Filler Data to the UE Instance
     * @param enable - True
     */
    UeDescriptorUi.prototype.sendEncoderEnableFillerData = function (enable) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.EnableFillerData " + Number(enable).valueOf());
    };
    /**
     * Send Encoder MultiPass to UE Instance
     * @param multiPass - MultiPass "DISABLED" | "QUARTER" | "FULL"
     */
    UeDescriptorUi.prototype.sendEncoderMultiPass = function (multiPass) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.Multipass " + multiPass);
    };
    /**
     * Send a Web RTC Degradation Preference to UE Instance
     * @param DegradationPreference - Degradation Preference "BALANCED" | "MAINTAIN_FRAMERATE" | "MAINTAIN_RESOLUTION"
     */
    UeDescriptorUi.prototype.sendWebRtcDegradationPreference = function (DegradationPreference) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.DegradationPreference " + DegradationPreference);
    };
    /**
     * Sends the Max FPS to the UE Instance
     * @param MaxFps - Web RTC Max Frames Per Second
     */
    UeDescriptorUi.prototype.sendWebRtcMaxFps = function (MaxFps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxFps " + MaxFps);
    };
    /**
    * Sends the FPS to the UE Instance used un UE 5.0
    * @param Fps - Web RTC Frames Per Second
    */
    UeDescriptorUi.prototype.sendWebRtcFps = function (Fps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.Fps " + Fps);
    };
    /**
     * Sends the Minimum bit rate to the UE Instance
     * @param MinBitrate - Web RTC Minimum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMinBitrate = function (MinBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MinBitrate " + MinBitrate);
    };
    /**
     * Sends the Maximum bit rate to the UE Instance
     * @param MaxBitrate - Web RTC Maximum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMaxBitrate = function (MaxBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxBitrate " + MaxBitrate);
    };
    /**
     * Sends the Low Quantization Parameter Threshold level to the UE Instance
     * @param LowQpThreshold - Low Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcLowQpThreshold = function (LowQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.LowQpThreshold " + LowQpThreshold);
    };
    /**
     * Sends the High Quantization Parameter Threshold level to the UE Instance
     * @param HighQpThreshold - High Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcHighQpThreshold = function (HighQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.HighQpThreshold " + HighQpThreshold);
    };
    /**
     * Sends a descriptor string to the UE Interaction Instance
     * @param descriptor - the String descriptor to send
     */
    UeDescriptorUi.prototype.sendUiInteraction = function (descriptor) {
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.uiInteraction, descriptor);
    };
    /**
     * Sends a console descriptor
     * @param descriptor - The string descriptor to send
     */
    UeDescriptorUi.prototype.sendUiConsoleInteraction = function (descriptor) {
        var payload = {
            Console: descriptor
        };
        this.sendUiInteraction(JSON.stringify(payload));
    };
    return UeDescriptorUi;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_0__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputGamePadMessage.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputGamePadMessage.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputGamePadMessage": () => (/* binding */ UeInputGamePadMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * The class for handling UE Input GamePad Messages. It implements the UeDataMessage class
 */
var UeInputGamePadMessage = /** @class */ (function (_super) {
    __extends(UeInputGamePadMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputGamePadMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send the controller button press data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex - the button index number
     * @param isRepeat - is this a repeat press
     */
    UeInputGamePadMessage.prototype.sendControllerButtonPressed = function (controllerIndex, buttonIndex, isRepeat) {
        var Data = new DataView(new ArrayBuffer(4));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonPressed);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        Data.setUint8(3, Number(isRepeat).valueOf());
    };
    /**
     * Send the controller button release data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex  - the button index number
     */
    UeInputGamePadMessage.prototype.sendControllerButtonReleased = function (controllerIndex, buttonIndex) {
        var Data = new DataView(new ArrayBuffer(3));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonReleased);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
    };
    /**
     * Send controller axis data through the data channel
     * @param controllerIndex - the controller index number
     * @param axisIndex - the axis index number
     * @param analogValue - the analogue value number
     */
    UeInputGamePadMessage.prototype.sendControllerAxisMove = function (controllerIndex, axisIndex, analogValue) {
        var Data = new DataView(new ArrayBuffer(11));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadAnalog);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, axisIndex);
        Data.setFloat64(3, analogValue, true);
        this.sendData(Data.buffer);
    };
    return UeInputGamePadMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts":
/*!*********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputKeyboardMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputKeyboardMessage": () => (/* binding */ UeInputKeyboardMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Keyboard Messages to the UE Instance
 */
var UeInputKeyboardMessage = /** @class */ (function (_super) {
    __extends(UeInputKeyboardMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputKeyboardMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Sends the key down to the UE Instance
     * @param keyCode - Key code
     * @param isRepeat - Is the key repeating
     */
    UeInputKeyboardMessage.prototype.sendKeyDown = function (keyCode, isRepeat) {
        var Payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyDown, keyCode, Number(isRepeat).valueOf()]);
        this.sendData(Payload.buffer);
    };
    /**
     * Sends the Key Up to the UE Instance
     * @param keyCode - Key code
     */
    UeInputKeyboardMessage.prototype.sendKeyUp = function (keyCode) {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyUp, keyCode]);
        this.sendData(payload.buffer);
    };
    /**
     * Sends the key press to the UE Instance
     * @param CharCode - character code of a key pressed
     */
    UeInputKeyboardMessage.prototype.sendKeyPress = function (CharCode) {
        var data = new DataView(new ArrayBuffer(3));
        data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyPress);
        data.setUint16(1, CharCode, true);
        this.sendData(data.buffer);
    };
    return UeInputKeyboardMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputMouseMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputMouseMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputMouseMessage": () => (/* binding */ UeInputMouseMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Mouse Messages to the UE Instance
 */
var UeInputMouseMessage = /** @class */ (function (_super) {
    __extends(UeInputMouseMessage, _super);
    /**
    * @param datachannelController - Data channel Controller
    */
    function UeInputMouseMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send Mouse Enter to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseEnter = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseEnter);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Leave to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseLeave = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseLeave);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Down to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseDown = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseDown);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Up to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseUp = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseUp);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Move to the UE Instance
     * @param mouseCordX - X Mouse Coordinate
     * @param mouseCordY - Y Mouse Coordinate
     * @param deltaX - X Mouse Delta Coordinate
     * @param deltaY - Y Mouse Delta Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseMove = function (mouseCordX, mouseCordY, deltaX, deltaY) {
        var Data = new DataView(new ArrayBuffer(9));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseMove);
        Data.setUint16(1, mouseCordX, true);
        Data.setUint16(3, mouseCordY, true);
        Data.setInt16(5, deltaX, true);
        Data.setInt16(7, deltaY, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse wheel event to the UE Instance
     * @param deltaY - Mouse Wheel delta Y
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseWheel = function (deltaY, X, Y) {
        var Data = new DataView(new ArrayBuffer(7));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseWheel);
        Data.setInt16(1, deltaY, true);
        Data.setUint16(3, X, true);
        Data.setUint16(5, Y, true);
        this.sendData(Data.buffer);
    };
    return UeInputMouseMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputTouchMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputTouchMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputTouchMessage": () => (/* binding */ UeInputTouchMessage)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Handles Sending Touch messages to the UE Instance
 */
var UeInputTouchMessage = /** @class */ (function (_super) {
    __extends(UeInputTouchMessage, _super);
    /**
     * @param datachannelController - Data channel Controller
     */
    function UeInputTouchMessage(datachannelController) {
        var _this = _super.call(this, datachannelController) || this;
        _this.unsignedOutOfRange = 65535;
        _this.signedOutOfRange = 32767;
        _this.fingersIds = {};
        _this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        _this.printInputs = false;
        return _this;
    }
    /**
     * Handles Touch event Start
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchStart = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchStart, touches);
    };
    /**
     * Handles Touch event End
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchEnd = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchEnd, touches);
    };
    /**
     * Handles Touch event Move
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchMove = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchMove, touches);
    };
    /**
     * Handles Sending the Touch Event to the UE Instance via the Data channel
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouch = function (touchType, touches) {
        var data = new DataView(new ArrayBuffer(2 + 7 * touches.length));
        data.setUint8(0, touchType);
        data.setUint8(1, touches.length);
        var byte = 2;
        for (var t = 0; t < touches.length; t++) {
            var touch = touches[t];
            var x = touch.clientX; //- offsetLeft;
            var y = touch.clientY; //- offsetTop;
            var coord = this.normaliseAndQuantiseUnsigned(x, y);
            //      byte =  2
            data.setUint16(byte, coord.x, true);
            byte += 2;
            //      byte =  4
            data.setUint16(byte, coord.y, true);
            byte += 2;
            //      byte =  6
            data.setUint8(byte, this.fingersIds[touch.identifier]);
            byte += 1;
            //      byte =  7
            data.setUint8(byte, 255 * touch.force); // force is between 0.0 and 1.0 so quantize into byte.
            byte += 1;
            //      byte =  8
            data.setUint8(byte, coord.inRange ? 1 : 0); // mark the touch as in the player or not
            byte += 1;
        }
        this.sendData(data.buffer);
    };
    /**
     * TO DO
     * @param x - X Coordinate
     * @param y - Y Coordinate
     * @returns - Normalised and Quantised Unsigned values
     */
    UeInputTouchMessage.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / playerElement.clientWidth;
                var normalizedY = ratio * (y / playerElement.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned. 
                var normalizedX = ratio * (x / playerElement.clientWidth - 0.5) + 0.5;
                var normalizedY = y / playerElement.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    return UeInputTouchMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeMessageTypes.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeMessageTypes.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeMessageType": () => (/* binding */ UeMessageType)
/* harmony export */ });
/**
 * The Type of message sent to the UE instance over the data channel
 * Must be kept in sync with PixelStreamingProtocol::EToUE4Msg C++ enum.
 * {@link https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Plugins/Media/PixelStreaming/Source/PixelStreaming/Private/ProtocolDefs.h} Requires Login
 */
var UeMessageType = /** @class */ (function () {
    function UeMessageType() {
    }
    /**********************************************************************/
    /*
     * Control Messages. Range = 0..49.
     */
    UeMessageType.iFrameRequest = 0;
    UeMessageType.requestQualityControl = 1;
    UeMessageType.maxFpsRequest = 2;
    UeMessageType.averageBitrateRequest = 3;
    UeMessageType.startStreaming = 4;
    UeMessageType.stopStreaming = 5;
    UeMessageType.latencyTest = 6;
    UeMessageType.requestInitialSettings = 7;
    /**********************************************************************/
    /*
     * Input Messages. Range = 50..89.
     */
    // Generic Input Messages. Range = 50..59.
    UeMessageType.uiInteraction = 50;
    UeMessageType.command = 51;
    // Keyboard Input Message. Range = 60..69.
    UeMessageType.keyDown = 60;
    UeMessageType.keyUp = 61;
    UeMessageType.keyPress = 62;
    // Mouse Input Messages. Range = 70..79.
    UeMessageType.mouseEnter = 70;
    UeMessageType.mouseLeave = 71;
    UeMessageType.mouseDown = 72;
    UeMessageType.mouseUp = 73;
    UeMessageType.mouseMove = 74;
    UeMessageType.mouseWheel = 75;
    // Touch Input Messages. Range = 80..89.
    UeMessageType.touchStart = 80;
    UeMessageType.touchEnd = 81;
    UeMessageType.touchMove = 82;
    // Gamepad Input Messages. Range = 90..99
    UeMessageType.gamepadButtonPressed = 90;
    UeMessageType.gamepadButtonReleased = 91;
    UeMessageType.gamepadAnalog = 92;
    return UeMessageType;
}());



/***/ }),

/***/ "./src/Ui/UiController.ts":
/*!********************************!*\
  !*** ./src/Ui/UiController.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UiController": () => (/* binding */ UiController),
/* harmony export */   "playerStyleAttributes": () => (/* binding */ playerStyleAttributes)
/* harmony export */ });
/**
 * The Ui Controller class handles all methods that interact with the UI
 */
var UiController = /** @class */ (function () {
    function UiController() {
        this.lastTimeResized = new Date().getTime();
        this.playerStyleAttributes = new playerStyleAttributes();
    }
    /**
     * Resizes the player element to fill the window
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToFillWindow = function (playerElement) {
        var videoElement = playerElement.getElementsByTagName("VIDEO")[0];
        // Fill the player display in window, keeping picture's aspect ratio.
        var windowAspectRatio = window.innerHeight / window.innerWidth;
        var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
        // We want to keep the video ratio correct for the video stream
        var videoWidth;
        var videoHeight;
        if (!videoElement === undefined) {
            videoWidth = parseInt(videoElement.getAttribute("videoWidth"));
            videoHeight = parseInt(videoElement.getAttribute("videoHeight"));
        }
        var videoAspectRatio = videoHeight / videoWidth;
        if (isNaN(videoAspectRatio)) {
            //Video is not initialised yet so set playerElement to size of window
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
        else if (windowAspectRatio < playerAspectRatio) {
            // Window height is the constraining factor so to keep aspect ratio change width appropriately
            this.playerStyleAttributes.styleWidth = Math.floor(window.innerHeight / videoAspectRatio);
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            //Video is now 100% of the playerElement, so set the playerElement style
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
        else {
            // Window width is the constraining factor so to keep aspect ratio change height appropriately
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = Math.floor(window.innerWidth * videoAspectRatio);
            this.playerStyleAttributes.styleTop = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            this.playerStyleAttributes.styleLeft = 0;
            //Video is now 100% of the playerElement, so set the playerElement style
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
    };
    /**
     * Resizes the player element to fit the actual size of the stream
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToActualSize = function (playerElement) {
        var videoElement = playerElement.getElementsByTagName("VIDEO")[0];
        var videoElementLength;
        if (!videoElement === undefined) {
            videoElementLength = parseInt(videoElement.getAttribute("length"));
        }
        if (videoElementLength > 0) {
            // Display image in its actual size
            this.playerStyleAttributes.styleWidth = videoElement.videoWidth;
            this.playerStyleAttributes.styleHeight = videoElement.videoHeight;
            var Top = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            var Left = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            this.playerStyleAttributes.styleTop = (Top > 0) ? Top : 0;
            this.playerStyleAttributes.styleLeft = (Left > 0) ? Left : 0;
            //Video is now 100% of the playerElement, so set the playerElement style
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
    };
    /**
     * Resizes the player element to fit an arbitrary size
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToArbitrarySize = function (playerElement) {
        var videoElement = playerElement.getElementsByTagName("VIDEO")[0];
        //Video is now 100% of the playerElement, so set the playerElement style
        playerElement.setAttribute('style', "top: 0px; left: 0px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        //playerElement.style = "top: 0px; left: 0px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
    };
    /**
     * An override for setting up the mouse and freezeFrame
     * @param element - the player DOM element
     */
    UiController.prototype.setUpMouseAndFreezeFrame = function (element) { };
    /**
     * An override for updating the video stream size
     */
    UiController.prototype.updateVideoStreamSize = function () { };
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    UiController.prototype.resizePlayerStyle = function () {
        var playerElement = document.getElementById('player');
        if (!playerElement) {
            return;
        }
        this.updateVideoStreamSize();
        if (playerElement.classList.contains('fixed-size')) {
            this.setUpMouseAndFreezeFrame(playerElement);
            return;
        }
        var checkBox = document.getElementById('enlarge-display-to-fill-window-tgl');
        var videoWidth = parseInt(playerElement.getAttribute("videoWidth"));
        var videoHeight = parseInt(playerElement.getAttribute("videoHeight"));
        var windowSmallerThanPlayer = window.innerWidth < videoWidth || window.innerHeight < videoHeight;
        if (checkBox !== null) {
            if (checkBox.checked || windowSmallerThanPlayer) {
                this.resizePlayerStyleToFillWindow(playerElement);
            }
            else {
                this.resizePlayerStyleToActualSize(playerElement);
            }
        }
        else {
            this.resizePlayerStyleToArbitrarySize(playerElement);
        }
        this.setUpMouseAndFreezeFrame(playerElement);
    };
    /**
     * Registers the the resize windows tick box event
     */
    UiController.prototype.registerResizeTickBoxEvent = function () {
        window.addEventListener('resize', this.resizePlayerStyle.bind(this), true);
        window.addEventListener('orientationchange', this.onOrientationChange);
        var resizeCheckBox = document.getElementById('enlarge-display-to-fill-window-tgl');
        if (resizeCheckBox !== null) {
            resizeCheckBox.onchange = function () {
                this.resizePlayerStyle();
            }.bind(this);
        }
    };
    /**
     * On the orientation change of a window clear the timeout
     */
    UiController.prototype.onOrientationChange = function () {
        var _this = this;
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = setTimeout(function () { _this.resizePlayerStyle(); }, 500);
    };
    return UiController;
}());

/**
 * Handles the player style attributes so they can be instantiated
 */
var playerStyleAttributes = /** @class */ (function () {
    function playerStyleAttributes() {
        this.styleCursor = 'default';
    }
    return playerStyleAttributes;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerController.ts":
/*!**************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerController": () => (/* binding */ VideoPlayerController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
var VideoPlayerController = /** @class */ (function () {
    function VideoPlayerController(htmlDivElement, startVideoMuted) {
        // set the audio defaults
        this.startVideoMuted = startVideoMuted;
        // the video element needs to exist before creating the player so assign the div and make the element
        this.videoPlayerDiv = htmlDivElement;
        this.videoElement = document.createElement("video");
        this.audioElement = document.createElement("Audio");
    }
    /**
     * Create the video Element
     */
    VideoPlayerController.prototype.createVideoPlayer = function () {
        this.videoElement.id = "streamingVideo";
        this.videoElement.muted = this.startVideoMuted;
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = "100%";
        this.videoElement.style.height = "100%";
        this.videoElement.onmouseenter = this.handleMouseEnter.bind(this);
        this.videoElement.onmouseleave = this.handleMouseLeave.bind(this);
        this.videoPlayerDiv.appendChild(this.videoElement);
    };
    /**
     * Handle when the locked state Changed
     */
    VideoPlayerController.prototype.handleLockStateChange = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Lock state has changed");
        if (document.pointerLockElement === this.videoElement /*document.mozPointerLockElement === playerElement*/) {
            document.onmousemove = this.videoInputBindings.handleMouseMove.bind(this.videoInputBindings);
            document.onwheel = this.videoInputBindings.handleMouseWheel.bind(this.videoInputBindings);
            this.videoElement.onmousedown = this.videoInputBindings.handleMouseDown.bind(this.videoInputBindings);
            this.videoElement.onmouseup = this.videoInputBindings.handleMouseUp.bind(this.videoInputBindings);
        }
        else {
            document.onmousemove = null;
            this.videoElement.onmousedown = null;
            this.videoElement.onmouseup = null;
            this.videoElement.onwheel = null;
        }
    };
    /**
     * Handle when the Element is mouse clicked
     * @param event - Mouse Event
     */
    VideoPlayerController.prototype.handleClick = function (event) {
        if (this.videoElement.paused) {
            this.videoElement.play();
        }
        this.videoElement.requestPointerLock();
    };
    /**
     * Handle when the Mouse has entered the element
     * @param event - Mouse Event
     */
    VideoPlayerController.prototype.handleMouseEnter = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Mouse Entered");
        this.mouseController.sendMouseEnter();
    };
    /**
     * Handles when the mouse has left the element
     * @param event - Mouse event
     */
    VideoPlayerController.prototype.handleMouseLeave = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Mouse Left");
        this.mouseController.sendMouseLeave();
    };
    /**
     * Handles the Load Meta Data Event
     * @param event - Event Not used
     */
    VideoPlayerController.prototype.handleLoadMetaData = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("showPlayOverlay \n resizePlayerStyle");
    };
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    VideoPlayerController.prototype.handleOnTrack = function (rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("handleOnTrack " + JSON.stringify(rtcTrackEvent.streams));
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('Got track - ' + rtcTrackEvent.track.kind + ' id=' + rtcTrackEvent.track.id + ' readyState=' + rtcTrackEvent.track.readyState);
        }
        if (rtcTrackEvent.track.kind == "audio") {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == "video" && this.videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            this.videoElement.srcObject = rtcTrackEvent.streams[0];
            console.log('Set video source from video track ontrack.');
            return;
        }
    };
    /**
    * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
    * @param audioMediaStream - Audio Media stream track
    */
    VideoPlayerController.prototype.CreateAudioTrack = function (audioMediaStream) {
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (this.videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (this.videoElement.srcObject && this.videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            console.log('Created new audio element to play separate audio stream.');
        }
    };
    /**
     * Plays the audio from the audio element or sets up an event listener to play it once an interaction has occurred
     */
    VideoPlayerController.prototype.PlayAudioTrack = function () {
        var _this = this;
        // attempt to auto play the audio from the audio element if not then set up a listener 
        this.audioElement.muted = false;
        this.audioElement.play().catch(function (onRejectedReason) {
            console.log(onRejectedReason);
            console.log("Browser does not support autoplaying audio without interaction - to resolve this we are going to run the audio until the video is clicked");
            var clickToPlayAudio = function () {
                _this.audioElement.muted = false;
                _this.audioElement.play();
                _this.videoElement.removeEventListener("click", clickToPlayAudio);
            };
            _this.videoElement.addEventListener("click", clickToPlayAudio);
        });
    };
    /**
     * Set the Video Elements src object tracks to enable
     * @param enabled - Enable Tracks on the Src Object
     */
    VideoPlayerController.prototype.setVideoEnabled = function (enabled) {
        this.videoElement.srcObject.getTracks().forEach(function (track) { return track.enabled = enabled; });
    };
    return VideoPlayerController;
}());

/* 5457524F4D4D */ 


/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts":
/*!********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseHoverEvents": () => (/* binding */ VideoPlayerMouseHoverEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player mouse Hover handler
 */
var VideoPlayerMouseHoverEvents = /** @class */ (function () {
    /**
     * @param mouseController - Mouse Controller
     */
    function VideoPlayerMouseHoverEvents(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseMove = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("MouseMove");
        this.mouseController.sendMouseMove(mouseEvent.offsetX, mouseEvent.offsetY, mouseEvent.movementX, mouseEvent.movementY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseDown = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("onMouse Down");
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.detail * -120, wheelEvent.offsetX, wheelEvent.offsetY);
        wheelEvent.preventDefault();
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleContextMenu = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    return VideoPlayerMouseHoverEvents;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts":
/*!*********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseLockedEvents": () => (/* binding */ VideoPlayerMouseLockedEvents)
/* harmony export */ });
/**
 * Handle the mouse locked events
 */
var VideoPlayerMouseLockedEvents = /** @class */ (function () {
    /**
     * @param htmlVideoElement - The HTML Video Element
     * @param mouseController  - Mouse Controller
     */
    function VideoPlayerMouseLockedEvents(htmlVideoElement, mouseController) {
        this.htmlVideoElement = htmlVideoElement;
        this.mouseController = mouseController;
        this.x = this.htmlVideoElement.width / 2;
        this.y = this.htmlVideoElement.height / 2;
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseMove = function (mouseEvent) {
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > this.htmlVideoElement.clientWidth) {
            this.x -= this.htmlVideoElement.clientWidth;
        }
        if (this.y > this.htmlVideoElement.clientHeight) {
            this.y -= this.htmlVideoElement.clientHeight;
        }
        if (this.x < 0) {
            this.x = this.htmlVideoElement.clientWidth + this.x;
        }
        if (this.y < 0) {
            this.y = this.htmlVideoElement.clientHeight - this.y;
        }
        this.mouseController.sendMouseMove(this.x, this.y, mouseEvent.movementX, mouseEvent.movementY);
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseDown = function (mouseEvent) {
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.deltaY, wheelEvent.x, wheelEvent.y);
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleContextMenu = function (mouseEvent) {
        console.info("onContextMenu");
    };
    return VideoPlayerMouseLockedEvents;
}());



/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "webRtcPlayerController": () => (/* binding */ webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerController */ "./src/VideoPlayer/VideoPlayerController.ts");
/* harmony import */ var _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Ui/UiController */ "./src/Ui/UiController.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../UeInstanceMessage/UeDescriptorUi */ "./src/UeInstanceMessage/UeDescriptorUi.ts");
/* harmony import */ var _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../UeInstanceMessage/UeControlMessage */ "./src/UeInstanceMessage/UeControlMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Inputs_InputController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Inputs/InputController */ "./src/Inputs/InputController.ts");
/* harmony import */ var _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../MicPlayer/MicController */ "./src/MicPlayer/MicController.ts");



//import { FreezeFrameLogic } from "../FreezeFrame/FreezeFrameLogic";








/**
 * Entry point for the Web RTC Player
 */
var webRtcPlayerController = /** @class */ (function () {
    /**
     *
     * @param config - the frontend config object
     * @param delegate - the delegate interface object
     */
    function webRtcPlayerController(config, delegate) {
        var _this = this;
        this.lastTimeResized = new Date().getTime();
        this.config = config;
        this.delegate = delegate;
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server 
        this.afkLogic = new _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__.AfkLogic(this.config.controlScheme, this.config.afkTimeout);
        this.afkLogic.closeWebSocket = function () { return _this.closeSignalingServer(); };
        this.uiController = new _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__.UiController();
        this.uiController.setUpMouseAndFreezeFrame = this.setUpMouseAndFreezeFrame.bind(this);
        this.uiController.registerResizeTickBoxEvent();
        //this.freezeFrame = new FreezeFrame();
        //this.freezeFrame.freezeFrameOverlay.resizePlayerStyle = this.uiController.resizePlayerStyle.bind(this);
        this.dataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_4__.DataChannelController();
        this.dataChannelController.handleOnOpen = this.handleDataChannelConnected.bind(this);
        this.dataChannelController.onLatencyTestResult = this.handleLatencyTestResult.bind(this);
        this.dataChannelController.onVideoEncoderAvgQP = this.handleVideoEncoderAvgQP.bind(this);
        this.dataChannelController.OnInitialSettings = this.handleInitialSettings.bind(this);
        this.dataChannelController.onQualityControlOwnership = this.handleQualityControlOwnership.bind(this);
        this.dataChannelController.resetAfkWarningTimerOnDataSend = function () { return _this.afkLogic.resetAfkWarningTimer(); };
        this.videoPlayerController = new _VideoPlayer_VideoPlayerController__WEBPACK_IMPORTED_MODULE_1__.VideoPlayerController(this.config.playerElement, this.config.startVideoMuted);
        //this.freezeFrame.setPlayOverlayEvent(this.playOverlayEvent);
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__.WebSocketController(this.config.signallingServerAddress);
        this.webSocketController.onConfig = this.handleOnConfigMessage.bind(this);
        this.webSocketController.onInstanceStateChange = this.handleInstanceStateChange.bind(this);
        this.webSocketController.onAuthenticationResponse = this.handleAuthenticationResponse.bind(this);
        this.webSocketController.onWebSocketOncloseOverlayMessage = this.delegate.onDisconnect.bind(this.delegate);
        // set up the final webRtc player controller methods from within our delegate so a connection can be activated
        this.setUpWebRtcConnectionForActivation();
        // now that the delegate has finished instantiating connect the rest of the afk methods to the afk logic class
        this.afkLogic.showAfkOverlay = function () { return _this.delegate.showAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.updateAfkCountdown = function () { return _this.delegate.updateAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.hideCurrentOverlay = function () { return _this.delegate.hideCurrentOverlay(); };
    }
    /**
     * connect up the onAfkClick action with a method so it can be exposed to the delegate
     */
    webRtcPlayerController.prototype.onAfkClick = function () {
        this.afkLogic.onAfkClick();
    };
    /**
     * Restart the stream automaticity without refreshing the page
     */
    webRtcPlayerController.prototype.restartStreamAutomaticity = function () {
        var _this = this;
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            console.log("The Web Socket Controller does not exist so this will not work right now.");
            return;
        }
        // if a websocket object has not been created connect normally without closing 
        if (!this.webSocketController.webSocket) {
            console.log("A websocket connection has not been made yet please click to start the stream");
        }
        else {
            // close the connection 
            this.webSocketController.close();
            // wait for the connection to close and restart the connection
            setTimeout(function () { _this.setUpWebRtcConnectionForActivation(); }, 3000);
        }
    };
    /**
     * activate the setIWebRtcPlayerController method within our delegate to set up the final webRtc player controller methods so a webRtc connection can be made
     */
    webRtcPlayerController.prototype.setUpWebRtcConnectionForActivation = function () {
        this.delegate.setIWebRtcPlayerController(this);
    };
    /**
     * Plays the stream and sets up other pieces while the stream starts also handles if the video cannot play
     */
    webRtcPlayerController.prototype.playStream = function () {
        var _this = this;
        if (this.videoPlayerController && this.videoPlayerController.videoElement) {
            // handle play() with .then as it is an asynchronous call  
            this.videoPlayerController.videoElement.play().then(function () {
                _this.videoPlayerController.PlayAudioTrack();
                _this.ueControlMessage.SendRequestInitialSettings();
                _this.ueControlMessage.SendRequestQualityControl();
                //this.freezeFrame.freezeFrameOverlay.showFreezeFrameOverlay();
                _this.delegate.hideCurrentOverlay();
                _this.inputController.registerTouch(_this.config.fakeMouseWithTouches, _this.config.playerElement);
                _this.afkLogic.startAfkWarningTimer();
            }).catch(function (onRejectedReason) {
                console.log(onRejectedReason);
                console.log("Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
                _this.delegate.showPlayOverlay();
            });
        }
        else {
            console.error("Could not player video stream because webRtcPlayerObj.video was not valid.");
        }
    };
    /**
     * Enable the video to play automaticity if enableSpsAutoplay is true
     */
    webRtcPlayerController.prototype.autoPlayVideoOrSetUpPlayOverlay = function () {
        if (this.config.enableSpsAutoplay === true) {
            // set up the auto play on the video element  
            this.videoPlayerController.videoElement.autoplay = true;
            // attempt to play the video
            this.playStream();
        }
        else {
            this.delegate.showPlayOverlay();
        }
    };
    /**
     * Connect to the Signaling server
     */
    webRtcPlayerController.prototype.connectToSignallingSever = function () {
        this.webSocketController.connect();
    };
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    webRtcPlayerController.prototype.startSession = function (peerConfig) {
        // set up url params for STUN, Mic and SFU
        this.urlParams = new URLSearchParams(window.location.search);
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_5__.PeerConnectionController(peerConfig, this.urlParams);
        //set up mic controller
        this.micController = new _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_10__.MicController(this.urlParams);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = this.handleVideoStats.bind(this);
        /* When the Peer Connection Wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = this.handleSendWebRTCOffer.bind(this);
        /* When the Peer connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = this.handleSendIceCandidate.bind(this);
        // handel mic connections with promise
        this.dataChannelController.createDataChannel(this.peerConnectionController.peerConnection, "cirrus", this.datachannelOptions);
        // set up webRtc text overlays 
        this.peerConnectionController.showTextOverlayConnecting = this.delegate.onWebRtcConnecting.bind(this.delegate);
        this.peerConnectionController.showTextOverlaySetupFailure = this.delegate.onWebRtcFailed.bind(this.delegate);
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = this.videoPlayerController.handleOnTrack.bind(this.videoPlayerController);
        /* Start the Hand shake process by creating an Offer */
        this.peerConnectionController.createOffer(this.sdpConstraints, this.micController.useMic);
    };
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    webRtcPlayerController.prototype.handleOnConfigMessage = function (messageConfig) {
        /* Tell the WebRtcController to start a session with the peer options sent from the signaling server */
        this.startSession(messageConfig.peerConnectionOptions);
        /* When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message */
        this.webSocketController.onWebRtcAnswer = this.handleWebRtcAnswer.bind(this);
        /* When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message  */
        this.webSocketController.onIceCandidate = this.handleIceCandidate.bind(this);
    };
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer Message from the Signaling server
     */
    webRtcPlayerController.prototype.handleWebRtcAnswer = function (Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("There is an answer");
        var sdpAnswer = {
            sdp: Answer.sdp,
            type: "answer"
        };
        this.peerConnectionController.handleAnswer(sdpAnswer);
        this.delegate.onWebRtcAnswer();
    };
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    webRtcPlayerController.prototype.handleIceCandidate = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("Web RTC Controller: onWebRtcIce");
        var candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    };
    /**
     * Send the ice Candidate to the signaling server via websocket
       * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    webRtcPlayerController.prototype.handleSendIceCandidate = function (iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("OnIceCandidate");
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    };
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    webRtcPlayerController.prototype.handleSendWebRTCOffer = function (offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("Sending the offer to the Server");
        this.webSocketController.sendWebRtcOffer(offer);
    };
    /**
     * registers the mouse for use in IWebRtcPlayerController
     */
    webRtcPlayerController.prototype.activateRegisterMouse = function () {
        this.inputController.registerMouse(this.config.controlScheme, this.videoPlayerController);
    };
    /**
     * Sets up the Data channel Keyboard, Mouse, UE Control Message, UE Descriptor
     */
    webRtcPlayerController.prototype.handleDataChannelConnected = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("Data Channel is open");
        // show the connected overlay 
        this.delegate.onWebRtcConnected();
        this.inputController = new _Inputs_InputController__WEBPACK_IMPORTED_MODULE_9__.InputController(this.dataChannelController);
        this.ueControlMessage = new _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_7__.UeControlMessage(this.dataChannelController);
        this.ueDescriptorUi = new _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_6__.UeDescriptorUi(this.dataChannelController);
        this.videoPlayerController.createVideoPlayer();
        this.activateRegisterMouse();
        this.inputController.registerKeyBoard(this.config.suppressBrowserKeys);
        this.inputController.registerGamePad();
        this.videoPlayerController.mouseController = this.inputController.mouseController;
        this.uiController.resizePlayerStyle();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("onVideoInitialised");
        //this.dataChannelController.processFreezeFrameMessage = //this.freezeFrame.processFreezeFrameMessage.bind(//this.freezeFrame);
        //this.dataChannelController.onUnFreezeFrame = //this.freezeFrame.freezeFrameOverlay.invalidateFreezeFrameOverlay.bind(//this.freezeFrame);
        setInterval(this.getStats.bind(this), 1000);
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.uiController.resizePlayerStyle();
        //this.freezeFrame.freezeFrameOverlay.checkIfVideoExists = this.checkIfVideoExists.bind(//this.freezeFrame);
        //this.freezeFrame.freezeFrameOverlay.setVideoEnabled = this.videoPlayerController.setVideoEnabled.bind(this.videoPlayerController);
        this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayerController.videoElement.clientWidth, this.videoPlayerController.videoElement.clientHeight);
        this.delegate.onVideoInitialised();
        this.uiController.updateVideoStreamSize = this.updateVideoStreamSize.bind(this);
    };
    /**
     * Handles when the web socket receives an authentication response
     * @param authResponse - Authentication Response
     */
    webRtcPlayerController.prototype.handleAuthenticationResponse = function (authResponse) {
        this.delegate.onAuthenticationResponse(authResponse);
    };
    /**
     * Handles when the stream size changes
     */
    webRtcPlayerController.prototype.updateVideoStreamSize = function () {
        // Call the setter before calling this function
        if (!this.matchViewportResolution) {
            return;
        }
        var now = new Date().getTime();
        if (now - this.lastTimeResized > 1000) {
            var playerElement = document.getElementById('player');
            if (!playerElement) {
                return;
            }
            this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayerController.videoElement.clientWidth, this.videoPlayerController.videoElement.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog('Resizing too often - skipping');
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(this.updateVideoStreamSize, 1000);
        }
    };
    /**
     * Handles when the Instance State Changes
     * @param instanceState  - Instance State
     */
    webRtcPlayerController.prototype.handleInstanceStateChange = function (instanceState) {
        this.delegate.onInstanceStateChange(instanceState);
    };
    /**
     * Checks if the video player div exists
     * @returns - if Video Exists
     */
    webRtcPlayerController.prototype.checkIfVideoExists = function () {
        if (this.videoPlayerController.videoPlayerDiv) {
            return true;
        }
    };
    /**
     * Set the freeze frame overlay to the player div
     * @param playerElement - The div element of the Player
     */
    webRtcPlayerController.prototype.setUpMouseAndFreezeFrame = function (playerElement) {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.playerElementClientRect = playerElement.getBoundingClientRect();
        //this.freezeFrame.freezeFrameOverlay.resizeFreezeFrameOverlay();
    };
    /**
     * Close the Connection to the signaling server
     */
    webRtcPlayerController.prototype.closeSignalingServer = function () {
        this.webSocketController.close();
    };
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    webRtcPlayerController.prototype.getStats = function () {
        this.peerConnectionController.generateStats();
    };
    /**
     * Send a Latency Test Request to the UE Instance
     */
    webRtcPlayerController.prototype.sendLatencyTest = function () {
        this.latencyStartTime = Date.now();
        this.ueControlMessage.sendLatencyTest(this.latencyStartTime);
    };
    /**
     * Send the Encoder Settings to the UE Instance as a UE UI Descriptor.
     * @param encoder - Encoder Settings
     */
    webRtcPlayerController.prototype.sendEncoderSettings = function (encoder) {
        console.log("----   Encoder Settings    ----\n" + JSON.stringify(encoder, undefined, 4) + "\n-------------------------------");
        if (encoder.RateControl != null) {
            this.ueDescriptorUi.sendEncoderRateControl(encoder.RateControl);
        }
        if (encoder.TargetBitrate != null) {
            this.ueDescriptorUi.sendEncoderTargetBitRate(encoder.TargetBitrate);
        }
        if (encoder.MaxBitrate != null) {
            this.ueDescriptorUi.sendEncoderMaxBitrateVbr(encoder.MaxBitrate);
        }
        if (encoder.MinQP != null) {
            this.ueDescriptorUi.sendEncoderMinQP(encoder.MinQP);
        }
        if (encoder.MaxQP != null) {
            this.ueDescriptorUi.sendEncoderMaxQP(encoder.MaxQP);
        }
        if (encoder.FillerData != null) {
            this.ueDescriptorUi.sendEncoderEnableFillerData(encoder.FillerData);
        }
        if (encoder.MultiPass != null) {
            this.ueDescriptorUi.sendEncoderMultiPass(encoder.MultiPass);
        }
    };
    /**
     * Send the WebRTC Settings to the UE Instance as a UE UI Descriptor.
     * @param webRTC - Web RTC Settings
     */
    webRtcPlayerController.prototype.sendWebRtcSettings = function (webRTC) {
        console.log("----   WebRTC Settings    ----\n" + JSON.stringify(webRTC, undefined, 4) + "\n-------------------------------");
        if (webRTC.DegradationPref != null) {
            this.ueDescriptorUi.sendWebRtcDegradationPreference(webRTC.DegradationPref);
        }
        if (webRTC.FPS != null) {
            this.ueDescriptorUi.sendWebRtcFps(webRTC.FPS);
            this.ueDescriptorUi.sendWebRtcMaxFps(webRTC.FPS);
        }
        if (webRTC.MinBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMinBitrate(webRTC.MinBitrate);
        }
        if (webRTC.MaxBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMaxBitrate(webRTC.MaxBitrate);
        }
        if (webRTC.LowQP != null) {
            this.ueDescriptorUi.sendWebRtcLowQpThreshold(webRTC.LowQP);
        }
        if (webRTC.HighQP != null) {
            this.ueDescriptorUi.sendWebRtcHighQpThreshold(webRTC.HighQP);
        }
    };
    /**
     * Send Aggregated Stats to the Signaling Server
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.sendStatsToSignallingServer = function (stats) {
        //console.log("----   Sending Aggregated Stats to Signaling Server   ----\n" + JSON.stringify(stats, undefined, 4) + "\n-----------------------------------------------------------");
        this.webSocketController.sendStats(stats);
    };
    /**
     * Sends a UI Interaction Descriptor to the UE Instance
     * @param message - String to send to the UE Instance
     */
    webRtcPlayerController.prototype.sendUeUiDescriptor = function (message) {
        //console.log("----   UE UI Interaction String   ----\n" + JSON.stringify(message, undefined, 4) + "\n---------------------------------------");
        this.ueDescriptorUi.sendUiInteraction(message);
    };
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    webRtcPlayerController.prototype.sendShowFps = function () {
        //console.log("----   Sending show stat to UE   ----");
        this.ueDescriptorUi.sendShowFps();
    };
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    webRtcPlayerController.prototype.sendRequestQualityControlOwnership = function () {
        //console.log("----   Sending Request to Control Quality  ----");
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param latencyTimings - Latency Test Timings
     */
    webRtcPlayerController.prototype.handleLatencyTestResult = function (latencyTimings) {
        latencyTimings.testStartTimeMs = this.latencyStartTime;
        latencyTimings.browserReceiptTimeMs = Date.now();
        latencyTimings.latencyExcludingDecode = ~~(latencyTimings.browserReceiptTimeMs - latencyTimings.testStartTimeMs);
        latencyTimings.testDuration = ~~(latencyTimings.TransmissionTimeMs - latencyTimings.ReceiptTimeMs);
        latencyTimings.networkLatency = ~~(latencyTimings.latencyExcludingDecode - latencyTimings.testDuration);
        if (latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs) {
            latencyTimings.endToEndLatency = ~~(latencyTimings.frameDisplayDeltaTimeMs + latencyTimings.networkLatency, +latencyTimings.CaptureToSendMs);
        }
        this.delegate.onLatencyTestResult(latencyTimings);
    };
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param settings - Initial Encoder and Web RTC Settings
     */
    webRtcPlayerController.prototype.handleInitialSettings = function (settings) {
        this.delegate.onInitialSettings(settings);
    };
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param AvgQP - Encoders Quantization Parameter
     */
    webRtcPlayerController.prototype.handleVideoEncoderAvgQP = function (AvgQP) {
        this.delegate.onVideoEncoderAvgQP(AvgQP);
    };
    /**
     * Flag set if the user has Quality Ownership
     * @param hasQualityOwnership - Does the current client have Quality Ownership
     */
    webRtcPlayerController.prototype.handleQualityControlOwnership = function (hasQualityOwnership) {
        this.delegate.onQualityControlOwnership(hasQualityOwnership);
    };
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.handleVideoStats = function (stats) {
        this.delegate.onVideoStats(stats);
    };
    /**
    * To Resize the Video Player element
    */
    webRtcPlayerController.prototype.resizePlayerStyle = function () {
        this.uiController.resizePlayerStyle();
    };
    return webRtcPlayerController;
}());



/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstanceState": () => (/* binding */ InstanceState),
/* harmony export */   "MessageAnswer": () => (/* binding */ MessageAnswer),
/* harmony export */   "MessageAuthRequired": () => (/* binding */ MessageAuthRequired),
/* harmony export */   "MessageAuthResponse": () => (/* binding */ MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* binding */ MessageAuthResponseOutcomeType),
/* harmony export */   "MessageConfig": () => (/* binding */ MessageConfig),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageInstanceState": () => (/* binding */ MessageInstanceState),
/* harmony export */   "MessagePlayerCount": () => (/* binding */ MessagePlayerCount),
/* harmony export */   "MessageRecv": () => (/* binding */ MessageRecv),
/* harmony export */   "MessageRecvTypes": () => (/* binding */ MessageRecvTypes)
/* harmony export */ });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["AUTHENTICATION_REQUIRED"] = "authenticationRequired";
    MessageRecvTypes["AUTHENTICATION_RESPONSE"] = "authenticationResponse";
    MessageRecvTypes["INSTANCE_STATE"] = "instanceState";
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Types of Authentication reposes
 */
var MessageAuthResponseOutcomeType;
(function (MessageAuthResponseOutcomeType) {
    MessageAuthResponseOutcomeType["REDIRECT"] = "REDIRECT";
    MessageAuthResponseOutcomeType["INVALID_TOKEN"] = "INVALID_TOKEN";
    MessageAuthResponseOutcomeType["AUTHENTICATED"] = "AUTHENTICATED";
    MessageAuthResponseOutcomeType["ERROR"] = "ERROR";
})(MessageAuthResponseOutcomeType || (MessageAuthResponseOutcomeType = {}));
/**
 * States of the UE Instance
 */
var InstanceState;
(function (InstanceState) {
    InstanceState["UNALLOCATED"] = "UNALLOCATED";
    InstanceState["PENDING"] = "PENDING";
    InstanceState["FAILED"] = "FAILED";
    InstanceState["READY"] = "READY";
})(InstanceState || (InstanceState = {}));
/**
 * Concrete Received Message wrapper
 */
var MessageRecv = /** @class */ (function () {
    function MessageRecv() {
    }
    return MessageRecv;
}());

/**
 * Authentication Required Message wrapper
 */
var MessageAuthRequired = /** @class */ (function (_super) {
    __extends(MessageAuthRequired, _super);
    function MessageAuthRequired() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthRequired;
}(MessageRecv));

/**
 * Authentication Response Message wrapper
 */
var MessageAuthResponse = /** @class */ (function (_super) {
    __extends(MessageAuthResponse, _super);
    function MessageAuthResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthResponse;
}(MessageRecv));

/**
 * Instance State Message wrapper
 */
var MessageInstanceState = /** @class */ (function (_super) {
    __extends(MessageInstanceState, _super);
    function MessageInstanceState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageInstanceState;
}(MessageRecv));

/**
 * Config Message Wrapper
 */
var MessageConfig = /** @class */ (function (_super) {
    __extends(MessageConfig, _super);
    function MessageConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageConfig;
}(MessageRecv));

/**
 * Player Count Message wrapper
 */
var MessagePlayerCount = /** @class */ (function (_super) {
    __extends(MessagePlayerCount, _super);
    function MessagePlayerCount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessagePlayerCount;
}(MessageRecv));

/**
 * Web RTC offer Answer Message wrapper
 */
var MessageAnswer = /** @class */ (function (_super) {
    __extends(MessageAnswer, _super);
    function MessageAnswer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAnswer;
}(MessageRecv));

/**
 * Ice Candidate Message wrapper
 */
var MessageIceCandidate = /** @class */ (function (_super) {
    __extends(MessageIceCandidate, _super);
    function MessageIceCandidate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageIceCandidate;
}(MessageRecv));



/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MessageAuthRequest": () => (/* binding */ MessageAuthRequest),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageRequestInstance": () => (/* binding */ MessageRequestInstance),
/* harmony export */   "MessageSend": () => (/* binding */ MessageSend),
/* harmony export */   "MessageSendTypes": () => (/* binding */ MessageSendTypes),
/* harmony export */   "MessageStats": () => (/* binding */ MessageStats),
/* harmony export */   "MessageWebRTCOffer": () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["STATS"] = "stats";
    MessageSendTypes["AUTHENTICATION_REQUEST"] = "authenticationRequest";
    MessageSendTypes["REQUEST_INSTANCE"] = "requestInstance";
    MessageSendTypes["OFFER"] = "offer";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
var MessageSend = /** @class */ (function () {
    function MessageSend() {
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageSend.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Sending => \n" + JSON.stringify(this, undefined, 4));
        return JSON.stringify(this);
    };
    return MessageSend;
}());

/**
 * Auth Request Message Wrapper
 */
var MessageAuthRequest = /** @class */ (function (_super) {
    __extends(MessageAuthRequest, _super);
    /**
     * @param token - Token Provided by the Auth Provider
     * @param provider - Name of the provider that is registered in the auth plugin
     */
    function MessageAuthRequest(token, provider) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.AUTHENTICATION_REQUEST;
        _this.token = token;
        _this.provider = provider;
        return _this;
    }
    return MessageAuthRequest;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessageRequestInstance = /** @class */ (function (_super) {
    __extends(MessageRequestInstance, _super);
    function MessageRequestInstance() {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.REQUEST_INSTANCE;
        return _this;
    }
    return MessageRequestInstance;
}(MessageSend));

/**
 * Aggregated Stats Message Wrapper
 */
var MessageStats = /** @class */ (function (_super) {
    __extends(MessageStats, _super);
    /**
     * @param aggregatedStats - Aggregated Stats
     */
    function MessageStats(aggregatedStats) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.STATS;
        _this.inboundVideoStats = aggregatedStats.inboundVideoStats;
        _this.inboundAudioStats = aggregatedStats.inboundAudioStats;
        _this.candidatePair = aggregatedStats.candidatePair;
        _this.dataChannelStats = aggregatedStats.dataChannelStats;
        _this.localCandidates = aggregatedStats.localCandidates;
        _this.remoteCandidates = aggregatedStats.remoteCandidates;
        _this.outboundVideoStats = aggregatedStats.outBoundVideoStats;
        return _this;
    }
    return MessageStats;
}(MessageSend));

/**
 *  Web RTC Offer message wrapper
 */
var MessageWebRTCOffer = /** @class */ (function (_super) {
    __extends(MessageWebRTCOffer, _super);
    /**
     * @param offer - Generated Web RTC Offer
     */
    function MessageWebRTCOffer(offer) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.OFFER;
        if (offer) {
            _this.type = offer.type;
            _this.sdp = offer.sdp;
        }
        return _this;
    }
    return MessageWebRTCOffer;
}(MessageSend));

/**
 * RTC Ice Candidate Wrapper
 */
var MessageIceCandidate = /** @class */ (function () {
    /**
     * @param candidate - RTC Ice Candidate
     */
    function MessageIceCandidate(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageIceCandidate.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Sending => \n" + JSON.stringify(this, undefined, 4));
        return JSON.stringify(this);
    };
    return MessageIceCandidate;
}());



/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebSocketController": () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");



/**
 * The controller for the WebSocket and all associated methods
 */
var WebSocketController = /** @class */ (function () {
    /**
     * @param Address - The Address of the signaling server
     */
    function WebSocketController(Address) {
        this.WS_OPEN_STATE = 1;
        this.address = Address;
    }
    /**
     * Connect to the signaling server
     * @returns - If there is a connection
     */
    WebSocketController.prototype.connect = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog(this.address);
        try {
            this.webSocket = new WebSocket(this.address);
            this.webSocket.onopen = this.handleOnOpen.bind(this);
            this.webSocket.onerror = this.handleOnError.bind(this);
            this.webSocket.onclose = this.handleOnClose.bind(this);
            this.webSocket.onmessage = this.handleOnMessage.bind(this);
            return true;
        }
        catch (error) {
            console.error(error);
            return false;
        }
    };
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    WebSocketController.prototype.handleOnMessage = function (event) {
        var message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("received => \n" + JSON.stringify(JSON.parse(event.data), undefined, 4));
        switch (message.type) {
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_REQUIRED: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("AUTHENTICATION_REQUIRED");
                var authenticationRequired = JSON.parse(event.data);
                var url_string = window.location.href;
                var url = new URL(url_string);
                var authRequest = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageAuthRequest(url.searchParams.get("code"), url.searchParams.get("provider"));
                this.webSocket.send(authRequest.payload());
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_RESPONSE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("AUTHENTICATION_RESPONSE");
                var authenticationResponse = JSON.parse(event.data);
                this.onAuthenticationResponse(authenticationResponse);
                switch (authenticationResponse.outcome) {
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.REDIRECT: {
                        window.location.href = authenticationResponse.redirect;
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.AUTHENTICATED: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("User is authenticated and now requesting an instance");
                        this.webSocket.send(new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageRequestInstance().payload());
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.INVALID_TOKEN: {
                        console.warn("Authentication error : Invalid Token");
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.ERROR: {
                        console.warn("Authentication Error from server Check what you are sending");
                        break;
                    }
                    default: {
                        console.error("The Outcome Message has not been handled : this is really bad");
                        break;
                    }
                }
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.INSTANCE_STATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("INSTANCE_STATE");
                var instanceState = JSON.parse(event.data);
                this.onInstanceStateChange(instanceState);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("CONFIG");
                var config = JSON.parse(event.data);
                this.onConfig(config);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("PLAYER_COUNT");
                var playerCount = JSON.parse(event.data);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Player Count: " + (playerCount.count - 1));
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("ANSWER");
                var answer = JSON.parse(event.data);
                this.onWebRtcAnswer(answer);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("ICE_CANDIDATE");
                var iceCandidate = JSON.parse(event.data);
                this.onIceCandidate(iceCandidate.candidate);
                break;
            }
            default: {
                console.error("Error Message type not Defined");
                break;
            }
        }
    };
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    WebSocketController.prototype.handleOnOpen = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Connected to the signalling server via WebSocket");
    };
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    WebSocketController.prototype.handleOnError = function (event) {
        console.error('WebSocket error: ');
        console.log(event);
    };
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    WebSocketController.prototype.handleOnClose = function (event) {
        this.onWebSocketOncloseOverlayMessage(event);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Disconnected to the signalling server via WebSocket: " + JSON.stringify(event.code) + " - " + event.reason);
    };
    WebSocketController.prototype.sendWebRtcOffer = function (offer) {
        var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer);
        this.webSocket.send(payload.payload());
    };
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    WebSocketController.prototype.sendIceCandidate = function (candidate) {
        console.log("Sending Ice Candidate");
        if (this.webSocket && this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            var IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    };
    /**
     * Closes the Websocket connection
     */
    WebSocketController.prototype.close = function () {
        this.webSocket.close();
    };
    /**
     * Sends the Aggregated Stats to the signaling server
     * @param stats - Stats Payload
     */
    WebSocketController.prototype.sendStats = function (stats) {
        var data = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageStats(stats);
        this.webSocket.send(data.payload());
    };
    /** Event used for Displaying websocket closed messages */
    WebSocketController.prototype.onWebSocketOncloseOverlayMessage = function (event) { };
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    WebSocketController.prototype.onConfig = function (messageConfig) { };
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    WebSocketController.prototype.onIceCandidate = function (iceCandidate) { };
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    WebSocketController.prototype.onWebRtcAnswer = function (messageAnswer) { };
    /**
     * Event fired with the websocket receives a instance state
     * @param instanceState - UE Instance State
     */
    WebSocketController.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Event fired with the websocket receives a Authentication Response
     * @param authResponse - Authentication Response
     */
    WebSocketController.prototype.onAuthenticationResponse = function (authResponse) { };
    return WebSocketController;
}());

/* 524f4d4d */ 


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionOverlay": () => (/* reexport safe */ _Overlay_ActionOverlay__WEBPACK_IMPORTED_MODULE_3__.ActionOverlay),
/* harmony export */   "AfkLogic": () => (/* reexport safe */ _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_5__.AfkLogic),
/* harmony export */   "AfkOverlay": () => (/* reexport safe */ _Overlay_AfkOverlay__WEBPACK_IMPORTED_MODULE_4__.AfkOverlay),
/* harmony export */   "AggregatedStats": () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_8__.AggregatedStats),
/* harmony export */   "Config": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.Config),
/* harmony export */   "ControlSchemeType": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.ControlSchemeType),
/* harmony export */   "DelegateBase": () => (/* reexport safe */ _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__.DelegateBase),
/* harmony export */   "Encoder": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_7__.Encoder),
/* harmony export */   "InitialSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_7__.InitialSettings),
/* harmony export */   "InstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_9__.InstanceState),
/* harmony export */   "LatencyTestResults": () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_6__.LatencyTestResults),
/* harmony export */   "Logger": () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_10__.Logger),
/* harmony export */   "MessageAuthResponse": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_9__.MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_9__.MessageAuthResponseOutcomeType),
/* harmony export */   "MessageInstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_9__.MessageInstanceState),
/* harmony export */   "WebRTC": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_7__.WebRTC),
/* harmony export */   "version": () => (/* binding */ version),
/* harmony export */   "webRtcPlayerController": () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__.webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Delegate/DelegateBase */ "./src/Delegate/DelegateBase.ts");
/* harmony import */ var _Overlay_ActionOverlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Overlay/ActionOverlay */ "./src/Overlay/ActionOverlay.ts");
/* harmony import */ var _Overlay_AfkOverlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Overlay/AfkOverlay */ "./src/Overlay/AfkOverlay.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");













var version = "0.0.3";

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGlDQUFpQyxXQUFXO1dBQzVDO1dBQ0E7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx5Q0FBeUMsd0NBQXdDO1dBQ2pGO1dBQ0E7V0FDQTs7Ozs7V0NQQTs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ044RTtBQUNuQjtBQUVMO0FBS0M7QUFDTDtBQUNSO0FBRTRCO0FBQ1c7QUFDSjtBQUMwRDtBQUM5RjtBQUVxRTtBQUNpSTtBQUd4TyxJQUFNLE9BQU8sR0FBRyxPQUFlLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9BZmsvQWZrTG9naWMudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvQ29uZmlnL0NvbmZpZy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0RhdGFDaGFubmVsL0xhdGVuY3lUZXN0UmVzdWx0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9EZWxlZ2F0ZS9EZWxlZ2F0ZUJhc2UudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvSW5wdXRzL0Zha2VUb3VjaENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvSW5wdXRzL0dhbWVwYWRDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0lucHV0cy9HeXJvQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9JbnB1dHMvSW5wdXRDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0lucHV0cy9LZXlib2FyZENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvSW5wdXRzL01vdXNlQnV0dG9ucy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9JbnB1dHMvTW91c2VDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0lucHV0cy9TcGVjaWFsS2V5Q29kZXMudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvSW5wdXRzL1RvdWNoQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL01pY1BsYXllci9NaWNDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL092ZXJsYXkvQWN0aW9uT3ZlcmxheS50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9PdmVybGF5L0Fma092ZXJsYXkudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlUGFpclN0YXRzLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVTdGF0LnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kQXVkaW9TdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvSW5ib3VuZFZpZGVvU3RhdHMudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kVmlkZW9TdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TdHJlYW1TdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9VZUNvbnRyb2xNZXNzYWdlLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlRGF0YU1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVWVEZXNjcmlwdG9yLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlRGVzY3JpcHRvclVpLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRHYW1lUGFkTWVzc2FnZS50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9VZUlucHV0S2V5Ym9hcmRNZXNzYWdlLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRNb3VzZU1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVWVJbnB1dFRvdWNoTWVzc2FnZS50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9VZU1lc3NhZ2VUeXBlcy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VaS9VaUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXJDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyTW91c2VIb3ZlckV2ZW50cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9WaWRlb1BsYXllci9WaWRlb1BsYXllck1vdXNlTG9ja2VkRXZlbnRzLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1dlYlJ0Y1BsYXllci9XZWJSdGNQbGF5ZXJDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlU2VuZC50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJsaWJzcHNmcm9udGVuZFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJsaWJzcHNmcm9udGVuZFwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsICgpID0+IHtcbnJldHVybiAiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29udHJvbFNjaGVtZVR5cGUgfSBmcm9tIFwiLi4vQ29uZmlnL0NvbmZpZ1wiO1xuZXhwb3J0IGNsYXNzIEFma0xvZ2ljIHtcbiAgICAvLyB0aW1lIG91dCBsb2dpYyBkZXRhaWxzIFxuICAgIGNvbnRyb2xTY2hlbWU6IG51bWJlcjtcbiAgICB3YXJuVGltZW91dCA9IDA7XG4gICAgY2xvc2VUaW1lb3V0ID0gMTA7XG4gICAgYWN0aXZlID0gZmFsc2U7XG4gICAgd2FyblRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiA9IHVuZGVmaW5lZDtcbiAgICBjb3VudERvd24gPSAwO1xuICAgIGNvdW50RG93blRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRJbnRlcnZhbD4gPSB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250cm9sU2NoZW1lOiBudW1iZXIsIGFma1RpbWVvdXQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLndhcm5UaW1lb3V0ID0gYWZrVGltZW91dDtcbiAgICAgICAgdGhpcy5jb250cm9sU2NoZW1lID0gY29udHJvbFNjaGVtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWV0aG9kcyB0aGF0IG9jY3VyIHdoZW4gYW4gYWZrIGV2ZW50IGxpc3RlbmVyIGlzIGNsaWNrZWRcbiAgICAgKi9cbiAgICBvbkFma0NsaWNrKCkge1xuICAgICAgICB0aGlzLmhpZGVDdXJyZW50T3ZlcmxheSgpO1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuY291bnREb3duVGltZXIpO1xuICAgICAgICB0aGlzLnN0YXJ0QWZrV2FybmluZ1RpbWVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnQgdGhlIHdhcm5pbmcgdGltZXIgaWYgYSB0aW1lb3V0IGlzIHNldCBncmVhdGVyIHRoYXQgMCBzZWNvbmRzICAgXG4gICAgICovXG4gICAgc3RhcnRBZmtXYXJuaW5nVGltZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLndhcm5UaW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0QWZrV2FybmluZ1RpbWVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgdGltZXIgd2hpY2ggd2hlbiBlbGFwc2VkIHdpbGwgd2FybiB0aGUgdXNlciB0aGV5IGFyZSBpbmFjdGl2ZS4gIFxuICAgICAqL1xuICAgIHN0b3BBZmtXYXJuaW5nVGltZXIoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHVzZXIgaW50ZXJhY3RzIHRoZW4gcmVzZXQgdGhlIHdhcm5pbmcgdGltZXIuICBcbiAgICAgKi9cbiAgICByZXNldEFma1dhcm5pbmdUaW1lcigpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy53YXJuVGltZXIpO1xuICAgICAgICAgICAgdGhpcy53YXJuVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5hY3RpdmF0ZUFma0V2ZW50KCkgfSwgdGhpcy53YXJuVGltZW91dCAqIDEwMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgQUZLIG92ZXJsYXkgYW5kIGJlZ2luIHRoZSBjb3VudERvd24gICBcbiAgICAgKi9cbiAgICBhY3RpdmF0ZUFma0V2ZW50KCkge1xuICAgICAgICAvLyBQYXVzZSB0aGUgdGltZXIgd2hpbGUgdGhlIHVzZXIgaXMgbG9va2luZyBhdCB0aGUgaW5hY3Rpdml0eSB3YXJuaW5nIG92ZXJsYXlcbiAgICAgICAgdGhpcy5zdG9wQWZrV2FybmluZ1RpbWVyKCk7XG5cbiAgICAgICAgLy8gaW5zdGFudGlhdGUgYSBuZXcgb3ZlcmxheSBcbiAgICAgICAgdGhpcy5zaG93QWZrT3ZlcmxheSgpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBvdXIgY291bnREb3duIHRpbWVyIGFuZCBvdmVybGF5IGNvbnRlbnRzXG4gICAgICAgIHRoaXMuY291bnREb3duID0gdGhpcy5jbG9zZVRpbWVvdXQ7XG4gICAgICAgIHRoaXMudXBkYXRlQWZrQ291bnRkb3duKCk7XG5cbiAgICAgICAgLy8gaWYgd2UgYXJlIGluIGxvY2tlZCBtb3VzZSBleGl0IHBvaW50ZXJsb2NrIFxuICAgICAgICBpZiAodGhpcy5jb250cm9sU2NoZW1lID09IENvbnRyb2xTY2hlbWVUeXBlLkxvY2tlZE1vdXNlKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc2V0IG91ciBjb3VudERvd24gaW50ZXJ2YWwgYWNjb3JkaW5nbHkgXG4gICAgICAgIHRoaXMuY291bnREb3duVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvdW50RG93bi0tO1xuICAgICAgICAgICAgaWYgKHRoaXMuY291bnREb3duID09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgdXNlciBmYWlsZWQgdG8gY2xpY2sgc28gaGlkZSB0aGUgb3ZlcmxheSBhbmQgZGlzY29ubmVjdCB0aGVtLlxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUN1cnJlbnRPdmVybGF5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVdlYlNvY2tldCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoIG9mZiB0aGUgYWZrIGZlYXR1cmUgYXMgc3RyZWFtIGhhcyBjbG9zZWQgXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5UaW1lb3V0ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjb3VudERvd24gbWVzc2FnZS5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFma0NvdW50ZG93bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIHVwZGF0aW5nIHRoZSBhZmsgY291bnRkb3duIG51bWJlciBpbiB0aGUgb3ZlcmxheSBcbiAgICAgKi9cbiAgICB1cGRhdGVBZmtDb3VudGRvd24oKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3Igc2hvd2luZyB0aGUgYWZrIG92ZXJsYXkgXG4gICAgICovXG4gICAgc2hvd0Fma092ZXJsYXkoKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3IgaGlkaW5nIHRoZSBhZmsgb3ZlcmxheSBcbiAgICAgKi9cbiAgICBoaWRlQ3VycmVudE92ZXJsYXkoKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3IgY2xvc2luZyB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gZnJvbSB0aGUgY2xpZW50cyBzaWRlXG4gICAgICovXG4gICAgY2xvc2VXZWJTb2NrZXQoKSB7IH1cbn0iLCJleHBvcnQgY2xhc3MgQ29uZmlnIHtcblxuXHQvLyBQUkVTRVQgT1BUSU9OU1xuXHQvLyBUT0RPOiBleHBvc2UgY29uZmlnIHRocm91Z2ggZGVsZWdhdGUgc28gd2UgZG9uJ3QgbmVlZCBzdGF0aWNcblx0c3RhdGljIF9lbmFibGVWZXJib3NlTG9nZ2luZyA9IGZhbHNlO1xuXG5cdC8vIGVuYWJsZSB0aGUgYXV0b3BsYXkgb2YgdGhlIHZpZGVvXG5cdGVuYWJsZVNwc0F1dG9wbGF5ID0gdHJ1ZTtcblxuXHQvLyBzdGFydCB0aGUgdmlkZW8gbXV0ZWRcblx0c3RhcnRWaWRlb011dGVkID0gZmFsc2U7XG5cblx0Ly8gc2V0IHRoZSBhbW91bnQgb2Ygd2FpdCB0aW1lIGluIHNlY29uZHMgd2hpbGUgdGhlcmUgaXMgaW5hY3Rpdml0eSBmb3IgYWZrIHRvIG9jY3VyIFxuXHRhZmtUaW1lb3V0OiBudW1iZXIgPSAxMjA7XG5cblx0Ly8gVGhlIGNvbnRyb2wgc2NoZW1lIGNvbnRyb2xzIHRoZSBiZWhhdmlvdXIgb2YgdGhlIG1vdXNlIHdoZW4gaXQgaW50ZXJhY3RzIHdpdGggdGhlIFdlYlJUQyBwbGF5ZXIuXG5cdGNvbnRyb2xTY2hlbWUgPSBDb250cm9sU2NoZW1lVHlwZS5Ib3ZlcmluZ01vdXNlO1xuXG5cdC8vIEJyb3dzZXIga2V5cyBhcmUgdGhvc2Ugd2hpY2ggYXJlIHR5cGljYWxseSB1c2VkIGJ5IHRoZSBicm93c2VyIFVJLiBXZSB1c3VhbGx5IHdhbnQgdG8gc3VwcHJlc3MgdGhlc2UgdG8gYWxsb3csIGZvciBleGFtcGxlLCBVRTQgdG8gc2hvdyBzaGFkZXIgY29tcGxleGl0eSB3aXRoIHRoZSBGNSBrZXkgd2l0aG91dCB0aGUgd2ViIHBhZ2UgcmVmcmVzaGluZy5cblx0c3VwcHJlc3NCcm93c2VyS2V5cyA9IGZhbHNlO1xuXG5cdC8vIFVFNCBoYXMgYSBmYWtlIHRvdWNoZXMgb3B0aW9uIHdoaWNoIGZha2VzIGEgc2luZ2xlIGZpbmdlciB0b3VjaCB3aGVuIHRoZSB1c2VyIGRyYWdzIHdpdGggdGhlaXIgbW91c2UuIFxuXHQvLyBXZSBtYXkgcGVyZm9ybSB0aGUgcmV2ZXJzZTsgYSBzaW5nbGUgZmluZ2VyIHRvdWNoIG1heSBiZSBjb252ZXJ0ZWQgaW50byBhIG1vdXNlIGRyYWcgVUU0IHNpZGUuIFRoaXMgYWxsb3dzIGEgbm9uLXRvdWNoIGFwcGxpY2F0aW9uIHRvIGJlIGNvbnRyb2xsZWQgcGFydGlhbGx5IHZpYSBhIHRvdWNoIGRldmljZS5cblx0ZmFrZU1vdXNlV2l0aFRvdWNoZXMgPSB0cnVlO1xuXG5cdC8vY29tcHVsc29yeSBvcHRpb25zIGFuZCBET01zIFxuXHRzaWduYWxsaW5nU2VydmVyQWRkcmVzczogc3RyaW5nO1xuXHRwbGF5ZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcblxuXHQvL3RoaXMgaXMgYSB2aWRlbyBlbGVtZW50IHZhcmlhYmxlIHRvIGJlIGFzc2lnbmVkIHdoZW4gdGhlIHZpZGVvIGVsZW1lbnQgaXMgY3JlYXRlZFxuXHR2aWRlb1BsYXllckVsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQ7XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBzaWduYWxsaW5nU2VydmVyQWRkcmVzcyAtIHRoZSBhZGRyZXNzIG9mIHRoZSBzaWduYWxpbmcgc2VydmVyIFxuXHQgKiBAcGFyYW0gcGxheWVyRWxlbWVudCAtIHRoZSBwbGF5ZXIgZWxlbWVudCBJRCBcblx0ICovXG5cdGNvbnN0cnVjdG9yKHNpZ25hbGxpbmdTZXJ2ZXJBZGRyZXNzOiBzdHJpbmcsIHBsYXllckVsZW1lbnQ6IHN0cmluZykge1xuXHRcdHRoaXMuc2lnbmFsbGluZ1NlcnZlckFkZHJlc3MgPSBzaWduYWxsaW5nU2VydmVyQWRkcmVzcztcblx0XHR0aGlzLnBsYXllckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwbGF5ZXJFbGVtZW50KSBhcyBIVE1MRGl2RWxlbWVudDtcblx0fVxufVxuXG4vKipcbiAqIFRoZSBlbnVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgbW91c2UgYmVpbmcgbG9ja2VkIG9yIGhvdmVyaW5nIFxuICovXG5leHBvcnQgZW51bSBDb250cm9sU2NoZW1lVHlwZSB7XG5cdExvY2tlZE1vdXNlID0gMCxcblx0SG92ZXJpbmdNb3VzZSA9IDEsXG59XG4iLCJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUgYXMgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9EYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZVwiO1xuaW1wb3J0IHsgSUluaXRpYWxTZXR0aW5ncywgfSBmcm9tIFwiLi9JSW5pdGlhbFNldHRpbmdzXCI7XG5pbXBvcnQgeyBJbml0aWFsU2V0dGluZ3MsIH0gZnJvbSBcIi4vSW5pdGlhbFNldHRpbmdzXCI7XG5pbXBvcnQgeyBJTGF0ZW5jeVRlc3RSZXN1bHRzIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0lMYXRlbmN5VGVzdFJlc3VsdHNcIlxuaW1wb3J0IHsgTGF0ZW5jeVRlc3RSZXN1bHRzIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0xhdGVuY3lUZXN0UmVzdWx0c1wiXG5cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBTZW5kaW5nIGFuZCBSZWNlaXZpbmcgb2YgbWVzc2FnZXMgdG8gdGhlIFVFIEluc3RhbmNlIHZpYSB0aGUgRGF0YSBDaGFubmVsXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIge1xuICAgIGRhdGFDaGFubmVsOiBSVENEYXRhQ2hhbm5lbDtcbiAgICBwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb247XG4gICAgZGF0YWNoYW5uZWxPcHRpb25zOiBSVENEYXRhQ2hhbm5lbEluaXQ7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBpc1JlY2VpdmluZ0ZyZWV6ZUZyYW1lID0gZmFsc2U7XG4gICAgbG9nZ2luZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUbyBDcmVhdGUgYW5kIFNldCB1cCBhIERhdGEgQ2hhbm5lbFxuICAgICAqIEBwYXJhbSBwZWVyQ29ubmVjdGlvbiAtIFRoZSBSVEMgUGVlciBDb25uZWN0aW9uXG4gICAgICogQHBhcmFtIGxhYmVsIC0gTGFiZWwgb2YgdGhlIERhdGEgQ2hhbm5lbFxuICAgICAqIEBwYXJhbSBkYXRhY2hhbm5lbE9wdGlvbnMgLSBPcHRpb25hbCBSVEMgRGF0YUNoYW5uZWwgb3B0aW9uc1xuICAgICAqL1xuICAgIGNyZWF0ZURhdGFDaGFubmVsKHBlZXJDb25uZWN0aW9uOiBSVENQZWVyQ29ubmVjdGlvbiwgbGFiZWw6IHN0cmluZywgZGF0YWNoYW5uZWxPcHRpb25zPzogUlRDRGF0YUNoYW5uZWxJbml0KSB7XG4gICAgICAgIHRoaXMubG9nZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uID0gcGVlckNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMgPSBkYXRhY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIGlmIChkYXRhY2hhbm5lbE9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMgPSB7fSBhcyBSVENEYXRhQ2hhbm5lbEluaXRcbiAgICAgICAgICAgIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zLm9yZGVyZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbCA9IHRoaXMucGVlckNvbm5lY3Rpb24uY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5sYWJlbCwgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMpO1xuICAgICAgICAvL1dlIFdhbnQgYW4gQXJyYXkgQnVmZmVyIG5vdCBhIGJsb2JcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9ub3BlbiA9IHRoaXMuaGFuZGxlT25PcGVuLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwub25jbG9zZSA9IHRoaXMuaGFuZGxlT25DbG9zZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9ubWVzc2FnZSA9IHRoaXMuaGFuZGxlT25NZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBEYXRhIENoYW5uZWwgaXMgb3BlbmVkXG4gICAgICovXG4gICAgaGFuZGxlT25PcGVuKCkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiRGF0YSBDaGFubmVsOiBcIiArIHRoaXMubGFiZWwgKyBcIiBpcyBvcGVuZWQuXCIpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBEYXRhIENoYW5uZWwgaXMgY2xvc2VkXG4gICAgICovXG4gICAgaGFuZGxlT25DbG9zZSgpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIkRhdGEgQ2hhbm5lbDogXCIgKyB0aGlzLmxhYmVsICsgXCIgaXMgY2xvc2VkLlwiKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU9uTWVzc2FnZShldmVudDogTWVzc2FnZUV2ZW50KSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSk7XG4gICAgICAgIGlmICh0aGlzLmxvZ2dpbmcpIHsgTG9nZ2VyLnZlcmJvc2VMb2coXCJNZXNzYWdlIGluY29taW5nXCIpIH1cbiAgICAgICAgaWYgKHRoaXMubG9nZ2luZykgeyBMb2dnZXIudmVyYm9zZUxvZyhcIk1lc3NhZ2U6XCIgKyBtZXNzYWdlKSB9XG5cbiAgICAgICAgLy90aGVyZSBpcyBsb2dpYyBmb3Igd2hlbiBhIGZyZWV6ZSBmcmFtZSBpcyBzZW50O1xuICAgICAgICAvLyBpZiAodGhpcy5pc1JlY2VpdmluZ0ZyZWV6ZUZyYW1lKSB7XG4gICAgICAgIC8vICAgICB0aGlzLm9uUmVjZWl2aW5nRnJlZXplRnJhbWUobWVzc2FnZSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgc3dpdGNoIChtZXNzYWdlWzBdKSB7XG4gICAgICAgICAgICBjYXNlIERhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLlF1YWxpdHlDb250cm9sT3duZXJzaGlwOiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5RdWFsaXR5Q29udHJvbE93bmVyc2hpcFwiKVxuICAgICAgICAgICAgICAgIGxldCBRdWFsaXR5T3duZXJzaGlwID0gbmV3IEJvb2xlYW4obWVzc2FnZVsxXSkudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRoaXMub25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChRdWFsaXR5T3duZXJzaGlwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIkRhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLlJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMub25SZXNwb25zZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuQ29tbWFuZDoge1xuICAgICAgICAgICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuQ29tbWFuZFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tbWFuZChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuRnJlZXplRnJhbWU6IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIkRhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkZyZWV6ZUZyYW1lXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0ZyZWV6ZUZyYW1lTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuVW5mcmVlemVGcmFtZToge1xuICAgICAgICAgICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuVW5mcmVlemVGcmFtZVwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVjZWl2aW5nRnJlZXplRnJhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uVW5GcmVlemVGcmFtZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5WaWRlb0VuY29kZXJBdmdRUDoge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvZ2dpbmcpIHsgTG9nZ2VyLnZlcmJvc2VMb2coXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5WaWRlb0VuY29kZXJBdmdRUFwiKTsgfVxuXG4gICAgICAgICAgICAgICAgbGV0IEF2Z1FQID0gTnVtYmVyKG5ldyBUZXh0RGVjb2RlcihcInV0Zi0xNlwiKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSkpO1xuICAgICAgICAgICAgICAgIHRoaXMub25WaWRlb0VuY29kZXJBdmdRUChBdmdRUCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIERhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLmxhdGVuY3lUZXN0OiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5sYXRlbmN5VGVzdFwiKTtcbiAgICAgICAgICAgICAgICBsZXQgbGF0ZW5jeUFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKFwidXRmLTE2XCIpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICBsZXQgaUxhdGVuY3lUZXN0UmVzdWx0czogSUxhdGVuY3lUZXN0UmVzdWx0cyA9IEpTT04ucGFyc2UobGF0ZW5jeUFzU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBsZXQgbGF0ZW5jeVRlc3RSZXN1bHRzOiBMYXRlbmN5VGVzdFJlc3VsdHMgPSBuZXcgTGF0ZW5jeVRlc3RSZXN1bHRzKCk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihsYXRlbmN5VGVzdFJlc3VsdHMsIGlMYXRlbmN5VGVzdFJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5wcm9jZXNzRmllbGRzKClcbiAgICAgICAgICAgICAgICB0aGlzLm9uTGF0ZW5jeVRlc3RSZXN1bHQobGF0ZW5jeVRlc3RSZXN1bHRzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5pdGlhbFNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5Jbml0aWFsU2V0dGluZ3NcIik7XG4gICAgICAgICAgICAgICAgbGV0IHBheWxvYWRBc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi0xNlwiKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgbGV0IGlJbml0aWFsU2V0dGluZ3M6IElJbml0aWFsU2V0dGluZ3MgPSBKU09OLnBhcnNlKHBheWxvYWRBc1N0cmluZyk7XG4gICAgICAgICAgICAgICAgbGV0IGluaXRpYWxTZXR0aW5nczogSW5pdGlhbFNldHRpbmdzID0gbmV3IEluaXRpYWxTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaW5pdGlhbFNldHRpbmdzLCBpSW5pdGlhbFNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBpbml0aWFsU2V0dGluZ3MudWVDb21wYXRpYmxlKClcbiAgICAgICAgICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhwYXlsb2FkQXNTdHJpbmcpO1xuICAgICAgICAgICAgICAgIHRoaXMuT25Jbml0aWFsU2V0dGluZ3MoaW5pdGlhbFNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwidW5rbm93biBtZXNzYWdlIHNlbnQgb24gdGhlIERhdGEgY2hhbm5lbFwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBSZXNwb25zZSBtZXNzYWdlIGlzIHNlbnQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIE1lc3NhZ2UgRGF0YSBVaW50OEFycmF5XG4gICAgICovXG4gICAgb25SZXNwb25zZShtZXNzYWdlOiBVaW50OEFycmF5KSB7XG4gICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUmVzcG9uc2VcIik7XG4gICAgICAgIGxldCByZXNwb25zZXMgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZcIikuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhyZXNwb25zZXMpO1xuICAgICAgICAvL2FkZCB0byByZXNwb25zZSBoYW5kbGVycyBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgQ29tbWFuZCBtZXNzYWdlIGlzIHNlbnQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIE1lc3NhZ2UgRGF0YSBVaW50OEFycmF5XG4gICAgICovXG4gICAgb25Db21tYW5kKG1lc3NhZ2U6IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5Db21tYW5kXCIpO1xuXG4gICAgICAgIGxldCBjb21tYW5kQXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZcIikuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIkRhdGEgQ2hhbm5lbCBDb21tYW5kOiBcIiArIGNvbW1hbmRBc1N0cmluZyk7XG4gICAgICAgIGxldCBjb21tYW5kOiBJbnN0YW5jZUNvbW1hbmQgPSBKU09OLnBhcnNlKGNvbW1hbmRBc1N0cmluZyk7XG4gICAgICAgIGlmIChjb21tYW5kLmNvbW1hbmQgPT09IFwib25TY3JlZW5LZXlib2FyZFwiKSB7XG4gICAgICAgICAgICAvL3Nob3cgb24gc2NyZWVuIEtleWJvYXJkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBEYXRhIG92ZXIgdGhlIERhdGEgY2hhbm5lbCB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZGF0YSAtIE1lc3NhZ2UgRGF0YSBBcnJheSBCdWZmZXJcbiAgICAgKi9cbiAgICBzZW5kRGF0YShkYXRhOiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAvLyByZXNldCB0aGUgYWZrIGluYWN0aXZpdHlcbiAgICAgICAgdGhpcy5yZXNldEFma1dhcm5pbmdUaW1lck9uRGF0YVNlbmQoKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLmRhdGFDaGFubmVsICYmIHRoaXMuZGF0YUNoYW5uZWwucmVhZHlTdGF0ZSA9PSBcIm9wZW5cIikge1xuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5zZW5kKGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk1lc3NhZ2UgRmFpbGVkOiBcIiArIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFVFIEluc3RhbmNlIHVwZGF0ZXMgd2hvIGhhcyBRdWFsaXR5IE93bmVyc2hpcFxuICAgICAqIEBwYXJhbSBoYXNRdWFsaXR5T3duZXJzaGlwIC0gRG9lcyB0aGUgY2xpZW50IGhhdmUgUXVhbGl0eSBPd25lcnNoaXBcbiAgICAgKi9cbiAgICBvblF1YWxpdHlDb250cm9sT3duZXJzaGlwKGhhc1F1YWxpdHlPd25lcnNoaXA6IGJvb2xlYW4pIHsgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgVUUgSW5zdGFuY2Ugc2VuZHMgZnJlZXplIGZyYW1lIGRhdGFcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIEZyZWV6ZSBGcmFtZSBEYXRhXG4gICAgICovXG4gICAgcHJvY2Vzc0ZyZWV6ZUZyYW1lTWVzc2FnZShtZXNzYWdlOiBVaW50OEFycmF5KSB7IH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFVFIEluc3RhbmNlIHNlbmRzIGEgdW4gRnJlZXplIEZyYW1lXG4gICAgICovXG4gICAgb25VbkZyZWV6ZUZyYW1lKCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBVRSBJbnN0YW5jZSBzZW5kcyB0aGUgVmlkZW8gRW5jb2RlciBBdmcgUVBcbiAgICAgKiBAcGFyYW0gQXZnUVAgLSBBdmcgUVBcbiAgICAgKi9cbiAgICBvblZpZGVvRW5jb2RlckF2Z1FQKEF2Z1FQOiBudW1iZXIpIHsgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgVUUgSW5zdGFuY2Ugc2VuZHMgTGF0ZW5jeSB0ZXN0IFJlc3VsdHNcbiAgICAgKiBAcGFyYW0gbGF0ZW5jeVRlc3RSZXN1bHRzIC0gTGF0ZW5jeSBUZXN0IFJlc3VsdHNcbiAgICAgKi9cbiAgICBvbkxhdGVuY3lUZXN0UmVzdWx0KGxhdGVuY3lUZXN0UmVzdWx0czogTGF0ZW5jeVRlc3RSZXN1bHRzKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFVFIEluc3RhbmNlIHNlbmRzIEluaXRpYWwgU2V0dGluZ3NcbiAgICAgKiBAcGFyYW0gSW5pdGlhbFNldHRpbmdzIC0gSW5pdGlhbCBTZXR0aW5nc1xuICAgICAqL1xuICAgIE9uSW5pdGlhbFNldHRpbmdzKEluaXRpYWxTZXR0aW5nczogSW5pdGlhbFNldHRpbmdzKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3IgcmVzZXR0aW5nIHRoZSBBZmsgd2FybmluZyB0aW1lciB3aGVuIGRhdGEgaXMgc2VudCBvdmVyIHRoZSBkYXRhIGNoYW5uZWwgXG4gICAgICovXG4gICAgcmVzZXRBZmtXYXJuaW5nVGltZXJPbkRhdGFTZW5kKCkgeyB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFuY2VDb21tYW5kIHtcbiAgICBjb21tYW5kOiBzdHJpbmc7XG59IiwiLyoqXG4gKiBEYXRhIENoYW5uZWwgUmVjZWl2ZXMgTWVzc2FnZSBUeXBlXG4gKi9cbmV4cG9ydCBlbnVtIERhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlIHtcblx0UXVhbGl0eUNvbnRyb2xPd25lcnNoaXAgPSAwLFxuXHRSZXNwb25zZSA9IDEsXG5cdENvbW1hbmQgPSAyLFxuXHRGcmVlemVGcmFtZSA9IDMsXG5cdFVuZnJlZXplRnJhbWUgPSA0LFxuXHRWaWRlb0VuY29kZXJBdmdRUCA9IDUsXG5cdGxhdGVuY3lUZXN0ID0gNixcblx0SW5pdGlhbFNldHRpbmdzID0gN1xufSIsImltcG9ydCB7IElFbmNvZGVyLCBJSW5pdGlhbFNldHRpbmdzLCBJUGl4ZWxTdHJlYW1pbmcsIElXZWJSVEMgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvSUluaXRpYWxTZXR0aW5nc1wiXG5cbi8qKlxuICogTGF0ZW5jeSBUZXN0IFJlc3VsdHMgRGF0YVxuICovXG5leHBvcnQgY2xhc3MgSW5pdGlhbFNldHRpbmdzIGltcGxlbWVudHMgSUluaXRpYWxTZXR0aW5ncyB7XG5cbiAgICBQaXhlbFN0cmVhbWluZz86IElQaXhlbFN0cmVhbWluZztcbiAgICBFbmNvZGVyPzogSUVuY29kZXI7XG4gICAgV2ViUlRDPzogSVdlYlJUQztcblxuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5QaXhlbFN0cmVhbWluZyA9IG5ldyBQaXhlbFN0cmVhbWluZygpXG4gICAgICAgIHRoaXMuRW5jb2RlciA9IG5ldyBFbmNvZGVyKClcbiAgICAgICAgdGhpcy5XZWJSVEMgPSBuZXcgV2ViUlRDKClcbiAgICB9XG5cbiAgICB1ZUNvbXBhdGlibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLldlYlJUQy5NYXhGUFMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5XZWJSVEMuRlBTID0gdGhpcy5XZWJSVEMuTWF4RlBTXG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG5cbmV4cG9ydCBjbGFzcyBQaXhlbFN0cmVhbWluZyBpbXBsZW1lbnRzIElQaXhlbFN0cmVhbWluZyB7XG4gICAgQWxsb3dQaXhlbFN0cmVhbWluZ0NvbW1hbmRzPzogYm9vbGVhbjtcbiAgICBEaXNhYmxlTGF0ZW5jeVRlc3Q/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgRW5jb2RlciBpbXBsZW1lbnRzIElFbmNvZGVyIHtcbiAgICBUYXJnZXRCaXRyYXRlPzogbnVtYmVyO1xuICAgIE1heEJpdHJhdGU/OiBudW1iZXI7XG4gICAgTWluUVA/OiBudW1iZXI7XG4gICAgTWF4UVA/OiBudW1iZXI7XG4gICAgUmF0ZUNvbnRyb2w/OiBcIkNCUlwiIHwgXCJWQlJcIiB8IFwiQ29uc3RRUFwiO1xuICAgIEZpbGxlckRhdGE/OiBib29sZWFuO1xuICAgIE11bHRpUGFzcz86IFwiRElTQUJMRURcIiB8IFwiUVVBUlRFUlwiIHwgXCJGVUxMXCI7XG5cblxufVxuXG5leHBvcnQgY2xhc3MgV2ViUlRDIGltcGxlbWVudHMgSVdlYlJUQyB7XG4gICAgRGVncmFkYXRpb25QcmVmPzogXCJCQUxBTkNFRFwiIHwgXCJNQUlOVEFJTl9GUkFNRVJBVEVcIiB8IFwiTUFJTlRBSU5fUkVTT0xVVElPTlwiO1xuICAgIE1pbkJpdHJhdGU/OiBudW1iZXI7XG4gICAgTWF4Qml0cmF0ZT86IG51bWJlcjtcbiAgICBMb3dRUD86IG51bWJlcjtcbiAgICBIaWdoUVA/OiBudW1iZXI7XG4gICAgLy8gVUU0LjI3IGNvbXBhdGlibGVcbiAgICBNYXhGUFM/OiBudW1iZXI7XG4gICAgLy8gVUU1IGNvbXBhdGlibGVcbiAgICBGUFM/OiBudW1iZXI7XG5cblxufVxuIiwiaW1wb3J0IHsgSUxhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9JTGF0ZW5jeVRlc3RSZXN1bHRzXCJcbi8qKlxuICogTGF0ZW5jeSBUZXN0IFJlc3VsdHMgRGF0YVxuICovXG5leHBvcnQgY2xhc3MgTGF0ZW5jeVRlc3RSZXN1bHRzIGltcGxlbWVudHMgSUxhdGVuY3lUZXN0UmVzdWx0cyB7XG4gICAgLy9GaWVsZHMgU2V0IGZyb20gdGhlIGxhdGVuY3kgcGF5bG9hZCByZWdhcmRsZXNzIG9mIHZlcnNpb25cbiAgICBSZWNlaXB0VGltZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIFRyYW5zbWlzc2lvblRpbWVNczogbnVtYmVyID0gbnVsbDtcblxuICAgIC8vRmllbGRzIFNldCBmcm9tIHRoZSBsYXRlbmN5IHBheWxvYWQgZnJvbSA0LjI3LjJcbiAgICBQcmVDYXB0dXJlVGltZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIFBvc3RDYXB0dXJlVGltZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIFByZUVuY29kZVRpbWVNczogbnVtYmVyID0gbnVsbDtcbiAgICBQb3N0RW5jb2RlVGltZU1zOiBudW1iZXIgPSBudWxsO1xuXG4gICAgLy9GaWVsZHMgU2V0IGZyb20gdGhlIGxhdGVuY3kgcGF5bG9hZCBmcm9tIDUuMFxuICAgIEVuY29kZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIENhcHR1cmVUb1NlbmRNczogbnVtYmVyID0gbnVsbDtcblxuXG4gICAgLy9GaWVsZHMgU2V0IHdoZW4gcHJvY2Vzc2VkXG4gICAgdGVzdFN0YXJ0VGltZU1zOiBudW1iZXIgPSAwO1xuICAgIGJyb3dzZXJSZWNlaXB0VGltZU1zOiBudW1iZXIgPSAwO1xuICAgIFxuICAgIC8vRmllbGRzIHNldCBmcm9tIGNhbGN1bGF0aW9uc1xuICAgIGxhdGVuY3lFeGNsdWRpbmdEZWNvZGU6IG51bWJlciA9IDA7XG4gICAgdGVzdER1cmF0aW9uOiBudW1iZXI9MDtcbiAgICAvL3VlTGF0ZW5jeTogbnVtYmVyID0gMDtcbiAgICBuZXR3b3JrTGF0ZW5jeTogbnVtYmVyID0gMDtcbiAgICBicm93c2VyU2VuZExhdGVuY3k6IG51bWJlciA9IDA7XG4gICAgZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXM6IG51bWJlciA9IDA7XG4gICAgZW5kVG9FbmRMYXRlbmN5OiBudW1iZXIgPSAwO1xuICAgIC8vdWVQaXhlbFN0cmVhbUxhdGVuY3k6IG51bWJlciA9IDA7XG4gICAgZW5jb2RlTGF0ZW5jeTogbnVtYmVyID0gMDsgICAgXG4gICAgXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgRGVsdGEgVGltZSBNaWxsaXNlY29uZHNcbiAgICAgKiBAcGFyYW0gRGVsdGFUaW1lTXMgLSBEZWx0YSBUaW1lIE1pbGxpc2Vjb25kc1xuICAgICAqL1xuICAgIHNldEZyYW1lRGlzcGxheURlbHRhVGltZShEZWx0YVRpbWVNczogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgPSBNYXRoLnJvdW5kKERlbHRhVGltZU1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBwcm9jZXNzRmllbGRzKCl7XG4gICAgICAgIGlmICh0aGlzLkVuY29kZU1zID09IG51bGwgJiYgKHRoaXMuUHJlRW5jb2RlVGltZU1zICE9IG51bGwgfHwgdGhpcy5Qb3N0RW5jb2RlVGltZU1zICE9IG51bGwpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNldHRpbmcgRW5jb2RlIE1zXCIpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLlBvc3RFbmNvZGVUaW1lTXMpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLlByZUVuY29kZVRpbWVNcylcbiAgICAgICAgICAgIHRoaXMuRW5jb2RlTXMgPSB0aGlzLlBvc3RFbmNvZGVUaW1lTXMgLSB0aGlzLlByZUVuY29kZVRpbWVNc1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuQ2FwdHVyZVRvU2VuZE1zID09IG51bGwgJiYgKHRoaXMuUHJlQ2FwdHVyZVRpbWVNcyAhPSBudWxsIHx8IHRoaXMuUG9zdENhcHR1cmVUaW1lTXMgIT0gbnVsbCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2V0dGluZyBDYXB0dXJlVG9TZW5kTXMgTXNcIilcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuUG9zdENhcHR1cmVUaW1lTXMpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLlByZUNhcHR1cmVUaW1lTXMpXG4gICAgICAgICAgICB0aGlzLkNhcHR1cmVUb1NlbmRNcyA9IHRoaXMuUG9zdENhcHR1cmVUaW1lTXMgLSB0aGlzLlByZUNhcHR1cmVUaW1lTXNcbiAgICAgICAgfVxuXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBJRGVsZWdhdGUgfSBmcm9tIFwiLi9JRGVsZWdhdGVcIjtcbmltcG9ydCB7IEluaXRpYWxTZXR0aW5ncyB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9Jbml0aWFsU2V0dGluZ3NcIjtcbmltcG9ydCB7IExhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHNcIlxuaW1wb3J0IHsgQWN0aW9uT3ZlcmxheSB9IGZyb20gXCIuLi9PdmVybGF5L0FjdGlvbk92ZXJsYXlcIjtcbmltcG9ydCB7IEFma092ZXJsYXkgfSBmcm9tIFwiLi4vT3ZlcmxheS9BZmtPdmVybGF5XCI7XG5pbXBvcnQgeyBJT3ZlcmxheSB9IGZyb20gXCIuLi9PdmVybGF5L0lPdmVybGF5XCI7XG5pbXBvcnQgeyBJVGV4dE92ZXJsYXkgfSBmcm9tIFwiLi4vT3ZlcmxheS9JVGV4dE92ZXJsYXlcIjtcbmltcG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gXCIuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQWdncmVnYXRlZFN0YXRzXCI7XG5pbXBvcnQgeyBJV2ViUnRjUGxheWVyQ29udHJvbGxlciB9IGZyb20gXCIuLi9XZWJSdGNQbGF5ZXIvSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE1lc3NhZ2VJbnN0YW5jZVN0YXRlLCBNZXNzYWdlQXV0aFJlc3BvbnNlIH0gZnJvbSAnLi4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSc7XG5cbi8qKlxuICogUHJvdmlkZXMgY29tbW9uIGJhc2UgZnVuY3Rpb25hbGl0eSBmb3IgZGVsZWdhdGVzIHRoYXQgaW1wbGVtZW50IHRoZSBJRGVsZWdhdGUgaW50ZXJmYWNlXG4qL1xuZXhwb3J0IGNsYXNzIERlbGVnYXRlQmFzZSBpbXBsZW1lbnRzIElEZWxlZ2F0ZSB7XG5cdHB1YmxpYyBpV2ViUnRjQ29udHJvbGxlcjogSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XG5cdHB1YmxpYyBjb25maWc6IENvbmZpZztcblxuXHQvLyBzZXQgdGhlIG92ZXJsYXkgcGxhY2Vob2xkZXJzIFxuXHRjdXJyZW50T3ZlcmxheTogSU92ZXJsYXk7XG5cdGNvbm5lY3RPdmVybGF5OiBBY3Rpb25PdmVybGF5O1xuXHRwbGF5T3ZlcmxheTogQWN0aW9uT3ZlcmxheTtcblx0YWZrT3ZlcmxheTogQWZrT3ZlcmxheTtcblx0aW5mb092ZXJsYXk6IElUZXh0T3ZlcmxheTtcblx0ZXJyb3JPdmVybGF5OiBJVGV4dE92ZXJsYXk7XG5cblx0c2hvdWxkU2hvd1BsYXlPdmVybGF5ID0gdHJ1ZTtcblxuXHQvKipcblx0ICogQHBhcmFtIGNvbmZpZyAtIEEgbmV3bHkgaW5zdGFudGlhdGVkIGNvbmZpZyBvYmplY3QgIFxuXHQgKiByZXR1cm5zIHRoZSBiYXNlIGRlbGVnYXRlIG9iamVjdCB3aXRoIHRoZSBjb25maWcgaW5zaWRlIGl0IGFsb25nIHdpdGggYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIE92ZXJsYXkgY29udHJvbGxlciBjbGFzcyBcblx0ICovXG5cdGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnKSB7XG5cdFx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cdH1cblxuXHQvKipcblx0ICogSGlkZXMgdGhlIGN1cnJlbnQgb3ZlcmxheSBcblx0ICovXG5cdGhpZGVDdXJyZW50T3ZlcmxheSgpIHtcblx0XHRpZiAodGhpcy5jdXJyZW50T3ZlcmxheSAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLmN1cnJlbnRPdmVybGF5LmhpZGUoKTtcblx0XHRcdHRoaXMuY3VycmVudE92ZXJsYXkgPSBudWxsO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogU2hvd3MgdGhlIGNvbm5lY3Qgb3ZlcmxheSBcblx0ICovXG5cdHNob3dDb25uZWN0T3ZlcmxheSgpIHtcblx0XHR0aGlzLmhpZGVDdXJyZW50T3ZlcmxheSgpO1xuXHRcdHRoaXMuY29ubmVjdE92ZXJsYXkuc2hvdygpO1xuXHRcdHRoaXMuY3VycmVudE92ZXJsYXkgPSB0aGlzLmNvbm5lY3RPdmVybGF5O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTaG93cyB0aGUgcGxheSBvdmVybGF5IFxuXHQgKi9cblx0c2hvd1BsYXlPdmVybGF5KCkge1xuXHRcdHRoaXMuaGlkZUN1cnJlbnRPdmVybGF5KCk7XG5cdFx0dGhpcy5wbGF5T3ZlcmxheS5zaG93KCk7XG5cdFx0dGhpcy5jdXJyZW50T3ZlcmxheSA9IHRoaXMucGxheU92ZXJsYXk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNob3dzIHRoZSB0ZXh0IG92ZXJsYXkgXG5cdCAqL1xuXHRzaG93VGV4dE92ZXJsYXkodGV4dDogc3RyaW5nKSB7XG5cdFx0dGhpcy5oaWRlQ3VycmVudE92ZXJsYXkoKTtcblx0XHR0aGlzLmluZm9PdmVybGF5LnVwZGF0ZSh0ZXh0KTtcblx0XHR0aGlzLmluZm9PdmVybGF5LnNob3coKTtcblx0XHR0aGlzLmN1cnJlbnRPdmVybGF5ID0gdGhpcy5pbmZvT3ZlcmxheTtcblx0fTtcblxuXHQvKipcblx0ICogU2hvd3MgdGhlIGVycm9yIG92ZXJsYXkgXG5cdCAqL1xuXHRzaG93RXJyb3JPdmVybGF5KHRleHQ6IHN0cmluZykge1xuXHRcdHRoaXMuaGlkZUN1cnJlbnRPdmVybGF5KCk7XG5cdFx0dGhpcy5lcnJvck92ZXJsYXkudXBkYXRlKHRleHQpO1xuXHRcdHRoaXMuZXJyb3JPdmVybGF5LnNob3coKTtcblx0XHR0aGlzLmN1cnJlbnRPdmVybGF5ID0gdGhpcy5lcnJvck92ZXJsYXk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEFjdGl2YXRlcyB0aGUgY29ubmVjdCBvdmVybGF5cyBhY3Rpb24gXG5cdCAqL1xuXHRvbkNvbm5lY3RBY3Rpb24oKSB7XG5cdFx0dGhpcy5jb25uZWN0T3ZlcmxheS5hY3RpdmF0ZSgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBY3RpdmF0ZXMgdGhlIHBsYXkgb3ZlcmxheXMgYWN0aW9uIFxuXHQgKi9cblx0b25QbGF5QWN0aW9uKCkge1xuXHRcdHRoaXMucGxheU92ZXJsYXkuYWN0aXZhdGUoKTtcblx0fTtcblxuXHQvKipcblx0ICogU2hvd3MgdGhlIGFmayBvdmVybGF5IFxuXHQgKiBAcGFyYW0gY291bnREb3duIHRoZSBjb3VudGRvd24gbnVtYmVyIGZvciB0aGUgYWZrIGNvdW50ZG93biBcblx0ICovXG5cdHNob3dBZmtPdmVybGF5KGNvdW50RG93bjogbnVtYmVyKSB7XG5cdFx0dGhpcy5oaWRlQ3VycmVudE92ZXJsYXkoKTtcblx0XHR0aGlzLnVwZGF0ZUFma092ZXJsYXkoY291bnREb3duKTtcblx0XHR0aGlzLmFma092ZXJsYXkuc2hvdygpO1xuXHRcdHRoaXMuY3VycmVudE92ZXJsYXkgPSB0aGlzLmFma092ZXJsYXk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSB0aGUgYWZrIG92ZXJsYXlzIGNvdW50ZG93biBudW1iZXIgXG5cdCAqIEBwYXJhbSBjb3VudERvd24gdGhlIG5ldyBjb3VudGRvd24gbnVtYmVyIFxuXHQgKi9cblx0dXBkYXRlQWZrT3ZlcmxheShjb3VudERvd246IG51bWJlcikge1xuXHRcdHRoaXMuYWZrT3ZlcmxheS51cGRhdGUoY291bnREb3duKTtcblx0fTtcblxuXHQvKipcblx0ICogQWN0aXZhdGVzIHRoZSBhZmsgb3ZlcmxheXMgYWN0aW9uIFxuXHQgKi9cblx0b25BZmtBY3Rpb24oKSB7XG5cdFx0dGhpcy5hZmtPdmVybGF5LmFjdGl2YXRlKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEluc3RhbnRpYXRlIHRoZSBXZWJSVENQbGF5ZXJDb250cm9sbGVyIGludGVyZmFjZSB0byBwcm92aWRlIFdlYlJUQ1BsYXllckNvbnRyb2xsZXIgZnVuY3Rpb25hbGl0eSB3aXRoaW4gdGhpcyBjbGFzcyBhbmQgc2V0IHVwIGFueXRoaW5nIHRoYXQgcmVxdWlyZXMgaXQgXG5cdCAqIEBwYXJhbSBpV2ViUnRjUGxheWVyQ29udHJvbGxlciBcblx0ICovXG5cdHNldElXZWJSdGNQbGF5ZXJDb250cm9sbGVyKGlXZWJSdGNQbGF5ZXJDb250cm9sbGVyOiBJV2ViUnRjUGxheWVyQ29udHJvbGxlcikge1xuXHRcdHRoaXMuaVdlYlJ0Y0NvbnRyb2xsZXIgPSBpV2ViUnRjUGxheWVyQ29udHJvbGxlcjtcblxuXHRcdHRoaXMuaVdlYlJ0Y0NvbnRyb2xsZXIucmVzaXplUGxheWVyU3R5bGUoKTtcblxuXHRcdC8vIHVwZGF0ZSB0aGUgZnJlZXplIGZyYW1lIG9iamVjdCBpbiB0aGUgd2ViUnRjIHBsYXllciBjb250cm9sbGVyIHdpdGggdGhlIG5ldyBvdmVybGF5ICBcblx0XHQvL3RoaXMuaVdlYlJ0Y0NvbnRyb2xsZXIuZnJlZXplRnJhbWUuc2V0RnJlZXplRnJhbWVPdmVybGF5KC8vdGhpcy5mcmVlemVGcmFtZU92ZXJsYXkpO1xuXG5cdFx0Ly8gc2V0IHVwIHRoZSBjb25uZWN0IG92ZXJsYXlzIGFjdGlvblxuXHRcdHRoaXMuc2V0V2ViUnRjQ29ubmVjdE92ZXJsYXkoKTtcblxuXHRcdC8vIHNldCB1cCB0aGUgYWZrIG92ZXJsYXlzIGFjdGlvbiBcblx0XHR0aGlzLmFma092ZXJsYXkub25BY3Rpb24oKCkgPT4gdGhpcy5pV2ViUnRjQ29udHJvbGxlci5vbkFma0NsaWNrKCkpO1xuXG5cdFx0Ly8gc2V0IHVwIHRoZSBwbGF5IG92ZXJsYXlzIGFjdGlvbiBcblx0XHR0aGlzLnBsYXlPdmVybGF5Lm9uQWN0aW9uKCgpID0+IHRoaXMuaVdlYlJ0Y0NvbnRyb2xsZXIucGxheVN0cmVhbSgpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGUgdGhlIHdlYlJ0YyBjb25uZWN0IG92ZXJsYXkgYmFzZWQgb24gdGhlIGF1dG9wbGF5IG9wdGlvbi4gVGhpcyBzaG91bGQgYmUgZG9uZSBhZnRlciBpV2ViUnRjQ29udHJvbGxlciBoYXMgYmVlbiBpbnN0YW50aWF0ZWRcblx0ICovXG5cdHNldFdlYlJ0Y0Nvbm5lY3RPdmVybGF5KCkge1xuXHRcdC8vIHNldCB1cCBpZiB0aGUgYXV0byBwbGF5IHdpbGwgYmUgdXNlZCBvciByZWd1bGFyIGNsaWNrIHRvIHN0YXJ0XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5lbmFibGVTcHNBdXRvcGxheSkge1xuXHRcdFx0Ly8gQnVpbGQgdGhlIHdlYlJ0YyBjb25uZWN0IG92ZXJsYXkgRXZlbnQgTGlzdGVuZXIgYW5kIHNob3cgdGhlIGNvbm5lY3Qgb3ZlcmxheVxuXHRcdFx0dGhpcy5jb25uZWN0T3ZlcmxheS5vbkFjdGlvbigoKSA9PiB0aGlzLmlXZWJSdGNDb250cm9sbGVyLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXZlcigpKTtcblx0XHRcdHRoaXMuc2hvd0Nvbm5lY3RPdmVybGF5KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGlmIGF1dG9wbGF5aW5nIHNob3cgYW4gaW5mbyBvdmVybGF5IHdoaWxlIHdoaWxlIHdhaXRpbmcgZm9yIHRoZSBjb25uZWN0aW9uIHRvIGJlZ2luIFxuXHRcdFx0dGhpcy5zaG93VGV4dE92ZXJsYXkoXCJBdXRvIENvbm5lY3RpbmcgTm93XCIpO1xuXHRcdFx0dGhpcy5pV2ViUnRjQ29udHJvbGxlci5jb25uZWN0VG9TaWduYWxsaW5nU2V2ZXIoKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gYW4gaW5zdGFuY2Ugc3RhdGUgY2hhbmdlIG9jY3Vyc1xuXHQgKiBAcGFyYW0gaW5zdGFuY2VTdGF0ZSAtIHRoZSBtZXNzYWdlIGluc3RhbmNlIHN0YXRlIFxuXHQgKi9cblx0b25JbnN0YW5jZVN0YXRlQ2hhbmdlKGluc3RhbmNlU3RhdGU6IE1lc3NhZ2VJbnN0YW5jZVN0YXRlKSB7IH1cblxuXHQvKipcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGFuIGF1dGggcmVzcG9uc2UgXG5cdCAqIEBwYXJhbSBhdXRoUmVzcG9uc2UgLSB0aGUgYXV0aCByZXNwb25zZSBtZXNzYWdlIHR5cGVcblx0ICovXG5cdG9uQXV0aGVudGljYXRpb25SZXNwb25zZShhdXRoUmVzcG9uc2U6IE1lc3NhZ2VBdXRoUmVzcG9uc2UpIHsgfVxuXG5cdC8qKlxuXHQgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgYSB3ZWJSVEMgYW5zd2VyIFxuXHQgKi9cblx0b25XZWJSdGNBbnN3ZXIoKSB7XG5cdFx0dGhpcy5zaG93VGV4dE92ZXJsYXkoXCJSVEMgQW5zd2VyXCIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIHBsYXkgb3ZlcmxheSBmb3IgcGxheWluZyB0aGUgdmlkZW8gc3RyZWFtXG5cdCAqL1xuXHRvblNob3dQbGF5T3ZlcmxheSgpIHtcblx0XHQvLyBzZXQgc2hvdWxkU2hvd1BsYXlPdmVybGF5IHRvIGZhbHNlIGluIHRoaXMgY2xhc3MgYW5kIGFsc28gaW4gdGhlIGZyZWV6ZVxuXHRcdHRoaXMuc2hvdWxkU2hvd1BsYXlPdmVybGF5ID0gZmFsc2U7XG5cdFx0Ly90aGlzLmlXZWJSdGNDb250cm9sbGVyLmZyZWV6ZUZyYW1lLnNldFNob3VsZFNob3dQbGF5T3ZlcmxheSh0aGlzLnNob3VsZFNob3dQbGF5T3ZlcmxheSk7XG5cdH1cblxuXHQvKipcblx0ICogRXZlbnQgZmlyZWQgd2hlbiB0aGUgdmlkZW8gaXMgZGlzY29ubmVjdGVkXG5cdCAqL1xuXHRvbkRpc2Nvbm5lY3QoZXZlbnQ6IENsb3NlRXZlbnQpIHtcblx0XHR0aGlzLnNob3dFcnJvck92ZXJsYXkoYERpc2Nvbm5lY3RlZDogJHtldmVudC5jb2RlfSAtICAke2V2ZW50LnJlYXNvbn1gKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIHdoZW4gV2ViIFJ0YyBpcyBjb25uZWN0aW5nIFxuXHQgKi9cblx0b25XZWJSdGNDb25uZWN0aW5nKCkge1xuXHRcdHRoaXMuc2hvd1RleHRPdmVybGF5KFwiU3RhcnRpbmcgY29ubmVjdGlvbiB0byBzZXJ2ZXIsIHBsZWFzZSB3YWl0XCIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGhhcyBjb25uZWN0ZWQgXG5cdCAqL1xuXHRvbldlYlJ0Y0Nvbm5lY3RlZCgpIHtcblx0XHR0aGlzLnNob3dUZXh0T3ZlcmxheShcIldlYlJUQyBjb25uZWN0ZWQsIHdhaXRpbmcgZm9yIHZpZGVvXCIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGZhaWxzIHRvIGNvbm5lY3QgXG5cdCAqL1xuXHRvbldlYlJ0Y0ZhaWxlZCgpIHtcblx0XHR0aGlzLnNob3dFcnJvck92ZXJsYXkoXCJVbmFibGUgdG8gc2V0dXAgdmlkZW9cIik7XG5cdH1cblxuXHQvKipcblx0ICogU2V0IHVwIG1ldGhvZHMgYW5kIGZ1bmN0aW9ucyB0byBydW4gd2hlbiB0aGUgdmlkZW8gaXMgaW5pdGlhbGlzZWQgXG5cdCAqL1xuXHRvblZpZGVvSW5pdGlhbGlzZWQoKSB7IH1cblxuXHQvKipcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGxhdGVuY3kgdGVzdCByZXN1bHRzIFxuXHQgKiBAcGFyYW0gbGF0ZW5jeSAtIGxhdGVuY3kgdGVzdCByZXN1bHRzIG9iamVjdFxuXHQgKi9cblx0b25MYXRlbmN5VGVzdFJlc3VsdChsYXRlbmN5OiBMYXRlbmN5VGVzdFJlc3VsdHMpIHsgfVxuXG5cdC8qKlxuXHQgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgdmlkZW8gc3RhdGlzdGljcyBcblx0ICogQHBhcmFtIHZpZGVvU3RhdHMgLSB2aWRlbyBzdGF0aXN0aWNzIGFzIGEgYWdncmVnYXRlIHN0YXRzIG9iamVjdCBcblx0ICovXG5cdG9uVmlkZW9TdGF0cyh2aWRlb1N0YXRzOiBBZ2dyZWdhdGVkU3RhdHMpIHsgfVxuXG5cdC8qKlxuXHQgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiBjYWxjdWxhdGluZyB0aGUgYXZlcmFnZSB2aWRlbyBlbmNvZGVyIHFwIFxuXHQgKiBAcGFyYW0gUVAgLSB0aGUgcXVhbGl0eSBudW1iZXIgb2YgdGhlIHN0cmVhbVxuXHQgKi9cblx0b25WaWRlb0VuY29kZXJBdmdRUChRUDogbnVtYmVyKSB7IH1cblxuXHQvKipcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGFuZCBoYW5kbGluZyBpbml0aWFsIHNldHRpbmdzIGZvciB0aGUgVUUgYXBwIFxuXHQgKiBAcGFyYW0gc2V0dGluZ3MgLSBpbml0aWFsIFVFIGFwcCBzZXR0aW5ncyAgXG5cdCAqL1xuXHRvbkluaXRpYWxTZXR0aW5ncyhzZXR0aW5nczogSW5pdGlhbFNldHRpbmdzKSB7IH1cblxuXHQvKipcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gc2V0dGluZyBxdWFsaXR5IGNvbnRyb2wgb3duZXJzaGlwIG9mIGEgc3RyZWFtIFxuXHQgKiBAcGFyYW0gaGFzUXVhbGl0eU93bmVyc2hpcCAtIGRvZXMgdGhpcyB1c2VyIGhhdmUgcXVhbGl0eSBvd25lcnNoaXAgb2YgdGhlIHN0cmVhbSB0cnVlIC8gZmFsc2Vcblx0ICovXG5cdG9uUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAoaGFzUXVhbGl0eU93bmVyc2hpcDogYm9vbGVhbikgeyB9XG59XG4iLCJpbXBvcnQgeyBVZUlucHV0TW91c2VNZXNzYWdlIH0gZnJvbSBcIi4uL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRNb3VzZU1lc3NhZ2VcIjtcbmltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tIFwiLi9JVG91Y2hDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBNb3VzZUJ1dHRvbiB9IGZyb20gXCIuL01vdXNlQnV0dG9uc1wiO1xuXG5cbi8qKlxuICogQWxsb3dzIGZvciB0aGUgdXNhZ2Ugb2YgZmFrZSB0b3VjaCBldmVudHMgYW5kIGltcGxlbWVudHMgSVRvdWNoQ29udHJvbGxlclxuICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIFRoZSBjb250cm9sbGVyIGZvciB0aGUgRGF0YSBjaGFubmVsIFxuICogQHBhcmFtIHZpZGVvUGxheWVyRWxlbWVudCAtIFRoZSB2aWRlbyBwbGF5ZXIgRE9NIGVsZW1lbnQgXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWtlVG91Y2hDb250cm9sbGVyIGltcGxlbWVudHMgSVRvdWNoQ29udHJvbGxlciB7XG4gICAgZmluZ2VyOiBGaW5nZXI7XG4gICAgdWVJbnB1dE1vdXNlTWVzc2FnZTogVWVJbnB1dE1vdXNlTWVzc2FnZTtcbiAgICB2aWRlb1BsYXllckVsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlciwgdmlkZW9QbGF5ZXJFbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50KSB7XG4gICAgICAgIHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZSA9IG5ldyBVZUlucHV0TW91c2VNZXNzYWdlKGRhdGFDaGFubmVsQ29udHJvbGxlcik7XG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXJFbGVtZW50ID0gdmlkZW9QbGF5ZXJFbGVtZW50O1xuICAgICAgICBkb2N1bWVudC5vbnRvdWNoc3RhcnQgPSB0aGlzLm9uVG91Y2hTdGFydC5iaW5kKHRoaXMpO1xuICAgICAgICBkb2N1bWVudC5vbnRvdWNoZW5kID0gdGhpcy5vblRvdWNoRW5kLmJpbmQodGhpcyk7XG4gICAgICAgIGRvY3VtZW50Lm9udG91Y2htb3ZlID0gdGhpcy5vblRvdWNoTW92ZS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBiZWdpbnMgXG4gICAgICogQHBhcmFtIHRvdWNoIC0gdGhlIGFjdGl2YXRpbmcgdG91Y2ggZXZlbnQgXG4gICAgICovXG4gICAgb25Ub3VjaFN0YXJ0KHRvdWNoOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmZpbmdlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgZmlyc3RfdG91Y2ggPSB0b3VjaC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgICAgICAgIHRoaXMuZmluZ2VyID0ge1xuICAgICAgICAgICAgICAgIElEOiBmaXJzdF90b3VjaC5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIFg6IGZpcnN0X3RvdWNoLmNsaWVudFggLSB0aGlzLnZpZGVvUGxheWVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LFxuICAgICAgICAgICAgICAgIFk6IGZpcnN0X3RvdWNoLmNsaWVudFkgLSB0aGlzLnZpZGVvUGxheWVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3BcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudCh0b3VjaC50eXBlLCBmaXJzdF90b3VjaClcblxuICAgICAgICAgICAgdGhpcy52aWRlb1BsYXllckVsZW1lbnQub25tb3VzZWVudGVyKG1vdXNlRXZlbnQpO1xuICAgICAgICAgICAgdGhpcy51ZUlucHV0TW91c2VNZXNzYWdlLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24ubWFpbkJ1dHRvbiwgdGhpcy5maW5nZXIuWCwgdGhpcy5maW5nZXIuWSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgZW5kcyBcbiAgICAgKiBAcGFyYW0gdG91Y2hFdmVudCAtIHRoZSBhY3RpdmF0aW5nIHRvdWNoIGV2ZW50IFxuICAgICAqL1xuICAgIG9uVG91Y2hFbmQodG91Y2hFdmVudDogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0b3VjaCA9IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG5cbiAgICAgICAgICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLmZpbmdlci5JRCkge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdG91Y2guY2xpZW50WCAtIHRoaXMudmlkZW9QbGF5ZXJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSB0b3VjaC5jbGllbnRZIC0gdGhpcy52aWRlb1BsYXllckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZS5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5tYWluQnV0dG9uLCB4LCB5KTtcblxuICAgICAgICAgICAgICAgIGxldCBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQodG91Y2hFdmVudC50eXBlLCB0b3VjaClcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyRWxlbWVudC5vbm1vdXNlbGVhdmUobW91c2VFdmVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5maW5nZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbiBhIE1vdmUgdG91Y2ggZXZlbnQgXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgYWN0aXZhdGluZyB0b3VjaCBldmVudCBcbiAgICAgKi9cbiAgICBvblRvdWNoTW92ZSh0b3VjaEV2ZW50OiBUb3VjaEV2ZW50KTogdm9pZCB7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3VjaEV2ZW50LnRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0b3VjaCA9IHRvdWNoRXZlbnQudG91Y2hlc1tpXTtcbiAgICAgICAgICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLmZpbmdlci5JRCkge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdG91Y2guY2xpZW50WCAtIHRoaXMudmlkZW9QbGF5ZXJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSB0b3VjaC5jbGllbnRZIC0gdGhpcy52aWRlb1BsYXllckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuXG4gICAgICAgICAgICAgICAgeCAqPSA3NVxuICAgICAgICAgICAgICAgIC8vIGxldCBfeCA9IHggLSB0aGlzLmZpbmdlci5YXG5cbiAgICAgICAgICAgICAgICAvLyBpZiAoeCA8IHRoaXMuZmluZ2VyLlgpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJz4+bGVmdCcpXG5cbiAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKHggPiB0aGlzLmZpbmdlci5YKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCc+PnJpZ2h0JylcbiAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQEAnLCB0aGlzLmZpbmdlci5YLCB4LCB4IC0gdGhpcy5maW5nZXIuWClcblxuICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZS5zZW5kTW91c2VNb3ZlKHgsIHksIHggLSB0aGlzLmZpbmdlci5YLCB5IC0gdGhpcy5maW5nZXIuWSk7XG4gICAgICAgICAgICAgICAgdGhpcy5maW5nZXIuWCA9IHg7XG4gICAgICAgICAgICAgICAgdGhpcy5maW5nZXIuWSA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgZmluZ2VyIHBvc2l0aW9uIG1hcHBpbmcgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmluZ2VyIHtcbiAgICBJRDogbnVtYmVyO1xuICAgIFg6IG51bWJlcjtcbiAgICBZOiBudW1iZXI7XG59IiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVWVJbnB1dEdhbWVQYWRNZXNzYWdlIH0gZnJvbSBcIi4uL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRHYW1lUGFkTWVzc2FnZVwiXG5cbi8qKlxuICogVGhlIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBnYW1lcGFkcyBhbmQgY29udHJvbGxlcnMgXG4gKi9cbmV4cG9ydCBjbGFzcyBHYW1lUGFkQ29udHJvbGxlciB7XG4gICAgdWVJbnB1dEdhbWVQYWRNZXNzYWdlOiBVZUlucHV0R2FtZVBhZE1lc3NhZ2U7XG4gICAgY29udHJvbGxlcnM6IENvbnRyb2xsZXJbXVxuICAgIGxvZ2dpbmc6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZGF0YUNoYW5uZWxDb250cm9sbGVyIC0gdGhlIGRhdGEgY2hhbmVsIGNvbnRyb2xsZXIgIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlID0gbmV3IFVlSW5wdXRHYW1lUGFkTWVzc2FnZShkYXRhQ2hhbm5lbENvbnRyb2xsZXIpXG4gICAgICAgIHRoaXMubG9nZ2luZyA9IHRydWU7XG5cbiAgICAgICAgaWYgKFwiR2FtZXBhZEV2ZW50XCIgaW4gd2luZG93KSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImdhbWVwYWRjb25uZWN0ZWRcIiwgdGhpcy5nYW1lUGFkQ29ubmVjdEhhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImdhbWVwYWRkaXNjb25uZWN0ZWRcIiwgdGhpcy5nYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXCJXZWJLaXRHYW1lcGFkRXZlbnRcIiBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0Z2FtZXBhZGNvbm5lY3RlZFwiLCB0aGlzLmdhbWVQYWRDb25uZWN0SGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0Z2FtZXBhZGRpc2Nvbm5lY3RlZFwiLCB0aGlzLmdhbWVQYWREaXNjb25uZWN0SGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gW107XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyB0aGUgZ2FtZXBhZCBoYW5kbGVyIFxuICAgICAqIEBwYXJhbSBnYW1lUGFkRXZlbnQgLSB0aGUgYWN0aXZhdGluZyBnYW1lcGFkIGV2ZW50IFxuICAgICAqL1xuICAgIGdhbWVQYWRDb25uZWN0SGFuZGxlcihnYW1lUGFkRXZlbnQ6IEdhbWVwYWRFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5sb2dnaW5nKSB7IGNvbnNvbGUubG9nKFwiR2FtZXBhZCBjb25uZWN0IGhhbmRsZXJcIik7IH1cbiAgICAgICAgbGV0IGdhbWVwYWQgPSBnYW1lUGFkRXZlbnQuZ2FtZXBhZDtcblxuICAgICAgICBsZXQgdGVtcDogQ29udHJvbGxlciA9IHtcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogZ2FtZXBhZCxcbiAgICAgICAgICAgIHByZXZTdGF0ZTogZ2FtZXBhZFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMucHVzaCh0ZW1wKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWQuaW5kZXhdLmN1cnJlbnRTdGF0ZSA9IGdhbWVwYWQ7XG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNbZ2FtZXBhZC5pbmRleF0ucHJldlN0YXRlID0gZ2FtZXBhZDtcbiAgICAgICAgaWYgKHRoaXMubG9nZ2luZykgeyBjb25zb2xlLmxvZyhcImdhbWVwYWQ6IFwiICsgZ2FtZXBhZC5pZCArIFwiIGNvbm5lY3RlZFwiKTsgfVxuXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVTdGF0dXMuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIGdhbWVwYWQgaGFuZGxlciBcbiAgICAgKiBAcGFyYW0gZ2FtZVBhZEV2ZW50IC0gdGhlIGFjdGl2YXRpbmcgZ2FtZXBhZCBldmVudCBcbiAgICAgKi9cbiAgICBnYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIoZ2FtZVBhZEV2ZW50OiBHYW1lcGFkRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMubG9nZ2luZykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJHYW1lcGFkIGRpc2Nvbm5lY3QgaGFuZGxlclwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ2FtZXBhZDogXCIgKyBnYW1lUGFkRXZlbnQuZ2FtZXBhZC5pZCArIFwiIGRpc2Nvbm5lY3RlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5jb250cm9sbGVyc1tnYW1lUGFkRXZlbnQuZ2FtZXBhZC5pbmRleF07XG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSB0aGlzLmNvbnRyb2xsZXJzLmZpbHRlcihjb250cm9sbGVyID0+IGNvbnRyb2xsZXIgIT09IHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NhbiBmb3IgY29ubmVjdGVkIGdhbWVwYWRzIFxuICAgICAqL1xuICAgIHNjYW5HYW1lUGFkcygpIHtcbiAgICAgICAgdmFyIGdhbWVwYWRzID0gKChuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMpID8gbmF2aWdhdG9yLmdldEdhbWVwYWRzKCkgOiBbXSk7Ly8gIDogKG5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkcyA/IG5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkcygpIDogW10pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdhbWVwYWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZ2FtZXBhZHNbaV0gJiYgKGdhbWVwYWRzW2ldLmluZGV4IGluIHRoaXMuY29udHJvbGxlcnMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1tnYW1lcGFkc1tpXS5pbmRleF0uY3VycmVudFN0YXRlID0gZ2FtZXBhZHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzdGF0dXMgb2YgdGhlIGdhbWVwYWQgYW5kIHNlbmRzIHRoZSBpbnB1dHMgIFxuICAgICAqL1xuICAgIHVwZGF0ZVN0YXR1cygpIHtcbiAgICAgICAgdGhpcy5zY2FuR2FtZVBhZHMoKTtcbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIG11bHRpcGxlIGNvbnRyb2xsZXJzIGluIHRoZSBjYXNlIHRoZSBtdWx0aXBsZSBnYW1lcGFkcyBhcmUgY29ubmVjdGVkXG5cbiAgICAgICAgZm9yIChsZXQgY29udHJvbGxlciBvZiB0aGlzLmNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZSA9IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlci5jdXJyZW50U3RhdGUuYnV0dG9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudEJ1dHRvbiA9IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlLmJ1dHRvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2aW91c0J1dHRvbiA9IGNvbnRyb2xsZXIucHJldlN0YXRlLmJ1dHRvbnNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQnV0dG9uIDYgaXMgYWN0dWFsbHkgdGhlIGxlZnQgdHJpZ2dlciwgc2VuZCBpdCB0byBVRSBhcyBhbiBhbmFsb2cgYXhpc1xuICAgICAgICAgICAgICAgICAgICAvLyBCdXR0b24gNyBpcyBhY3R1YWxseSB0aGUgcmlnaHQgdHJpZ2dlciwgc2VuZCBpdCB0byBVRSBhcyBhbiBhbmFsb2cgYXhpc1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVzdCBhcmUgbm9ybWFsIGJ1dHRvbnMuIFRyZWF0IGFzIHN1Y2hcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRCdXR0b24ucHJlc3NlZCAmJiAhcHJldmlvdXNCdXR0b24ucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV3IHByZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0R2FtZVBhZE1lc3NhZ2Uuc2VuZENvbnRyb2xsZXJBeGlzTW92ZShjdXJyZW50U3RhdGUuaW5kZXgsIDUsIGN1cnJlbnRCdXR0b24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgNiwgY3VycmVudEJ1dHRvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQnV0dG9uUHJlc3NlZChjdXJyZW50U3RhdGUuaW5kZXgsIGksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY3VycmVudEJ1dHRvbi5wcmVzc2VkICYmIHByZXZpb3VzQnV0dG9uLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbGVhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgNSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT0gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQXhpc01vdmUoY3VycmVudFN0YXRlLmluZGV4LCA2LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0R2FtZVBhZE1lc3NhZ2Uuc2VuZENvbnRyb2xsZXJCdXR0b25SZWxlYXNlZChjdXJyZW50U3RhdGUuaW5kZXgsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRCdXR0b24ucHJlc3NlZCAmJiBwcmV2aW91c0J1dHRvbi5wcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBlYXQgcHJlc3MgLyBob2xkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0R2FtZVBhZE1lc3NhZ2Uuc2VuZENvbnRyb2xsZXJBeGlzTW92ZShjdXJyZW50U3RhdGUuaW5kZXgsIDUsIGN1cnJlbnRCdXR0b24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgNiwgY3VycmVudEJ1dHRvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQnV0dG9uUHJlc3NlZChjdXJyZW50U3RhdGUuaW5kZXgsIGksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIExhc3QgY2FzZSBpcyBidXR0b24gaXNuJ3QgY3VycmVudGx5IHByZXNzZWQgYW5kIHdhc24ndCBwcmVzc2VkIGJlZm9yZS4gVGhpcyBkb2Vzbid0IG5lZWQgYW4gZWxzZSBibG9ja1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFN0YXRlLmF4ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHggPSBwYXJzZUZsb2F0KGN1cnJlbnRTdGF0ZS5heGVzW2ldLnRvRml4ZWQoNCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL3czYy5naXRodWIuaW8vZ2FtZXBhZC8jcmVtYXBwaW5nIEdhbWVwYWQgYnJvd3NlciBzaWRlIHN0YW5kYXJkIG1hcHBpbmcgaGFzIHBvc2l0aXZlIGRvd24sIG5lZ2F0aXZlIHVwLiBUaGlzIGlzIGRvd25yaWdodCBkaXNndXN0aW5nLiBTbyB3ZSBmaXggaXQuXG4gICAgICAgICAgICAgICAgICAgIGxldCB5ID0gLXBhcnNlRmxvYXQoY3VycmVudFN0YXRlLmF4ZXNbaSArIDFdLnRvRml4ZWQoNCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGVmdCBzdGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXhpcyAxID0gbGVmdCBob3Jpem9udGFsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgMSwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBheGlzIDIgPSBsZWZ0IHZlcnRpY2FsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgMiwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmlnaHQgc3RpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF4aXMgMyA9IHJpZ2h0IGhvcml6b250YWxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQXhpc01vdmUoY3VycmVudFN0YXRlLmluZGV4LCAzLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF4aXMgNCA9IHJpZ2h0IHZlcnRpY2FsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgNCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1tjdXJyZW50U3RhdGUuaW5kZXhdLnByZXZTdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJPaCBkZWFyIHRoZSBnYW1lcGFkIHBvbGwgbG9vcCBoYXMgdGhyb3duIGFuIGVycm9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVTdGF0dXMuYmluZCh0aGlzKSk7XG5cbiAgICB9XG59XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgY29udHJvbGxlcnMgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJvbGxlciB7XG4gICAgY3VycmVudFN0YXRlOiBHYW1lcGFkO1xuICAgIHByZXZTdGF0ZTogR2FtZXBhZDtcbn0iLCJpbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyXCJcblxuLyoqXG4gKiBUaGUgQ2xhc3MgdGhhdCBoYW5kbGVzIGd5cm8gaW5wdXQgXG4gKi9cbmV4cG9ydCBjbGFzcyBHeXJvQ29udHJvbGxlciB7XG4gXG4gICAgZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXI7XG4gXG4gICAgY29uc3RydWN0b3IoZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIgPSBkYXRhQ2hhbm5lbENvbnRyb2xsZXI7XG4gICAgfVxuXG4gICAgXG5cbn1cbiIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IEZha2VUb3VjaENvbnRyb2xsZXIgfSBmcm9tIFwiLi9GYWtlVG91Y2hDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBLZXlib2FyZENvbnRyb2xsZXIgfSBmcm9tIFwiLi9LZXlib2FyZENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE1vdXNlQ29udHJvbGxlciB9IGZyb20gXCIuL01vdXNlQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgSVRvdWNoQ29udHJvbGxlciB9IGZyb20gXCIuL0lUb3VjaENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IFRvdWNoQ29udHJvbGxlciB9IGZyb20gXCIuL1RvdWNoQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgR2FtZVBhZENvbnRyb2xsZXIgfSBmcm9tIFwiLi9HYW1lcGFkQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgQ29udHJvbFNjaGVtZVR5cGUgfSBmcm9tIFwiLi4vQ29uZmlnL0NvbmZpZ1wiO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXJDb250cm9sbGVyIH0gZnJvbSBcIi4uL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXJNb3VzZUxvY2tlZEV2ZW50cyB9IGZyb20gXCIuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllck1vdXNlTG9ja2VkRXZlbnRzXCI7XG5pbXBvcnQgeyBWaWRlb1BsYXllck1vdXNlSG92ZXJFdmVudHMgfSBmcm9tIFwiLi4vVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXJNb3VzZUhvdmVyRXZlbnRzXCI7XG5pbXBvcnQgeyBHeXJvQ29udHJvbGxlciB9IGZyb20gXCIuL0d5cm9Db250cm9sbGVyXCI7XG5cbi8qKlxuICogQ2xhc3MgZm9yIGhhbmRsaW5nIGlucHV0cyBmb3IgbW91c2UgYW5kIGtleWJvYXJkICAgXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dENvbnRyb2xsZXIge1xuXG4gICAgZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXI7XG4gICAga2V5Ym9hcmRDb250cm9sbGVyOiBLZXlib2FyZENvbnRyb2xsZXI7XG4gICAgbW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXI7XG4gICAgdG91Y2hDb250cm9sbGVyOiBJVG91Y2hDb250cm9sbGVyXG4gICAgZmFrZVRvdWNoQ29udHJvbGxlcjogRmFrZVRvdWNoQ29udHJvbGxlcjtcbiAgICBnYW1lUGFkQ29udHJvbGxlcjogR2FtZVBhZENvbnRyb2xsZXI7XG4gICAgZ3lyb0NvbnRyb2xsZXI6IEd5cm9Db250cm9sbGVyO1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIHRoZSBkYXRhIGNoYW5uZWwgY29udHJvbGxlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyID0gZGF0YUNoYW5uZWxDb250cm9sbGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlZ2lzdGVycyBicm93c2VyIGtleSBldmVudHMgIFxuICAgICAqIEBwYXJhbSBzdXBwcmVzc0Jyb3dzZXJLZXlzIC0gb3B0aW9uIHRvIHN1cHByZXNzIGJyb3dzZXIga2V5cyBcbiAgICAgKi9cbiAgICByZWdpc3RlcktleUJvYXJkKHN1cHByZXNzQnJvd3NlcktleXM6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlJlZ2lzdGVyIEtleWJvYXJkIEV2ZW50c1wiKTtcbiAgICAgICAgdGhpcy5rZXlib2FyZENvbnRyb2xsZXIgPSBuZXcgS2V5Ym9hcmRDb250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLCBzdXBwcmVzc0Jyb3dzZXJLZXlzKTtcbiAgICAgICAgdGhpcy5rZXlib2FyZENvbnRyb2xsZXIucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlZ2lzdGVyIG1vdXNlIGV2ZW50cyBiYXNlZCBvbiBhIGNvbnRyb2wgdHlwZSBcbiAgICAgKiBAcGFyYW0gY29udHJvbFNjaGVtZSAtIGlmIHRoZSBtb3VzZSBpcyBlaXRoZXIgaG92ZXJpbmcgb3IgbG9ja2VkIFxuICAgICAqIEBwYXJhbSB2aWRlb1BsYXllckNvbnRyb2xsZXIgLSB0aGUgdmlkZW8gcGxheWVyIGNvbnRyb2xsZXIgXG4gICAgICovXG4gICAgcmVnaXN0ZXJNb3VzZShjb250cm9sU2NoZW1lOiBDb250cm9sU2NoZW1lVHlwZSwgdmlkZW9QbGF5ZXJDb250cm9sbGVyOiBWaWRlb1BsYXllckNvbnRyb2xsZXIpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlJlZ2lzdGVyIE1vdXNlIEV2ZW50c1wiKTtcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIgPSBuZXcgTW91c2VDb250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcblxuICAgICAgICBzd2l0Y2ggKGNvbnRyb2xTY2hlbWUpIHtcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFNjaGVtZVR5cGUuTG9ja2VkTW91c2U6XG4gICAgICAgICAgICAgICAgdmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvSW5wdXRCaW5kaW5ncyA9IG5ldyBWaWRlb1BsYXllck1vdXNlTG9ja2VkRXZlbnRzKHZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0VsZW1lbnQsIHRoaXMubW91c2VDb250cm9sbGVyKTtcblxuICAgICAgICAgICAgICAgIHZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0VsZW1lbnQub25jbGljayA9IHZpZGVvUGxheWVyQ29udHJvbGxlci5oYW5kbGVDbGljay5iaW5kKHZpZGVvUGxheWVyQ29udHJvbGxlcik7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybG9ja2NoYW5nZScsIHZpZGVvUGxheWVyQ29udHJvbGxlci5oYW5kbGVMb2NrU3RhdGVDaGFuZ2UuYmluZCh2aWRlb1BsYXllckNvbnRyb2xsZXIpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96cG9pbnRlcmxvY2tjaGFuZ2UnLCB2aWRlb1BsYXllckNvbnRyb2xsZXIuaGFuZGxlTG9ja1N0YXRlQ2hhbmdlLmJpbmQodmlkZW9QbGF5ZXJDb250cm9sbGVyKSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFNjaGVtZVR5cGUuSG92ZXJpbmdNb3VzZTpcbiAgICAgICAgICAgICAgICB2aWRlb1BsYXllckNvbnRyb2xsZXIudmlkZW9JbnB1dEJpbmRpbmdzID0gbmV3IFZpZGVvUGxheWVyTW91c2VIb3ZlckV2ZW50cyh0aGlzLm1vdXNlQ29udHJvbGxlcik7XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIG9uY2xpY2sgdG8gbnVsbCBpZiB0aGUgaW5wdXQgYmluZGluZ3Mgd2VyZSBwcmV2aW91c2x5IHNldCB0byBwb2ludGVybG9ja1xuICAgICAgICAgICAgICAgIHZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0VsZW1lbnQub25jbGljayA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5vbm1vdXNlbW92ZSA9IHZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0lucHV0QmluZGluZ3MuaGFuZGxlTW91c2VNb3ZlLmJpbmQodmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvSW5wdXRCaW5kaW5ncyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQub253aGVlbCA9IHZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0lucHV0QmluZGluZ3MuaGFuZGxlTW91c2VXaGVlbC5iaW5kKHZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0lucHV0QmluZGluZ3MpO1xuXG4gICAgICAgICAgICAgICAgdmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvRWxlbWVudC5vbm1vdXNlZG93biA9IHZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0lucHV0QmluZGluZ3MuaGFuZGxlTW91c2VEb3duLmJpbmQodmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvSW5wdXRCaW5kaW5ncyk7XG4gICAgICAgICAgICAgICAgdmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvRWxlbWVudC5vbm1vdXNldXAgPSB2aWRlb1BsYXllckNvbnRyb2xsZXIudmlkZW9JbnB1dEJpbmRpbmdzLmhhbmRsZU1vdXNlVXAuYmluZCh2aWRlb1BsYXllckNvbnRyb2xsZXIudmlkZW9JbnB1dEJpbmRpbmdzKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInVua25vd24gQ29udHJvbCBTY2hlbWUgVHlwZSBEZWZhdWx0aW5nIHRvIExvY2tlZCBNb3VzZSBFdmVudHNcIik7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlZ2lzdGVyIHRvdWNoIGV2ZW50cyBcbiAgICAgKiBAcGFyYW0gZmFrZU1vdXNlVG91Y2ggLSB0aGUgZmFrZWQgbW91c2UgdG91Y2ggZXZlbnQgXG4gICAgICogQHBhcmFtIHBsYXllckVsZW1lbnQgLSB0aGUgcGxheWVyIGVsZW1lbnRzIERPTSBcbiAgICAgKi9cbiAgICByZWdpc3RlclRvdWNoKGZha2VNb3VzZVRvdWNoOiBib29sZWFuLCBwbGF5ZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlZ2lzdGVyaW5nIFRvdWNoXCIpO1xuICAgICAgICBpZiAoZmFrZU1vdXNlVG91Y2gpIHtcbiAgICAgICAgICAgIHRoaXMudG91Y2hDb250cm9sbGVyID0gbmV3IEZha2VUb3VjaENvbnRyb2xsZXIodGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIsICg8SFRNTFZpZGVvRWxlbWVudD5wbGF5ZXJFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIilbMF0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG91Y2hDb250cm9sbGVyID0gbmV3IFRvdWNoQ29udHJvbGxlcih0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlciwgcGxheWVyRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZWdpc3RlcnMgYSBnYW1lcGFkIFxuICAgICAqL1xuICAgIHJlZ2lzdGVyR2FtZVBhZCgpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlJlZ2lzdGVyIEdhbWUgUGFkXCIpO1xuICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyID0gbmV3IEdhbWVQYWRDb250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcblxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVnaXN0ZXJzIGEgZ3lybyBkZXZpY2UgXG4gICAgICovXG4gICAgcmVnaXN0ZXJHeXJvKCkge1xuICAgICAgICB0aGlzLmd5cm9Db250cm9sbGVyID0gbmV3IEd5cm9Db250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcblxuICAgIH1cblxufSIsImltcG9ydCB7IFNwZWNpYWxLZXlDb2RlcyB9IGZyb20gXCIuL1NwZWNpYWxLZXlDb2Rlc1wiO1xuaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVWVJbnB1dEtleWJvYXJkTWVzc2FnZSB9IGZyb20gXCIuLi9VZUluc3RhbmNlTWVzc2FnZS9VZUlucHV0S2V5Ym9hcmRNZXNzYWdlXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xuXG4vKipcbiAqIEhhbmRsZXMgdGhlIEtleWJvYXJkIElucHV0cyBmb3IgdGhlIGRvY3VtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBLZXlib2FyZENvbnRyb2xsZXIge1xuICAgIHVlSW5wdXRLZXlCb2FyZE1lc3NhZ2U6IFVlSW5wdXRLZXlib2FyZE1lc3NhZ2U7XG4gICAgc3VwcHJlc3NCcm93c2VyS2V5czogYm9vbGVhbjtcbiAgICBsb2dnaW5nOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIERhdGEgQ2hhbm5lbCBDb250cm9sbGVyXG4gICAgICogQHBhcmFtIHN1cHByZXNzQnJvd3NlcktleXMgLSBTdXBwcmVzcyBCcm93c2VyIEtleXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlciwgc3VwcHJlc3NCcm93c2VyS2V5czogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnVlSW5wdXRLZXlCb2FyZE1lc3NhZ2UgPSBuZXcgVWVJbnB1dEtleWJvYXJkTWVzc2FnZShkYXRhQ2hhbm5lbENvbnRyb2xsZXIpO1xuICAgICAgICB0aGlzLnN1cHByZXNzQnJvd3NlcktleXMgPSBzdXBwcmVzc0Jyb3dzZXJLZXlzO1xuICAgICAgICB0aGlzLmxvZ2dpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgZG9jdW1lbnQga2V5Ym9hcmQgZXZlbnRzIHdpdGggdGhlIGNvbnRyb2xsZXJcbiAgICAgKi9cbiAgICByZWdpc3RlcktleUJvYXJkRXZlbnRzKCkge1xuICAgICAgICBkb2N1bWVudC5vbmtleWRvd24gPSB0aGlzLmhhbmRsZU9uS2V5RG93bi5iaW5kKHRoaXMpO1xuICAgICAgICBkb2N1bWVudC5vbmtleXVwID0gdGhpcy5oYW5kbGVPbktleVVwLmJpbmQodGhpcyk7XG5cbiAgICAgICAgLy9UaGlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYXMgYXQgSnVuIDEzIDIwMjFcbiAgICAgICAgZG9jdW1lbnQub25rZXlwcmVzcyA9IHRoaXMuaGFuZGxlT25LZXlQcmVzcy5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgV2hlbiBhIGtleSBpcyBkb3duXG4gICAgICogQHBhcmFtIGtleWJvYXJkRXZlbnQgLSBLZXlib2FyZCBldmVudCBcbiAgICAgKi9cbiAgICBoYW5kbGVPbktleURvd24oa2V5Ym9hcmRFdmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5sb2dnaW5nKSB7IExvZ2dlci52ZXJib3NlTG9nKFwiaGFuZGxlT25LZXlEb3duXCIpOyB9XG4gICAgICAgIHRoaXMudWVJbnB1dEtleUJvYXJkTWVzc2FnZS5zZW5kS2V5RG93bih0aGlzLmdldEtleWNvZGUoa2V5Ym9hcmRFdmVudCksIGtleWJvYXJkRXZlbnQucmVwZWF0KTtcbiAgICAgICAgLyogdGhpcyBuZWVkcyB0byBiZSB0ZXN0ZWQgYnV0IGl0IGlzIGJlbGlldmVkIHRoYXQgdGhpcyBpcyBub3QgbmVlZGVkKi9cbiAgICAgICAgLy8gYmFja1NwYWNlIGlzIG5vdCBjb25zaWRlcmVkIGEga2V5cHJlc3MgaW4gSmF2YVNjcmlwdCBidXQgd2UgbmVlZCBpdFxuICAgICAgICAvLyB0byBiZSBzbyBjaGFyYWN0ZXJzIG1heSBiZSBkZWxldGVkIGluIGEgVUU0IHRleHQgZW50cnkgZmllbGQuXG4gICAgICAgIGlmIChrZXlib2FyZEV2ZW50LmtleUNvZGUgPT09IFNwZWNpYWxLZXlDb2Rlcy5iYWNrU3BhY2UpIHtcbiAgICAgICAgICAgIC8vbGV0IHRlbXA6IEtleWJvYXJkRXZlbnQgPSB7Y2hhckNvZGU6IFNwZWNpYWxLZXlDb2Rlcy5iYWNrU3BhY2V9O1xuICAgICAgICAgICAgLy9kb2N1bWVudC5vbmtleXByZXNzKHsgY2hhckNvZGU6IFNwZWNpYWxLZXlDb2Rlcy5iYWNrU3BhY2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdXBwcmVzc0Jyb3dzZXJLZXlzICYmIHRoaXMuaXNLZXlDb2RlQnJvd3NlcktleShrZXlib2FyZEV2ZW50LmtleUNvZGUpKSB7XG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoYW5kbGVzIHdoZW4gYSBrZXkgaXMgdXBcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmRFdmVudCAtIEtleWJvYXJkIGV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlT25LZXlVcChrZXlib2FyZEV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmxvZ2dpbmcpIHsgTG9nZ2VyLnZlcmJvc2VMb2coXCJoYW5kbGVPbktleVVwXCIpOyB9XG4gICAgICAgIHRoaXMudWVJbnB1dEtleUJvYXJkTWVzc2FnZS5zZW5kS2V5VXAodGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpKTtcblxuICAgICAgICBpZiAodGhpcy5zdXBwcmVzc0Jyb3dzZXJLZXlzICYmIHRoaXMuaXNLZXlDb2RlQnJvd3NlcktleShrZXlib2FyZEV2ZW50LmtleUNvZGUpKSB7XG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBrZXkgaXMgcHJlc3NcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmQgLSBLZXlib2FyZCBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU9uS2V5UHJlc3Moa2V5Ym9hcmQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMubG9nZ2luZykgeyBMb2dnZXIudmVyYm9zZUxvZyhcImhhbmRsZU9ua2V5cHJlc3NcIikgfVxuICAgICAgICB0aGlzLnVlSW5wdXRLZXlCb2FyZE1lc3NhZ2Uuc2VuZEtleVByZXNzKGtleWJvYXJkLmNoYXJDb2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBLZXljb2RlIG9mIHRoZSBLZXkgcHJlc3NlZFxuICAgICAqIEBwYXJhbSBrZXlib2FyZEV2ZW50IC0gS2V5IGJvYXJkIEV2ZW50XG4gICAgICogQHJldHVybnMgdGhlIGtleSBjb2RlIG9mIHRoZSBLZXlcbiAgICAgKi9cbiAgICBnZXRLZXljb2RlKGtleWJvYXJkRXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgLy9OZWVkIHRvIG1vdmUgdGhpcyB0byBhIG5ld2VyIHZlcnNpb24gdXNpbmcga2V5Ym9hcmQgZXZlbnQgbG9jYXRpb24uIGFzIGtleWJvYXJkRXZlbnQua2V5Y29kZSBpcyBkZXByZWNhdGVkXG5cbiAgICAgICAgaWYgKGtleWJvYXJkRXZlbnQua2V5Q29kZSA9PT0gU3BlY2lhbEtleUNvZGVzLnNoaWZ0ICYmIGtleWJvYXJkRXZlbnQuY29kZSA9PT0gJ1NoaWZ0UmlnaHQnKSByZXR1cm4gU3BlY2lhbEtleUNvZGVzLnJpZ2h0U2hpZnQ7XG4gICAgICAgIGVsc2UgaWYgKGtleWJvYXJkRXZlbnQua2V5Q29kZSA9PT0gU3BlY2lhbEtleUNvZGVzLmNvbnRyb2wgJiYga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQ29udHJvbFJpZ2h0JykgcmV0dXJuIFNwZWNpYWxLZXlDb2Rlcy5yaWdodENvbnRyb2w7XG4gICAgICAgIGVsc2UgaWYgKGtleWJvYXJkRXZlbnQua2V5Q29kZSA9PT0gU3BlY2lhbEtleUNvZGVzLmFsdCAmJiBrZXlib2FyZEV2ZW50LmNvZGUgPT09ICdBbHRSaWdodCcpIHJldHVybiBTcGVjaWFsS2V5Q29kZXMucmlnaHRBbHQ7XG4gICAgICAgIGVsc2UgcmV0dXJuIGtleWJvYXJkRXZlbnQua2V5Q29kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCcm93c2VyIGtleXMgZG8gbm90IGhhdmUgYSBjaGFyQ29kZSBzbyB3ZSBvbmx5IG5lZWQgdG8gdGVzdCBrZXlDb2RlLlxuICAgICAqL1xuICAgIGlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZTogbnVtYmVyKSB7XG4gICAgICAgIC8vIEZ1bmN0aW9uIGtleXMgb3IgdGFiIGtleS5cbiAgICAgICAgcmV0dXJuIGtleUNvZGUgPj0gMTEyICYmIGtleUNvZGUgPD0gMTIzIHx8IGtleUNvZGUgPT09IDk7XG4gICAgfVxufVxuLyogNTQ1NzUyNGY0ZDRkICovIiwiLyoqXG4gKiBNb3VzZSBCdXR0b24gRGF0YVxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Nb3VzZUV2ZW50L2J1dHRvbn1cbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlQnV0dG9uIHtcblx0c3RhdGljIG1haW5CdXR0b24gPSAwO1x0XHRcdC8vIExlZnQgYnV0dG9uLlxuXHRzdGF0aWMgYXV4aWxpYXJ5QnV0dG9uID0gMTtcdFx0Ly8gV2hlZWwgYnV0dG9uLlxuXHRzdGF0aWMgc2Vjb25kYXJ5QnV0dG9uID0gMjtcdFx0Ly8gUmlnaHQgYnV0dG9uLlxuXHRzdGF0aWMgZm91cnRoQnV0dG9uID0gMztcdFx0Ly8gQnJvd3NlciBCYWNrIGJ1dHRvbi5cblx0c3RhdGljIGZpZnRoQnV0dG9uID0gNDtcdFx0XHQvLyBCcm93c2VyIEZvcndhcmQgYnV0dG9uLlxufVxuXG4vKipcbiAqIE1vdXNlIEJ1dHRvbiBNYXNrIERhdGFcbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTW91c2VFdmVudC9idXR0b25zfVxuICovXG5leHBvcnQgY2xhc3MgTW91c2VCdXR0b25zTWFzayB7XG5cdHN0YXRpYyBwcmltYXJ5QnV0dG9uID0gMTtcdFx0Ly8gTGVmdCBidXR0b24uXG5cdHN0YXRpYyBzZWNvbmRhcnlCdXR0b24gPSAyO1x0XHQvLyBSaWdodCBidXR0b24uXG5cdHN0YXRpYyBhdXhpbGlhcnlCdXR0b24gPSA0O1x0XHQvLyBXaGVlbCBidXR0b24uXG5cdHN0YXRpYyBmb3VydGhCdXR0b24gPSA4O1x0XHQvLyBCcm93c2VyIEJhY2sgYnV0dG9uLlxuXHRzdGF0aWMgZmlmdGhCdXR0b24gPSAxNjtcdFx0Ly8gQnJvd3NlciBGb3J3YXJkIGJ1dHRvbi5cbn0iLCJpbXBvcnQgeyBVZUlucHV0TW91c2VNZXNzYWdlIH0gZnJvbSBcIi4uL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRNb3VzZU1lc3NhZ2VcIjtcbmltcG9ydCB7IE1vdXNlQnV0dG9uc01hc2ssIE1vdXNlQnV0dG9uIH0gZnJvbSBcIi4vTW91c2VCdXR0b25zXCI7XG5pbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBOb3JtYWxpc2VBbmRRdWFudGlzZVNpZ25lZCwgVW5xdWFudGlzZWRBbmREZW5vcm1hbGlzZVVuc2lnbmVkLCBOb3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkIH0gZnJvbSBcIi4vQ29vcmRpbmF0ZURhdGFcIlxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBNb3VzZSBJbnB1dHMgZm9yIHRoZSBkb2N1bWVudFxuICovXG5leHBvcnQgY2xhc3MgTW91c2VDb250cm9sbGVyIHtcblxuXHRyZWFkb25seSB1bnNpZ25lZE91dE9mUmFuZ2U6IG51bWJlciA9IDY1NTM1O1xuXHRyZWFkb25seSBzaWduZWRPdXRPZlJhbmdlOiBudW1iZXIgPSAzMjc2NztcblxuXHR1ZUlucHV0TW91c2VNZXNzYWdlOiBVZUlucHV0TW91c2VNZXNzYWdlO1xuXG5cdHByaW50SW5wdXRzOiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBcblx0ICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIERhdGEgQ2hhbm5lbCBDb250cm9sbGVyXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcikge1xuXHRcdHRoaXMucHJpbnRJbnB1dHMgPSBmYWxzZTtcblx0XHR0aGlzLnVlSW5wdXRNb3VzZU1lc3NhZ2UgPSBuZXcgVWVJbnB1dE1vdXNlTWVzc2FnZShkYXRhQ2hhbm5lbENvbnRyb2xsZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZSB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHJlbGVhc2VkXG5cdCAqIEBwYXJhbSBidXR0b25zIC0gTW91c2UgQnV0dG9uXG5cdCAqIEBwYXJhbSBYIC0gTW91c2UgcG9pbnRlciBYIGNvb3JkaW5hdGVcblx0ICogQHBhcmFtIFkgLSBNb3VzZSBwb2ludGVyIFkgY29vcmRpbmF0ZVxuXHQgKi9cblx0cmVsZWFzZU1vdXNlQnV0dG9ucyhidXR0b25zOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XG5cdFx0aWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLnByaW1hcnlCdXR0b24pIHtcblx0XHRcdHRoaXMuc2VuZE1vdXNlVXAoTW91c2VCdXR0b24ubWFpbkJ1dHRvbiwgWCwgWSk7XG5cdFx0fVxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5zZWNvbmRhcnlCdXR0b24pIHtcblx0XHRcdHRoaXMuc2VuZE1vdXNlVXAoTW91c2VCdXR0b24uc2Vjb25kYXJ5QnV0dG9uLCBYLCBZKTtcblx0XHR9XG5cdFx0aWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmF1eGlsaWFyeUJ1dHRvbikge1xuXHRcdFx0dGhpcy5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5hdXhpbGlhcnlCdXR0b24sIFgsIFkpO1xuXHRcdH1cblx0XHRpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suZm91cnRoQnV0dG9uKSB7XG5cdFx0XHR0aGlzLnNlbmRNb3VzZVVwKE1vdXNlQnV0dG9uLmZvdXJ0aEJ1dHRvbiwgWCwgWSk7XG5cdFx0fVxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5maWZ0aEJ1dHRvbikge1xuXHRcdFx0dGhpcy5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5maWZ0aEJ1dHRvbiwgWCwgWSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZSB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWRcblx0ICogQHBhcmFtIGJ1dHRvbnMgLSBNb3VzZSBCdXR0b25cblx0ICogQHBhcmFtIFggLSBNb3VzZSBwb2ludGVyIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0gWSAtIE1vdXNlIHBvaW50ZXIgWSBjb29yZGluYXRlXG5cdCAqL1xuXHRwcmVzc01vdXNlQnV0dG9ucyhidXR0b25zOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XG5cdFx0aWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLnByaW1hcnlCdXR0b24pIHtcblx0XHRcdHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5tYWluQnV0dG9uLCBYLCBZKTtcblx0XHR9XG5cdFx0aWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLnNlY29uZGFyeUJ1dHRvbikge1xuXHRcdFx0dGhpcy5zZW5kTW91c2VEb3duKE1vdXNlQnV0dG9uLnNlY29uZGFyeUJ1dHRvbiwgWCwgWSk7XG5cdFx0fVxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5hdXhpbGlhcnlCdXR0b24pIHtcblx0XHRcdHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5hdXhpbGlhcnlCdXR0b24sIFgsIFkpO1xuXHRcdH1cblx0XHRpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suZm91cnRoQnV0dG9uKSB7XG5cdFx0XHR0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uZm91cnRoQnV0dG9uLCBYLCBZKTtcblx0XHR9XG5cdFx0aWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmZpZnRoQnV0dG9uKSB7XG5cdFx0XHR0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uZmlmdGhCdXR0b24sIFgsIFkpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgd2hlbiBhIG1vdXNlIGlzIG1vdmVkXG5cdCAqIEBwYXJhbSBYIC0gTW91c2UgWCBDb29yZGluYXRlXG5cdCAqIEBwYXJhbSBZIC0gTW91c2UgWSBDb29yZGluYXRlXG5cdCAqIEBwYXJhbSBkZWx0YVggLSBNb3VzZSBEZWx0YSBYIENvb3JkaW5hdGVcblx0ICogQHBhcmFtIGRlbHRhWSAtIE1vdXNlIERlbHRhIFkgQ29vcmRpbmF0ZVxuXHQgKi9cblx0c2VuZE1vdXNlTW92ZShYOiBudW1iZXIsIFk6IG51bWJlciwgZGVsdGFYOiBudW1iZXIsIGRlbHRhWTogbnVtYmVyKSB7XG5cdFx0aWYgKHRoaXMucHJpbnRJbnB1dHMpIHtcblx0XHRcdGNvbnNvbGUuZGVidWcoYHg6ICR7WH0sIHk6JHtZfSwgZFg6ICR7ZGVsdGFYfSwgZFk6ICR7ZGVsdGFZfWApO1xuXHRcdH1cblxuXHRcdGxldCBtb3VzZUNvcmQ6IE5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQgPSB0aGlzLm5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQoWCwgWSk7XG5cdFx0bGV0IGRlbHRhQ29kZTogTm9ybWFsaXNlQW5kUXVhbnRpc2VTaWduZWQgPSB0aGlzLm5vcm1hbGlzZUFuZFF1YW50aXNlU2lnbmVkKGRlbHRhWCwgZGVsdGFZKTtcblxuXHRcdHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZS5zZW5kTW91c2VNb3ZlKG1vdXNlQ29yZC54LCBtb3VzZUNvcmQueSwgZGVsdGFDb2RlLngsIGRlbHRhQ29kZS55KTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkIGRvd25cblx0ICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBQcmVzc2VkXG5cdCAqIEBwYXJhbSBYICAtIE1vdXNlIFggQ29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0gWSAgLSBNb3VzZSBZIENvb3JkaW5hdGVcblx0ICovXG5cdHNlbmRNb3VzZURvd24oYnV0dG9uOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XG5cdFx0TG9nZ2VyLnZlcmJvc2VMb2coYG1vdXNlIGJ1dHRvbiAke2J1dHRvbn0gZG93biBhdCAoJHtYfSwgJHtZfSlgKTtcblx0XHRsZXQgY29vcmQ6IE5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQgPSB0aGlzLm5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQoWCwgWSk7XG5cdFx0dGhpcy51ZUlucHV0TW91c2VNZXNzYWdlLnNlbmRNb3VzZURvd24oYnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCB1cFxuXHQgKiBAcGFyYW0gYnV0dG9uIC0gTW91c2UgQnV0dG9uIFByZXNzZWRcblx0ICogQHBhcmFtIFggIC0gTW91c2UgWCBDb29yZGluYXRlXG5cdCAqIEBwYXJhbSBZICAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxuXHQgKi9cblx0c2VuZE1vdXNlVXAoYnV0dG9uOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XG5cdFx0TG9nZ2VyLnZlcmJvc2VMb2coYG1vdXNlIGJ1dHRvbiAke2J1dHRvbn0gdXAgYXQgKCR7WH0sICR7WX0pYCk7XG5cdFx0bGV0IGNvb3JkOiBOb3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkID0gdGhpcy5ub3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkKFgsIFkpO1xuXHRcdHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZS5zZW5kTW91c2VVcChidXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgd2hlbiBhIG1vdXNlIHdoZWVsIGV2ZW50XG5cdCAqIEBwYXJhbSBkZWx0YVkgLSBNb3VzZSBXaGVlbCBkYXRhXG5cdCAqIEBwYXJhbSBYICAtIE1vdXNlIFggQ29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0gWSAgLSBNb3VzZSBZIENvb3JkaW5hdGVcblx0ICovXG5cdHNlbmRNb3VzZVdoZWVsKGRlbHRhWTogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xuXHRcdExvZ2dlci52ZXJib3NlTG9nKGBtb3VzZSB3aGVlbCB3aXRoIGRlbHRhICR7ZGVsdGFZfSBhdCAoJHtYfSwgJHtZfSlgKTtcblx0XHRsZXQgY29vcmQ6IE5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQgPSB0aGlzLm5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQoWCwgWSk7XG5cblx0XHR0aGlzLnVlSW5wdXRNb3VzZU1lc3NhZ2Uuc2VuZE1vdXNlV2hlZWwoZGVsdGFZLCBjb29yZC54LCBjb29yZC55KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIG1vdXNlIGVudGVyXG5cdCAqL1xuXHRzZW5kTW91c2VFbnRlcigpIHtcblx0XHR0aGlzLnVlSW5wdXRNb3VzZU1lc3NhZ2Uuc2VuZE1vdXNlRW50ZXIoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIG1vdXNlIExlYXZlXG5cdCAqL1xuXHRzZW5kTW91c2VMZWF2ZSgpIHtcblx0XHR0aGlzLnVlSW5wdXRNb3VzZU1lc3NhZ2Uuc2VuZE1vdXNlTGVhdmUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBOb3JtYWxpc2VzIGFuZCBRdWFudGlzZWQgdGhlIE1vdXNlIENvb3JkaW5hdGVzXHRcblx0ICogQHBhcmFtIHggLSBNb3VzZSBYIENvb3JkaW5hdGVcblx0ICogQHBhcmFtIHkgLSBNb3VzZSBZIENvb3JkaW5hdGVcblx0ICogQHJldHVybnMgLSBOb3JtYWxpemUgQW5kIFF1YW50aXplIFVuc2lnbmVkIERhdGEgVHlwZVxuXHQgKi9cblx0bm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCh4OiBudW1iZXIsIHk6IG51bWJlcik6IE5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQge1xuXHRcdGxldCBwbGF5ZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcicpO1xuXHRcdGxldCB2aWRlb0VsZW1lbnQgPSBwbGF5ZXJFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIik7XG5cblx0XHRpZiAocGxheWVyRWxlbWVudCAmJiB2aWRlb0VsZW1lbnQubGVuZ3RoID4gMCkge1xuXHRcdFx0bGV0IHBsYXllckFzcGVjdFJhdGlvID0gcGxheWVyRWxlbWVudC5jbGllbnRIZWlnaHQgLyBwbGF5ZXJFbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdFx0bGV0IHZpZGVvQXNwZWN0UmF0aW8gPSB2aWRlb0VsZW1lbnRbMF0udmlkZW9IZWlnaHQgLyB2aWRlb0VsZW1lbnRbMF0udmlkZW9XaWR0aDtcblxuXHRcdFx0Ly8gVW5zaWduZWQgWFkgcG9zaXRpb25zIGFyZSB0aGUgcmF0aW8gKDAuMC4uMS4wKSBhbG9uZyBhIHZpZXdwb3J0IGF4aXMsXG5cdFx0XHQvLyBxdWFudGl6ZWQgaW50byBhbiB1aW50MTYgKDAuLjY1NTM2KS5cblx0XHRcdC8vIFNpZ25lZCBYWSBkZWx0YXMgYXJlIHRoZSByYXRpbyAoLTEuMC4uMS4wKSBhbG9uZyBhIHZpZXdwb3J0IGF4aXMsXG5cdFx0XHQvLyBxdWFudGl6ZWQgaW50byBhbiBpbnQxNiAoLTMyNzY3Li4zMjc2NykuXG5cdFx0XHQvLyBUaGlzIGFsbG93cyB0aGUgYnJvd3NlciB2aWV3cG9ydCBhbmQgY2xpZW50IHZpZXdwb3J0IHRvIGhhdmUgYSBkaWZmZXJlbnRcblx0XHRcdC8vIHNpemUuXG5cdFx0XHQvLyBIYWNrOiBDdXJyZW50bHkgd2Ugc2V0IGFuIG91dC1vZi1yYW5nZSBwb3NpdGlvbiB0byBhbiBleHRyZW1lICg2NTUzNSlcblx0XHRcdC8vIGFzIHdlIGNhbid0IHlldCBhY2N1cmF0ZWx5IGRldGVjdCBtb3VzZSBlbnRlciBhbmQgbGVhdmUgZXZlbnRzXG5cdFx0XHQvLyBwcmVjaXNlbHkgaW5zaWRlIGEgdmlkZW8gd2l0aCBhbiBhc3BlY3QgcmF0aW8gd2hpY2ggY2F1c2VzIG1hdHRlcy5cblx0XHRcdGlmIChwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW8pIHtcblx0XHRcdFx0TG9nZ2VyLnZlcmJvc2VMb2coJ1NldHVwIE5vcm1hbGl6ZSBhbmQgUXVhbnRpemUgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpbycpO1xuXG5cdFx0XHRcdGxldCByYXRpbyA9IHBsYXllckFzcGVjdFJhdGlvIC8gdmlkZW9Bc3BlY3RSYXRpbztcblx0XHRcdFx0Ly8gVW5zaWduZWQuXG5cdFx0XHRcdGxldCBub3JtYWxpemVkWCA9IHggLyBwbGF5ZXJFbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFkgPSByYXRpbyAqICh5IC8gcGxheWVyRWxlbWVudC5jbGllbnRIZWlnaHQgLSAwLjUpICsgMC41O1xuXG5cdFx0XHRcdGlmIChub3JtYWxpemVkWCA8IDAuMCB8fCBub3JtYWxpemVkWCA+IDEuMCB8fCBub3JtYWxpemVkWSA8IDAuMCB8fCBub3JtYWxpemVkWSA+IDEuMCkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRpblJhbmdlOiBmYWxzZSxcblx0XHRcdFx0XHRcdHg6IHRoaXMudW5zaWduZWRPdXRPZlJhbmdlLFxuXHRcdFx0XHRcdFx0eTogdGhpcy51bnNpZ25lZE91dE9mUmFuZ2Vcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGluUmFuZ2U6IHRydWUsXG5cdFx0XHRcdFx0XHR4OiBub3JtYWxpemVkWCAqICh0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZSArIDEpLFxuXHRcdFx0XHRcdFx0eTogbm9ybWFsaXplZFkgKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdExvZ2dlci52ZXJib3NlTG9nKCdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvJyk7XG5cblx0XHRcdFx0bGV0IHJhdGlvID0gdmlkZW9Bc3BlY3RSYXRpbyAvIHBsYXllckFzcGVjdFJhdGlvO1xuXHRcdFx0XHQvLyBVbnNpZ25lZC5cblx0XHRcdFx0bGV0IG5vcm1hbGl6ZWRYID0gcmF0aW8gKiAoeCAvIHBsYXllckVsZW1lbnQuY2xpZW50V2lkdGggLSAwLjUpICsgMC41O1xuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFkgPSB5IC8gcGxheWVyRWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cdFx0XHRcdGlmIChub3JtYWxpemVkWCA8IDAuMCB8fCBub3JtYWxpemVkWCA+IDEuMCB8fCBub3JtYWxpemVkWSA8IDAuMCB8fCBub3JtYWxpemVkWSA+IDEuMCkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRpblJhbmdlOiBmYWxzZSxcblx0XHRcdFx0XHRcdHg6IHRoaXMudW5zaWduZWRPdXRPZlJhbmdlLFxuXHRcdFx0XHRcdFx0eTogdGhpcy51bnNpZ25lZE91dE9mUmFuZ2Vcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRpblJhbmdlOiB0cnVlLFxuXHRcdFx0XHRcdFx0eDogbm9ybWFsaXplZFggKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKSxcblx0XHRcdFx0XHRcdHk6IG5vcm1hbGl6ZWRZICogKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSlcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIERlbm9ybWFsaXNlcyBhbmQgdW5xdWFudGlzZWQgdGhlIE1vdXNlIENvb3JkaW5hdGVzXHRcblx0ICogQHBhcmFtIHggLSBNb3VzZSBYIENvb3JkaW5hdGVcblx0ICogQHBhcmFtIHkgLSBNb3VzZSBZIENvb3JkaW5hdGVcblx0ICogQHJldHVybnMgLSB1bnF1YW50aXNlIGFuZCBEZW5vcm1hbGl6ZSBVbnNpZ25lZCBEYXRhIFR5cGVcblx0ICovXG5cdHVucXVhbnRpc2VBbmREZW5vcm1hbGlzZVVuc2lnbmVkKHg6IG51bWJlciwgeTogbnVtYmVyKTogVW5xdWFudGlzZWRBbmREZW5vcm1hbGlzZVVuc2lnbmVkIHtcblx0XHRsZXQgcGxheWVyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXInKTtcblx0XHRsZXQgdmlkZW9FbGVtZW50ID0gcGxheWVyRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpO1xuXG5cdFx0aWYgKHBsYXllckVsZW1lbnQgJiYgdmlkZW9FbGVtZW50Lmxlbmd0aCA+IDApIHtcblx0XHRcdGxldCBwbGF5ZXJBc3BlY3RSYXRpbyA9IHBsYXllckVsZW1lbnQuY2xpZW50SGVpZ2h0IC8gcGxheWVyRWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdGxldCB2aWRlb0FzcGVjdFJhdGlvID0gdmlkZW9FbGVtZW50WzBdLnZpZGVvSGVpZ2h0IC8gdmlkZW9FbGVtZW50WzBdLnZpZGVvV2lkdGg7XG5cblx0XHRcdC8vIFVuc2lnbmVkIFhZIHBvc2l0aW9ucyBhcmUgdGhlIHJhdGlvICgwLjAuLjEuMCkgYWxvbmcgYSB2aWV3cG9ydCBheGlzLFxuXHRcdFx0Ly8gcXVhbnRpemVkIGludG8gYW4gdWludDE2ICgwLi42NTUzNikuXG5cdFx0XHQvLyBTaWduZWQgWFkgZGVsdGFzIGFyZSB0aGUgcmF0aW8gKC0xLjAuLjEuMCkgYWxvbmcgYSB2aWV3cG9ydCBheGlzLFxuXHRcdFx0Ly8gcXVhbnRpemVkIGludG8gYW4gaW50MTYgKC0zMjc2Ny4uMzI3NjcpLlxuXHRcdFx0Ly8gVGhpcyBhbGxvd3MgdGhlIGJyb3dzZXIgdmlld3BvcnQgYW5kIGNsaWVudCB2aWV3cG9ydCB0byBoYXZlIGEgZGlmZmVyZW50XG5cdFx0XHQvLyBzaXplLlxuXHRcdFx0Ly8gSGFjazogQ3VycmVudGx5IHdlIHNldCBhbiBvdXQtb2YtcmFuZ2UgcG9zaXRpb24gdG8gYW4gZXh0cmVtZSAoNjU1MzUpXG5cdFx0XHQvLyBhcyB3ZSBjYW4ndCB5ZXQgYWNjdXJhdGVseSBkZXRlY3QgbW91c2UgZW50ZXIgYW5kIGxlYXZlIGV2ZW50c1xuXHRcdFx0Ly8gcHJlY2lzZWx5IGluc2lkZSBhIHZpZGVvIHdpdGggYW4gYXNwZWN0IHJhdGlvIHdoaWNoIGNhdXNlcyBtYXR0ZXMuXG5cdFx0XHRpZiAocGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvKSB7XG5cdFx0XHRcdExvZ2dlci52ZXJib3NlTG9nKCdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW8nKTtcblxuXHRcdFx0XHRsZXQgcmF0aW8gPSBwbGF5ZXJBc3BlY3RSYXRpbyAvIHZpZGVvQXNwZWN0UmF0aW87XG5cdFx0XHRcdC8vIFVuc2lnbmVkLlxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFggPSB4IC8gKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSk7XG5cdFx0XHRcdGxldCBub3JtYWxpemVkWSA9ICh5IC8gKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSkgLSAwLjUpIC8gcmF0aW8gKyAwLjU7XG5cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR4OiBub3JtYWxpemVkWCAqIHBsYXllckVsZW1lbnQuY2xpZW50V2lkdGgsXG5cdFx0XHRcdFx0eTogbm9ybWFsaXplZFkgKiBwbGF5ZXJFbGVtZW50LmNsaWVudEhlaWdodFxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdExvZ2dlci52ZXJib3NlTG9nKCdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvJyk7XG5cblx0XHRcdFx0bGV0IHJhdGlvID0gdmlkZW9Bc3BlY3RSYXRpbyAvIHBsYXllckFzcGVjdFJhdGlvO1xuXHRcdFx0XHQvLyBVbnNpZ25lZC5cblx0XHRcdFx0bGV0IG5vcm1hbGl6ZWRYID0gKHggLyAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKSAtIDAuNSkgLyByYXRpbyArIDAuNTtcblx0XHRcdFx0bGV0IG5vcm1hbGl6ZWRZID0geSAvICh0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZSArIDEpO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHg6IG5vcm1hbGl6ZWRYICogcGxheWVyRWxlbWVudC5jbGllbnRXaWR0aCxcblx0XHRcdFx0XHR5OiBub3JtYWxpemVkWSAqIHBsYXllckVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTm9ybWFsaXNlcyBhbmQgUXVhbnRpc2VkIHRoZSBNb3VzZSBDb29yZGluYXRlc1x0XG5cdCAqIEBwYXJhbSB4IC0gTW91c2UgWCBDb29yZGluYXRlXG5cdCAqIEBwYXJhbSB5IC0gTW91c2UgWSBDb29yZGluYXRlXG5cdCAqIEByZXR1cm5zIC0gTm9ybWFsaXplIEFuZCBRdWFudGl6ZSBTaWduZWQgRGF0YSBUeXBlXG5cdCAqL1xuXHRub3JtYWxpc2VBbmRRdWFudGlzZVNpZ25lZCh4OiBudW1iZXIsIHk6IG51bWJlcik6IE5vcm1hbGlzZUFuZFF1YW50aXNlU2lnbmVkIHtcblx0XHRsZXQgcGxheWVyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXInKTtcblx0XHRsZXQgdmlkZW9FbGVtZW50ID0gcGxheWVyRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpO1xuXG5cdFx0aWYgKHBsYXllckVsZW1lbnQgJiYgdmlkZW9FbGVtZW50Lmxlbmd0aCA+IDApIHtcblx0XHRcdGxldCBwbGF5ZXJBc3BlY3RSYXRpbyA9IHBsYXllckVsZW1lbnQuY2xpZW50SGVpZ2h0IC8gcGxheWVyRWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdGxldCB2aWRlb0FzcGVjdFJhdGlvID0gdmlkZW9FbGVtZW50WzBdLnZpZGVvSGVpZ2h0IC8gdmlkZW9FbGVtZW50WzBdLnZpZGVvV2lkdGg7XG5cblx0XHRcdC8vIFVuc2lnbmVkIFhZIHBvc2l0aW9ucyBhcmUgdGhlIHJhdGlvICgwLjAuLjEuMCkgYWxvbmcgYSB2aWV3cG9ydCBheGlzLFxuXHRcdFx0Ly8gcXVhbnRpemVkIGludG8gYW4gdWludDE2ICgwLi42NTUzNikuXG5cdFx0XHQvLyBTaWduZWQgWFkgZGVsdGFzIGFyZSB0aGUgcmF0aW8gKC0xLjAuLjEuMCkgYWxvbmcgYSB2aWV3cG9ydCBheGlzLFxuXHRcdFx0Ly8gcXVhbnRpemVkIGludG8gYW4gaW50MTYgKC0zMjc2Ny4uMzI3NjcpLlxuXHRcdFx0Ly8gVGhpcyBhbGxvd3MgdGhlIGJyb3dzZXIgdmlld3BvcnQgYW5kIGNsaWVudCB2aWV3cG9ydCB0byBoYXZlIGEgZGlmZmVyZW50XG5cdFx0XHQvLyBzaXplLlxuXHRcdFx0Ly8gSGFjazogQ3VycmVudGx5IHdlIHNldCBhbiBvdXQtb2YtcmFuZ2UgcG9zaXRpb24gdG8gYW4gZXh0cmVtZSAoNjU1MzUpXG5cdFx0XHQvLyBhcyB3ZSBjYW4ndCB5ZXQgYWNjdXJhdGVseSBkZXRlY3QgbW91c2UgZW50ZXIgYW5kIGxlYXZlIGV2ZW50c1xuXHRcdFx0Ly8gcHJlY2lzZWx5IGluc2lkZSBhIHZpZGVvIHdpdGggYW4gYXNwZWN0IHJhdGlvIHdoaWNoIGNhdXNlcyBtYXR0ZXMuXG5cdFx0XHRpZiAocGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvKSB7XG5cdFx0XHRcdExvZ2dlci52ZXJib3NlTG9nKCdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW8nKTtcblxuXHRcdFx0XHRsZXQgcmF0aW8gPSBwbGF5ZXJBc3BlY3RSYXRpbyAvIHZpZGVvQXNwZWN0UmF0aW87XG5cdFx0XHRcdC8vIFVuc2lnbmVkLlxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFggPSB4IC8gKDAuNSAqIHBsYXllckVsZW1lbnQuY2xpZW50V2lkdGgpO1xuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFkgPSAocmF0aW8gKiB5KSAvICgwLjUgKiBwbGF5ZXJFbGVtZW50LmNsaWVudEhlaWdodCk7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0eDogbm9ybWFsaXplZFggKiB0aGlzLnNpZ25lZE91dE9mUmFuZ2UsXG5cdFx0XHRcdFx0eTogbm9ybWFsaXplZFkgKiB0aGlzLnNpZ25lZE91dE9mUmFuZ2Vcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGhpcy5wcmludElucHV0cykge1xuXHRcdFx0XHRcdExvZ2dlci52ZXJib3NlTG9nKCdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGV0IHJhdGlvID0gdmlkZW9Bc3BlY3RSYXRpbyAvIHBsYXllckFzcGVjdFJhdGlvO1xuXHRcdFx0XHQvLyBTaWduZWQuXG5cdFx0XHRcdGxldCBub3JtYWxpemVkWCA9IChyYXRpbyAqIHgpIC8gKDAuNSAqIHBsYXllckVsZW1lbnQuY2xpZW50V2lkdGgpO1xuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFkgPSB5IC8gKDAuNSAqIHBsYXllckVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR4OiBub3JtYWxpemVkWCAqIHRoaXMuc2lnbmVkT3V0T2ZSYW5nZSxcblx0XHRcdFx0XHR5OiBub3JtYWxpemVkWSAqIHRoaXMuc2lnbmVkT3V0T2ZSYW5nZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59IiwiLyoqXG4gKiBSZWdpc3RlcnMgdGhlIFNwZWNpYWwgS2V5IGNvZGVzXG4gKiAgTXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBKYXZhU2NyaXB0S2V5Q29kZVRvRktleSBDKysgYXJyYXkuIFxuICogVGhlIGluZGV4IG9mIHRoZSBlbnRyeSBpbiB0aGUgYXJyYXkgaXMgdGhlIHNwZWNpYWwga2V5IGNvZGUgZ2l2ZW4gYmVsb3cuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVjaWFsS2V5Q29kZXMge1xuXHRzdGF0aWMgYmFja1NwYWNlID0gODtcblx0c3RhdGljIHNoaWZ0ID0gMTY7XG5cdHN0YXRpYyBjb250cm9sID0gMTc7XG5cdHN0YXRpYyBhbHQgPSAxODtcblx0c3RhdGljIHJpZ2h0U2hpZnQgPSAyNTM7XG5cdHN0YXRpYyByaWdodENvbnRyb2wgPSAyNTQ7XG5cdHN0YXRpYyByaWdodEFsdCA9IDI1NTtcbn1cbiIsImltcG9ydCB7IFVlSW5wdXRUb3VjaE1lc3NhZ2UgfSBmcm9tIFwiLi4vVWVJbnN0YW5jZU1lc3NhZ2UvVWVJbnB1dFRvdWNoTWVzc2FnZVwiO1xuaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgSVRvdWNoQ29udHJvbGxlciB9IGZyb20gXCIuL0lUb3VjaENvbnRyb2xsZXJcIjtcbi8qKiBcbiAqIEhhbmRsZXMgdGhlIFRvdWNoIGlucHV0IEV2ZW50c1xuICovXG5leHBvcnQgY2xhc3MgVG91Y2hDb250cm9sbGVyIGltcGxlbWVudHMgSVRvdWNoQ29udHJvbGxlciB7XG4gICAgdWVJbnB1dFRvdWNoTWVzc2FnZTogVWVJbnB1dFRvdWNoTWVzc2FnZTtcbiAgICBwbGF5ZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcblxuICAgIGxvZ2dpbmc6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZGF0YUNoYW5uZWxDb250cm9sbGVyIC0gdGhlIGRhdGEgY2hhbm5lbCBjb250cm9sbGVyIFxuICAgICAqIEBwYXJhbSBwbGF5ZXJFbGVtZW50IC0gdGhlIHBsYXllciBlbGVtZW50IERPTVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyLCBwbGF5ZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICB0aGlzLnVlSW5wdXRUb3VjaE1lc3NhZ2UgPSBuZXcgVWVJbnB1dFRvdWNoTWVzc2FnZShkYXRhQ2hhbm5lbENvbnRyb2xsZXIpO1xuICAgICAgICB0aGlzLnBsYXllckVsZW1lbnQgPSBwbGF5ZXJFbGVtZW50O1xuICAgICAgICBkb2N1bWVudC5vbnRvdWNoc3RhcnQgPSB0aGlzLm9uVG91Y2hTdGFydC5iaW5kKHRoaXMpO1xuICAgICAgICBkb2N1bWVudC5vbnRvdWNoZW5kID0gdGhpcy5vblRvdWNoRW5kLmJpbmQodGhpcyk7XG4gICAgICAgIGRvY3VtZW50Lm9udG91Y2htb3ZlID0gdGhpcy5vblRvdWNoTW92ZS5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRvdWNoIEV2ZW50cyBSZWdpc3RlcmVkXCIpO1xuICAgICAgICB0aGlzLmxvZ2dpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgc3RhcnRzIFxuICAgICAqIEBwYXJhbSBldmVudCAtIHRoZSB0b3VjaCBldmVudCBiZWluZyBpbnRlcmNlcHRlZCAgXG4gICAgICovXG4gICAgb25Ub3VjaFN0YXJ0KGV2ZW50OiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmxvZ2dpbmcpIHsgY29uc29sZS5sb2coXCJvbiBUb3VjaCBTdGFydFwiKTsgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdG91Y2g6IFRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG5cbiAgICAgICAgICAgIGxldCBmaW5nZXIgPSB0aGlzLnVlSW5wdXRUb3VjaE1lc3NhZ2UuZmluZ2Vycy5wb3AoKTtcbiAgICAgICAgICAgIGlmIChmaW5nZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvZ2dpbmcpIHsgY29uc29sZS5sb2coXCJ3aG8gaGFzIG1vcmUgdGhlbiAxMCBmaW5nZXJzXCIpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVlSW5wdXRUb3VjaE1lc3NhZ2UuZmluZ2Vyc0lkc1t0b3VjaC5pZGVudGlmaWVyXSA9IGZpbmdlcjtcblxuICAgICAgICAgICAgaWYgKHRoaXMubG9nZ2luZykgeyBjb25zb2xlLmxvZyhcInRvdWNoLmlkZW50aWZpZXI6IFwiICsgdG91Y2guaWRlbnRpZmllcik7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxvZ2dpbmcpIHsgY29uc29sZS5sb2coXCJmaW5nZXI6IFwiICsgZmluZ2VyKTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlLnNlbmRUb3VjaFN0YXJ0KGV2ZW50LmNoYW5nZWRUb3VjaGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgZW5kcyBcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSB0aGUgdG91Y2ggZXZlbnQgYmVpbmcgaW50ZXJjZXB0ZWQgIFxuICAgICAqL1xuICAgIG9uVG91Y2hFbmQoZXZlbnQ6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMubG9nZ2luZykgeyBjb25zb2xlLmxvZyhcIm9uIFRvdWNoIEVORFwiKTsgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMubG9nZ2luZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib24gRm9yZ2V0IFRvdWNoXCIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG91Y2ggaWQ6IFwiICsgdG91Y2guaWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGaW5nZXJzIGlkIFRvdWNoIGlkOiBcIiArIHRoaXMudWVJbnB1dFRvdWNoTWVzc2FnZS5maW5nZXJzSWRzW3RvdWNoLmlkZW50aWZpZXJdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlLmZpbmdlcnMucHVzaCh0aGlzLnVlSW5wdXRUb3VjaE1lc3NhZ2UuZmluZ2Vyc0lkc1t0b3VjaC5pZGVudGlmaWVyXSk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVlSW5wdXRUb3VjaE1lc3NhZ2UuZmluZ2Vyc0lkc1t0b3VjaC5pZGVudGlmaWVyXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxvZ2dpbmcpIHsgY29uc29sZS5sb2coXCJ0b3VjaC5pZGVudGlmaWVyOiBcIiArIHRvdWNoLmlkZW50aWZpZXIpOyB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlLnNlbmRUb3VjaEVuZChldmVudC5jaGFuZ2VkVG91Y2hlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogd2hlbiBhIG1vdmluZyB0b3VjaCBldmVudCBvY2N1cnMgXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkICBcbiAgICAgKi9cbiAgICBvblRvdWNoTW92ZShldmVudDogVG91Y2hFdmVudCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50LnRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbaV07XG4gICAgICAgICAgICBpZiAodGhpcy5sb2dnaW5nKSB7IGNvbnNvbGUubG9nKFwiWDogXCIgKyB0b3VjaC5jbGllbnRYICsgXCIgWTogXCIgKyB0b3VjaC5jbGllbnRZKTsgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudWVJbnB1dFRvdWNoTWVzc2FnZS5zZW5kVG91Y2hNb3ZlKGV2ZW50LnRvdWNoZXMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9Db25maWcvQ29uZmlnXCI7XG5cbi8qKlxuICogVGhlIGN1cnJlbnQgbG9nZ2VyIGZvciB0aGUgZnJvbnRlbmQgXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YW5kYXJkIGxvZ2dpbmcgb3V0cHV0IFxuICAgICAqIEBwYXJhbSB0ZXh0IC0gdGhlIHN0cmluZyB0byBiZSBsb2dnZWQgXG4gICAgICovXG4gICAgc3RhdGljIGluZm9Mb2codGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJib3NlIGxvZ2dpbmcgb3V0cHV0IFxuICAgICAqIEBwYXJhbSB0ZXh0IC0gdGhlIHN0cmluZyB0byBiZSBsb2dnZWQgXG4gICAgICovXG4gICAgc3RhdGljIHZlcmJvc2VMb2codGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGlmIChDb25maWcuX2VuYWJsZVZlcmJvc2VMb2dnaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgICB9XG4gICAgfVxuXG59IiwiZXhwb3J0IGNsYXNzIE1pY0NvbnRyb2xsZXIge1xuICAgIHVzZU1pYzogYm9vbGVhbjtcbiAgICBpc0xvY2FsaG9zdENvbm5lY3Rpb246IGJvb2xlYW47XG4gICAgaXNIdHRwc0Nvbm5lY3Rpb246IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcih1cmxQYXJhbXM6IFVSTFNlYXJjaFBhcmFtcykge1xuICAgICAgICAvLyBnZXQgdGhlIG1pYyBzdGF0dXMgZnJvbSB0aGUgdXJsIFxuICAgICAgICB0aGlzLnVzZU1pYyA9IHVybFBhcmFtcy5oYXMoJ3VzZU1pYycpO1xuXG4gICAgICAgIGlmICh0aGlzLnVzZU1pYykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiTWljcm9waG9uZSBhY2Nlc3MgaXMgZW5hYmxlZCBJVCBJUyBFWFBFUklNRU5UQUwgQU5EIElTIE5PVCBQUk9QRVJMWSBTVVBQT1JURUQgQUNST1NTIFVFLiBJRiBJVCBET0VTIE5PVCBXT1JLIElUUyBZT1VSIE9XTiBGQVVMVCEgWU9VIEhBVkUgQkVFTiBUT0xELlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmICghdGhpcy51c2VNaWMpIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiTWljcm9waG9uZSBhY2Nlc3MgaXMgbm90IGVuYWJsZWQuIFBhc3MgP3VzZU1pYyBpbiB0aGUgdXJsIHRvIGVuYWJsZSBpdC5cIik7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBjaGVjayBpZiB0aGUgY29ubmVjdGlvbiBpcyBub3QgbG9jYWwgYW5kIGlzIGh0dHBzIG9yIG1pYyB3aWxsIG5vdCB3b3JrIFxuICAgICAgICB0aGlzLmlzTG9jYWxob3N0Q29ubmVjdGlvbiA9IGxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiIHx8IGxvY2F0aW9uLmhvc3RuYW1lID09PSBcIjEyNy4wLjAuMVwiO1xuICAgICAgICB0aGlzLmlzSHR0cHNDb25uZWN0aW9uID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgICAgICBpZiAodGhpcy51c2VNaWMgJiYgIXRoaXMuaXNMb2NhbGhvc3RDb25uZWN0aW9uICYmICF0aGlzLmlzSHR0cHNDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnVzZU1pYyA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk1pY3JvcGhvbmUgYWNjZXNzIGluIHRoZSBicm93c2VyIHdpbGwgbm90IHdvcmsgaWYgeW91IGFyZSBub3Qgb24gSFRUUFMgb3IgbG9jYWxob3N0LiBEaXNhYmxpbmcgbWljIGFjY2Vzcy5cIik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRm9yIHRlc3RpbmcgeW91IGNhbiBlbmFibGUgSFRUUCBtaWNyb3Bob25lIGFjY2VzcyBDaHJvbWUgYnkgdmlzaXRpbmcgY2hyb21lOi8vZmxhZ3MvIGFuZCBlbmFibGluZyAndW5zYWZlbHktdHJlYXQtaW5zZWN1cmUtb3JpZ2luLWFzLXNlY3VyZSdcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBJT3ZlcmxheSB9IGZyb20gXCIuL0lPdmVybGF5XCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiZXZlbnRzXCI7XG5cbi8qKlxuICogVGhlIGFic3RyYWN0IGNsYXNzIGZvciBhY3Rpb24gb3ZlcmxheXMgXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBY3Rpb25PdmVybGF5IGltcGxlbWVudHMgSU92ZXJsYXkge1xuICAgIFxuICAgIC8vIHRoZSBldmVudCBlbWl0dGVyIG9iamVjdCBcbiAgICBwcml2YXRlIGV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIG92ZXJsYXkgXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IHNob3coKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG92ZXJsYXkgXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGhpZGUoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFNldCBhIG1ldGhvZCBhcyBhbiBldmVudCBlbWl0dGVyIGNhbGxiYWNrIFxuICAgICAqIEBwYXJhbSBjYWxsQmFjayB0aGUgbWV0aG9kIHRoYXQgaXMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQgXG4gICAgICovXG4gICAgb25BY3Rpb24oY2FsbEJhY2s6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbihcImFjdGlvblwiLCBjYWxsQmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWN0aXZhdGUgYW4gZXZlbnQgdGhhdCBpcyBhdHRhY2hlZCB0byB0aGUgZXZlbnQgZW1pdHRlciBcbiAgICAgKi9cbiAgICBhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdChcImFjdGlvblwiKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQWN0aW9uT3ZlcmxheSB9IGZyb20gXCIuL0FjdGlvbk92ZXJsYXlcIjtcblxuLyoqXG4gKiBUaGUgYWJzdHJhY3QgY2xhc3MgZm9yIHRoZSBBZmsgb3ZlcmxheSBcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFma092ZXJsYXkgZXh0ZW5kcyBBY3Rpb25PdmVybGF5IHtcblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZSB0aGUgY291bnRkb3duIG51bWJlciBmb3IgdGhlIGFmayBvdmVybGF5IFxuICAgICAqIEBwYXJhbSBjb3VudGRvd24gdGhlIGNvdW50ZG93biBudW1iZXIgdG8gYmUgdXBkYXRlZCBcbiAgICAgKi9cbiAgICBwdWJsaWMgYWJzdHJhY3QgdXBkYXRlKGNvdW50ZG93bjogbnVtYmVyKTogdm9pZDtcbn0iLCJpbXBvcnQgeyBpbmJvdW5kQXVkaW9TdGF0cyB9IGZyb20gXCIuL0luYm91bmRBdWRpb1N0YXRzXCI7XG5pbXBvcnQgeyBpbmJvdW5kVmlkZW9TdGF0cyB9IGZyb20gXCIuL0luYm91bmRWaWRlb1N0YXRzXCI7XG5pbXBvcnQgeyBkYXRhQ2hhbm5lbFN0YXRzIH0gZnJvbSBcIi4vRGF0YUNoYW5uZWxTdGF0c1wiO1xuaW1wb3J0IHsgQ2FuZGlkYXRlU3RhdCB9IGZyb20gXCIuL0NhbmRpZGF0ZVN0YXRcIjtcbmltcG9ydCB7IENhbmRpZGF0ZVBhaXJTdGF0cyB9IGZyb20gXCIuL0NhbmRpZGF0ZVBhaXJTdGF0c1wiO1xuaW1wb3J0IHsgT3V0Qm91bmRWaWRlb1N0YXRzIH0gZnJvbSBcIi4vT3V0Qm91bmRWaWRlb1N0YXRzXCI7XG5pbXBvcnQgeyBTdHJlYW1TdGF0cyB9IGZyb20gXCIuL1N0cmVhbVN0YXRzXCI7XG5cbi8qKlxuICogVGhlIEFnZ3JlZ2F0ZWQgU3RhdHMgdGhhdCBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxuICovXG5cbnR5cGUgUlRDU3RhdHNUeXBlU1BTID0gUlRDU3RhdHNUeXBlIHwgXCJzdHJlYW1cIlxuZXhwb3J0IGNsYXNzIEFnZ3JlZ2F0ZWRTdGF0cyB7XG4gICAgaW5ib3VuZFZpZGVvU3RhdHM6IGluYm91bmRWaWRlb1N0YXRzO1xuICAgIGluYm91bmRBdWRpb1N0YXRzOiBpbmJvdW5kQXVkaW9TdGF0cztcbiAgICBsYXN0VmlkZW9TdGF0czogaW5ib3VuZFZpZGVvU3RhdHM7XG4gICAgY2FuZGlkYXRlUGFpcjogQ2FuZGlkYXRlUGFpclN0YXRzXG4gICAgZGF0YUNoYW5uZWxTdGF0czogZGF0YUNoYW5uZWxTdGF0cztcbiAgICBsb2NhbENhbmRpZGF0ZXM6IEFycmF5PENhbmRpZGF0ZVN0YXQ+O1xuICAgIHJlbW90ZUNhbmRpZGF0ZXM6IEFycmF5PENhbmRpZGF0ZVN0YXQ+O1xuICAgIG91dEJvdW5kVmlkZW9TdGF0czogT3V0Qm91bmRWaWRlb1N0YXRzO1xuICAgIHN0cmVhbVN0YXRzIDogU3RyZWFtU3RhdHNcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gbmV3IGluYm91bmRWaWRlb1N0YXRzKCk7XG4gICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMgPSBuZXcgaW5ib3VuZEF1ZGlvU3RhdHMoKTtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyID0gbmV3IENhbmRpZGF0ZVBhaXJTdGF0cygpO1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMgPSBuZXcgZGF0YUNoYW5uZWxTdGF0cygpO1xuICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cyA9IG5ldyBPdXRCb3VuZFZpZGVvU3RhdHMoKTtcbiAgICAgICAgdGhpcy5zdHJlYW1TdGF0cyA9IG5ldyBTdHJlYW1TdGF0cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdhdGhlciBhbGwgdGhlIGluZm9ybWF0aW9uIGZyb20gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gUmVwb3J0XG4gICAgICogQHBhcmFtIHJ0Y1N0YXRzUmVwb3J0IC0gUlRDIFN0YXRzIFJlcG9ydFxuICAgICAqL1xuICAgIHByb2Nlc3NTdGF0cyhydGNTdGF0c1JlcG9ydDogUlRDU3RhdHNSZXBvcnQpIHtcbiAgICAgICAgdGhpcy5sb2NhbENhbmRpZGF0ZXMgPSBuZXcgQXJyYXk8Q2FuZGlkYXRlU3RhdD4oKTtcbiAgICAgICAgdGhpcy5yZW1vdGVDYW5kaWRhdGVzID0gbmV3IEFycmF5PENhbmRpZGF0ZVN0YXQ+KCk7XG5cbiAgICAgICAgcnRjU3RhdHNSZXBvcnQuZm9yRWFjaCgoc3RhdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHR5cGU6IFJUQ1N0YXRzVHlwZVNQUyA9IHN0YXQudHlwZTtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNhbmRpZGF0ZS1wYWlyXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FuZGlkYXRlUGFpcihzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNlcnRpZmljYXRlXCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjb2RlY1wiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY3NyY1wiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGF0YS1jaGFubmVsXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRGF0YUNoYW5uZWwoc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJpbmJvdW5kLXJ0cFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUluQm91bmRSVFAoc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsb2NhbC1jYW5kaWRhdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVMb2NhbENhbmRpZGF0ZShzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1lZGlhLXNvdXJjZVwiOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwib3V0Ym91bmQtcnRwXCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJwZWVyLWNvbm5lY3Rpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJlbW90ZS1jYW5kaWRhdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyZW1vdGUtaW5ib3VuZC1ydHBcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJlbW90ZS1vdXRib3VuZC1ydHBcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVPdXRCb3VuZChzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInRyYWNrXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhY2soc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmFuc3BvcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmVhbVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVN0cmVhbShzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInVuIGhhbmRsZWQgU3RhdCBUeXBlXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRpcihzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSlcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3Mgc3RyZWFtIHN0YXRzIGRhdGEgZnJvbSB3ZWJydGNcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gc3RhdCB0aGUgc3RhdHMgY29taW5nIGluIGZyb20gd2VicnRjXG4gICAgICovXG4gICAgaGFuZGxlU3RyZWFtKHN0YXQgOiBhbnkpIHtcbiAgICAgICAgdGhpcy5zdHJlYW1TdGF0cyA9IHN0YXRcbiAgICB9XG5cbiAgICAvKiogXG4gICAgICogUHJvY2VzcyB0aGUgSWNlIENhbmRpZGF0ZSBQYWlyIERhdGEgXG4gICAgICovXG4gICAgaGFuZGxlQ2FuZGlkYXRlUGFpcihzdGF0OiBhbnkpIHtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmJ5dGVzUmVjZWl2ZWQgPSBzdGF0LmJ5dGVzUmVjZWl2ZWQ7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudDtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmxvY2FsQ2FuZGlkYXRlSWQgPSBzdGF0LmxvY2FsQ2FuZGlkYXRlSWRcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnJlbW90ZUNhbmRpZGF0ZUlkID0gc3RhdC5yZW1vdGVDYW5kaWRhdGVJZFxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIubm9taW5hdGVkID0gc3RhdC5ub21pbmF0ZWQ7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5yZWFkYWJsZSA9IHN0YXQucmVhZGFibGU7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5zZWxlY3RlZCA9IHN0YXQuc2VsZWN0ZWQ7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci53cml0YWJsZSA9IHN0YXQud3JpdGFibGU7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5zdGF0ZSA9IHN0YXQuc3RhdGU7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5jdXJyZW50Um91bmRUcmlwVGltZSA9IHN0YXQuY3VycmVudFJvdW5kVHJpcFRpbWU7XG4gICAgfVxuXG4gICAgLyoqIFxuICAgICAqIFByb2Nlc3MgdGhlIERhdGEgQ2hhbm5lbCBEYXRhIFxuICAgICAqL1xuICAgIGhhbmRsZURhdGFDaGFubmVsKHN0YXQ6IGFueSkge1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMuYnl0ZXNSZWNlaXZlZCA9IHN0YXQuZGF0YXl0ZXNSZWNlaXZlZDtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFN0YXRzLmJ5dGVzU2VudCA9IHN0YXQuYnl0ZXNTZW50XG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy5kYXRhQ2hhbm5lbElkZW50aWZpZXIgPSBzdGF0LmRhdGFDaGFubmVsSWRlbnRpZmllclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMuaWQgPSBzdGF0LmlkXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy5sYWJlbCA9IHN0YXQubGFiZWxcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFN0YXRzLm1lc3NhZ2VzUmVjZWl2ZWQgPSBzdGF0Lm1lc3NhZ2VzUmVjZWl2ZWRcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFN0YXRzLm1lc3NhZ2VzU2VudCA9IHN0YXQubWVzc2FnZXNTZW50XG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy5wcm90b2NvbCA9IHN0YXQucHJvdG9jb2xcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFN0YXRzLnN0YXRlID0gc3RhdC5zdGF0ZVxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMudGltZXN0YW1wID0gc3RhdC50aW1lc3RhbXBcbiAgICB9XG5cbiAgICAvKiogXG4gICAgICogUHJvY2VzcyB0aGUgTG9jYWwgSWNlIENhbmRpZGF0ZSBEYXRhIFxuICAgICAqL1xuICAgIGhhbmRsZUxvY2FsQ2FuZGlkYXRlKHN0YXQ6IGFueSkge1xuICAgICAgICBsZXQgbG9jYWxDYW5kaWRhdGUgPSBuZXcgQ2FuZGlkYXRlU3RhdCgpO1xuICAgICAgICBsb2NhbENhbmRpZGF0ZS5sYWJlbCA9IFwibG9jYWwtY2FuZGlkYXRlXCJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUuYWRkcmVzcyA9IHN0YXQuYWRkcmVzcztcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUucG9ydCA9IHN0YXQucG9ydFxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5wcm90b2NvbCA9IHN0YXQucHJvdG9jb2w7XG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmNhbmRpZGF0ZVR5cGUgPSBzdGF0LmNhbmRpZGF0ZVR5cGU7XG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmlkID0gc3RhdC5pZDtcbiAgICAgICAgdGhpcy5sb2NhbENhbmRpZGF0ZXMucHVzaChsb2NhbENhbmRpZGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgUmVtb3RlIEljZSBDYW5kaWRhdGUgRGF0YSBcbiAgICAgKi9cbiAgICBoYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdDogYW55KSB7XG4gICAgICAgIGxldCBSZW1vdGVDYW5kaWRhdGUgPSBuZXcgQ2FuZGlkYXRlU3RhdCgpO1xuICAgICAgICBSZW1vdGVDYW5kaWRhdGUubGFiZWwgPSBcImxvY2FsLWNhbmRpZGF0ZVwiXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5hZGRyZXNzID0gc3RhdC5hZGRyZXNzO1xuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucG9ydCA9IHN0YXQucG9ydFxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sO1xuICAgICAgICBSZW1vdGVDYW5kaWRhdGUuaWQgPSBzdGF0LmlkO1xuICAgICAgICBSZW1vdGVDYW5kaWRhdGUuY2FuZGlkYXRlVHlwZSA9IHN0YXQuY2FuZGlkYXRlVHlwZTtcbiAgICAgICAgdGhpcy5yZW1vdGVDYW5kaWRhdGVzLnB1c2goUmVtb3RlQ2FuZGlkYXRlKTtcbiAgICB9XG5cbiAgICAvKiogXG4gICAgICogUHJvY2VzcyB0aGUgSW5ib3VuZCBSVFAgQXVkaW8gYW5kIFZpZGVvIERhdGEgIFxuICAgICAqL1xuICAgIGhhbmRsZUluQm91bmRSVFAoc3RhdDogYW55KSB7XG4gICAgICAgIHN3aXRjaCAoc3RhdC5raW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwidmlkZW9cIjpcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCA9IHN0YXQudGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZCA9IHN0YXQuYnl0ZXNSZWNlaXZlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc0RlY29kZWQgPSBzdGF0LmZyYW1lc0RlY29kZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5wYWNrZXRzTG9zdCA9IHN0YXQucGFja2V0c0xvc3Q7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5qaXR0ZXIgPSBzdGF0LmppdHRlcjtcblxuICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZFN0YXJ0ID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZFN0YXJ0ID09IG51bGwpID8gc3RhdC5ieXRlc1JlY2VpdmVkIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5ieXRlc1JlY2VpdmVkU3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQgPT0gbnVsbCkgPyBzdGF0LmZyYW1lc0RlY29kZWQgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc0RlY29kZWRTdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcFN0YXJ0ID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMudGltZXN0YW1wU3RhcnQgPT0gbnVsbCkgPyBzdGF0LnRpbWVzdGFtcCA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMudGltZXN0YW1wU3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQgPT0gbnVsbCkgPyBzdGF0LmZyYW1lc0RlY29kZWQgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc0RlY29kZWRTdGFydDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhc3RWaWRlb1N0YXRzICE9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA9IDggKiAoc3RhdC5ieXRlc1JlY2VpdmVkIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy5ieXRlc1JlY2VpdmVkKSAvIChzdGF0LnRpbWVzdGFtcCAtIHRoaXMubGFzdFZpZGVvU3RhdHMudGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlID0gTWF0aC5mbG9vcih0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93Qml0cmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0JpdHJhdGUgPT0gdW5kZWZpbmVkIHx8IE51bWJlci5pc05hTih0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0JpdHJhdGUpKSA/IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93Qml0cmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5sb3dCaXRyYXRlID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA8IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93Qml0cmF0ZSB8fCBOdW1iZXIuaXNOYU4odGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5sb3dCaXRyYXRlKSkgPyB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0JpdHJhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmhpZ2hCaXRyYXRlID09IHVuZGVmaW5lZCB8fCBOdW1iZXIuaXNOYU4odGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZSkpID8gdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUgPiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmhpZ2hCaXRyYXRlKSA/IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEJpdHJhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5hdmdCaXRyYXRlID0gOCAqICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWQgLSB0aGlzLmxhc3RWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWQpIC8gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMudGltZXN0YW1wIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy50aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmF2Z0JpdHJhdGUgPSBNYXRoLmZsb29yKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYXZnQml0cmF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXJhdGUgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkKSAvICgodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXAgLSB0aGlzLmxhc3RWaWRlb1N0YXRzLnRpbWVzdGFtcCkgLyAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXJhdGUgPSBNYXRoLmZsb29yKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVyYXRlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0ZyYW1lcmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0ZyYW1lcmF0ZSA9PSB1bmRlZmluZWQgfHwgTnVtYmVyLmlzTmFOKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93RnJhbWVyYXRlKSkgPyB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lcmF0ZSA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93RnJhbWVyYXRlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0ZyYW1lcmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lcmF0ZSA8IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93RnJhbWVyYXRlKSA/IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVyYXRlIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5sb3dGcmFtZXJhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoRnJhbWVyYXRlID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEZyYW1lcmF0ZSA9PSB1bmRlZmluZWQgfHwgTnVtYmVyLmlzTmFOKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEZyYW1lcmF0ZSkpID8gdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXJhdGUgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmhpZ2hGcmFtZXJhdGU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEZyYW1lcmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lcmF0ZSA8IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEZyYW1lcmF0ZSkgPyB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lcmF0ZSA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEZyYW1lcmF0ZTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmF2ZXJhZ2VGcmFtZVJhdGUgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQpIC8gKCh0aGlzLmluYm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCAtIHRoaXMubGFzdFZpZGVvU3RhdHMudGltZXN0YW1wU3RhcnQpIC8gMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYXZlcmFnZUZyYW1lUmF0ZSA9IE1hdGguZmxvb3IodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5hdmVyYWdlRnJhbWVSYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0VmlkZW9TdGF0cyA9IHsgLi4udGhpcy5pbmJvdW5kVmlkZW9TdGF0cyB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cy5ieXRlc1JlY2VpdmVkID0gc3RhdC5ieXRlc1JlY2VpdmVkXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cy5qaXR0ZXIgPSBzdGF0LmppdHRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLnBhY2tldHNMb3N0ID0gc3RhdC5wYWNrZXRzbG9zdDtcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLnRpbWVzdGFtcCA9IHN0YXQudGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIktpbmQgaXMgbm90IGhhbmRsZWRcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqIFxuICAgICAqIFByb2Nlc3MgdGhlIG91dGJvdW5kIFJUUCBBdWRpbyBhbmQgVmlkZW8gRGF0YSAgXG4gICAgICovXG4gICAgaGFuZGxlUmVtb3RlT3V0Qm91bmQoc3RhdDogYW55KSB7XG4gICAgICAgIHN3aXRjaCAoc3RhdC5raW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwidmlkZW9cIjpcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudDtcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5pZCA9IHN0YXQuaWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMubG9jYWxJZCA9IHN0YXQubG9jYWxJZDtcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5wYWNrZXRzU2VudCA9IHN0YXQucGFja2V0c1NlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMucmVtb3RlVGltZXN0YW1wID0gc3RhdC5yZW1vdGVUaW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMudGltZXN0YW1wID0gc3RhdC50aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBcbiAgICAgKiBQcm9jZXNzIHRoZSBJbmJvdW5kIFZpZGVvIFRyYWNrIERhdGEgIFxuICAgICAqL1xuICAgIGhhbmRsZVRyYWNrKHN0YXQ6IGFueSkge1xuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc0Ryb3BwZWQgPSBzdGF0LmZyYW1lc0Ryb3BwZWQ7XG4gICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVzUmVjZWl2ZWQgPSBzdGF0LmZyYW1lc1JlY2VpdmVkO1xuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc0Ryb3BwZWRQZXJjZW50YWdlID0gc3RhdC5mcmFtZXNEcm9wcGVkIC8gc3RhdC5mcmFtZXNSZWNlaXZlZCAqIDEwMDtcbiAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZUhlaWdodCA9IHN0YXQuZnJhbWVIZWlnaHQ7XG4gICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVXaWR0aCA9IHN0YXQuZnJhbWVXaWR0aDtcbiAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZUhlaWdodFN0YXJ0ID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVIZWlnaHRTdGFydCA9PSBudWxsKSA/IHN0YXQuZnJhbWVIZWlnaHQgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lSGVpZ2h0U3RhcnQ7XG4gICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVXaWR0aFN0YXJ0ID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVXaWR0aFN0YXJ0ID09IG51bGwpID8gc3RhdC5mcmFtZVdpZHRoIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZVdpZHRoU3RhcnRcbiAgICB9XG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsIi8qKiBcbiAqIElDRSBDYW5kaWRhdGUgUGFpciBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxuICovXG5leHBvcnQgY2xhc3MgQ2FuZGlkYXRlUGFpclN0YXRzIHtcbiAgICBieXRlc1JlY2VpdmVkOiBudW1iZXI7XG4gICAgYnl0ZXNTZW50OiBudW1iZXI7XG4gICAgbG9jYWxDYW5kaWRhdGVJZDogc3RyaW5nO1xuICAgIHJlbW90ZUNhbmRpZGF0ZUlkOiBzdHJpbmc7XG4gICAgbm9taW5hdGVkOiBib29sZWFuO1xuICAgIHJlYWRhYmxlOiBib29sZWFuO1xuICAgIHdyaXRhYmxlOiBib29sZWFuO1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgY3VycmVudFJvdW5kVHJpcFRpbWU6IG51bWJlcjtcbn1cbiIsIi8qKiBcbiAqIElDRSBDYW5kaWRhdGUgU3RhdCBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxuICovXG5leHBvcnQgY2xhc3MgQ2FuZGlkYXRlU3RhdCB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBpZDogc3RyaW5nO1xuICAgIGFkZHJlc3M6IHN0cmluZztcbiAgICBjYW5kaWRhdGVUeXBlOiBzdHJpbmc7XG4gICAgcG9ydDogbnVtYmVyO1xuICAgIHByb3RvY29sOiBcInRjcFwiIHwgXCJ1ZHBcIlxufSIsIi8qKiBcbiAqIERhdGEgQ2hhbm5lbCBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxuICovXG5leHBvcnQgY2xhc3MgZGF0YUNoYW5uZWxTdGF0cyB7XG4gICAgYnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xuICAgIGJ5dGVzU2VudDogbnVtYmVyO1xuICAgIGRhdGFDaGFubmVsSWRlbnRpZmllcjogbnVtYmVyO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBtZXNzYWdlc1JlY2VpdmVkOiBudW1iZXI7XG4gICAgbWVzc2FnZXNTZW50OiBudW1iZXI7XG4gICAgcHJvdG9jb2w6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xufSIsIi8qKiBcbiAqIEluYm91bmQgQXVkaW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcbiAqL1xuZXhwb3J0IGNsYXNzIGluYm91bmRBdWRpb1N0YXRzIHtcbiAgICBieXRlc1JlY2VpdmVkOiBudW1iZXI7XG4gICAgaml0dGVyOiBudW1iZXI7XG4gICAgcGFja2V0c0xvc3Q6IG51bWJlcjtcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbn0iLCIvKiogXG4gKiBJbmJvdW5kIFZpZGVvIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XG4gKi9cbmV4cG9ydCBjbGFzcyBpbmJvdW5kVmlkZW9TdGF0cyB7XG4gICAgcmVjZWl2ZVRvQ29tcG9zaXRlTXM6IG51bWJlciA9IDA7XG4gICAgdGltZXN0YW1wOiBudW1iZXIgPSAwO1xuICAgIGJ5dGVzUmVjZWl2ZWQ6IG51bWJlciA9IDA7XG4gICAgZnJhbWVzRGVjb2RlZDogbnVtYmVyID0gMDtcbiAgICBwYWNrZXRzTG9zdDogbnVtYmVyID0gMDtcbiAgICBieXRlc1JlY2VpdmVkU3RhcnQ6IG51bWJlciA9IDA7XG4gICAgZnJhbWVzRGVjb2RlZFN0YXJ0OiBudW1iZXIgPSAwO1xuICAgIHRpbWVzdGFtcFN0YXJ0OiBudW1iZXIgPSAwO1xuICAgIGJpdHJhdGU6IG51bWJlciA9IDA7XG4gICAgbG93Qml0cmF0ZTogbnVtYmVyID0gMDtcbiAgICBoaWdoQml0cmF0ZTogbnVtYmVyID0gMDtcbiAgICBhdmdCaXRyYXRlOiBudW1iZXIgPSAwO1xuICAgIGZyYW1lcmF0ZTogbnVtYmVyID0gMDtcbiAgICBsb3dGcmFtZXJhdGU6IG51bWJlciA9IDA7XG4gICAgaGlnaEZyYW1lcmF0ZTogbnVtYmVyID0gMDtcbiAgICBhdmVyYWdlRnJhbWVSYXRlOiBudW1iZXIgPSAwO1xuICAgIGZyYW1lc0Ryb3BwZWQ6IG51bWJlciA9IDA7XG4gICAgZnJhbWVzUmVjZWl2ZWQ6IG51bWJlciA9IDA7XG4gICAgZnJhbWVzRHJvcHBlZFBlcmNlbnRhZ2U6IG51bWJlciA9IDA7XG4gICAgZnJhbWVIZWlnaHQ6IG51bWJlciA9IDA7XG4gICAgZnJhbWVXaWR0aDogbnVtYmVyID0gMDtcbiAgICBmcmFtZUhlaWdodFN0YXJ0OiBudW1iZXIgPSAwO1xuICAgIGZyYW1lV2lkdGhTdGFydDogbnVtYmVyID0gMDtcbiAgICBqaXR0ZXI6IG51bWJlciA9IDA7XG59IiwiLyoqIFxuICogT3V0Ym91bmQgVmlkZW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcbiAqL1xuZXhwb3J0IGNsYXNzIE91dEJvdW5kVmlkZW9TdGF0cyB7XG4gICAgYnl0ZXNTZW50OiBudW1iZXI7XG4gICAgaWQ6IHN0cmluZztcbiAgICBsb2NhbElkOiBzdHJpbmc7XG4gICAgcGFja2V0c1NlbnQ6IG51bWJlcjtcbiAgICByZW1vdGVUaW1lc3RhbXA6IG51bWJlcjtcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbn0iLCJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgQWdncmVnYXRlZFN0YXRzIH0gZnJvbSBcIi4vQWdncmVnYXRlZFN0YXRzXCI7XG5pbXBvcnQgeyBNaWNDb250cm9sbGVyIH0gZnJvbSBcIi4uL01pY1BsYXllci9NaWNDb250cm9sbGVyXCI7XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgUGVlciBDb25uZWN0aW9uIFxuICovXG5leHBvcnQgY2xhc3MgUGVlckNvbm5lY3Rpb25Db250cm9sbGVyIHtcbiAgICBwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb247XG4gICAgYWdncmVnYXRlZFN0YXRzOiBBZ2dyZWdhdGVkU3RhdHM7XG4gICAgZm9yY2VUdXJuOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFJUQyBQZWVyIENvbm5lY3Rpb24gY2xpZW50XG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBQZWVyIGNvbm5lY3Rpb24gT3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFJUQ0NvbmZpZ3VyYXRpb24sIHVybFBhcmFtczogVVJMU2VhcmNoUGFyYW1zKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdHVybiBzdGF0dXMgXG4gICAgICAgIHRoaXMuZm9yY2VUdXJuID0gdXJsUGFyYW1zLmhhcygnRm9yY2VUVVJOJyk7XG5cbiAgICAgICAgLy8gaWYgdXNpbmcgVFVSTiBzZXQgdGhlIGljZSB0cmFuc3BvcnQgcG9saWN5IHRvIHJlbGF5IGZvciB0aGUgb3B0aW9uc1xuICAgICAgICBpZiAodGhpcy5mb3JjZVR1cm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRm9yY2luZyBUVVJOIHVzYWdlIGJ5IHNldHRpbmcgSUNFIFRyYW5zcG9ydCBQb2xpY3kgaW4gcGVlciBjb25uZWN0aW9uIGNvbmZpZy5cIik7XG4gICAgICAgICAgICBvcHRpb25zLmljZVRyYW5zcG9ydFBvbGljeSA9IFwicmVsYXlcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJ1aWxkIGEgbmV3IHBlZXIgY29ubmVjdGlvbiB3aXRoIHRoZSBvcHRpb25zXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24ob3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub25zaWduYWxpbmdzdGF0ZWNoYW5nZSA9IHRoaXMuaGFuZGxlU2lnbmFsU3RhdGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IHRoaXMuaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSA9IHRoaXMuaGFuZGxlSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbnRyYWNrID0gdGhpcy5oYW5kbGVPblRyYWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub25pY2VjYW5kaWRhdGUgPSB0aGlzLmhhbmRlbEljZUNhbmRpZGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRTdGF0cyA9IG5ldyBBZ2dyZWdhdGVkU3RhdHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gb2ZmZXIgZm9yIHRoZSBXZWIgUlRDIGhhbmRzaGFrZSBhbmQgc2VuZCB0aGUgb2ZmZXIgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxuICAgICAqIEBwYXJhbSBvZmZlck9wdGlvbnMgLSBSVEMgT2ZmZXIgT3B0aW9uc1xuICAgICAqL1xuICAgIGNyZWF0ZU9mZmVyKG9mZmVyT3B0aW9uczogUlRDT2ZmZXJPcHRpb25zLCB1c2VNaWM6IGJvb2xlYW4pIHtcbiAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJDcmVhdGUgT2ZmZXJcIik7XG5cbiAgICAgICAgdGhpcy5zZXR1cFRyYWNrc1RvU2VuZEFzeW5jKHVzZU1pYykuZmluYWxseSgoKSA9PiB7IH0pO1xuXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIob2ZmZXJPcHRpb25zKS50aGVuKChvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93VGV4dE92ZXJsYXlDb25uZWN0aW5nKCk7XG4gICAgICAgICAgICBvZmZlci5zZHAgPSB0aGlzLm11bmdlT2ZmZXIob2ZmZXIuc2RwLCB1c2VNaWMpO1xuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIHRoaXMub25TZW5kV2ViUlRDT2ZmZXIob2ZmZXIpO1xuICAgICAgICB9KS5jYXRjaCgob25SZWplY3RlZFJlYXNvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3dUZXh0T3ZlcmxheVNldHVwRmFpbHVyZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBBZ2dyZWdhdGVkIFN0YXRzIGFuZCB0aGVuIGZpcmUgYSBvblZpZGVvIFN0YXRzIGV2ZW50XG4gICAgICovXG4gICAgZ2VuZXJhdGVTdGF0cygpIHtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5nZXRTdGF0cyhudWxsKS50aGVuKChTdGF0c0RhdGE6IFJUQ1N0YXRzUmVwb3J0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRTdGF0cy5wcm9jZXNzU3RhdHMoU3RhdHNEYXRhKTtcbiAgICAgICAgICAgIHRoaXMub25WaWRlb1N0YXRzKHRoaXMuYWdncmVnYXRlZFN0YXRzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgVGhlIFBlZXIgQ29ubmVjdGlvblxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5wZWVyQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5jbG9zZSgpXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vZGlmeSB0aGUgU2Vzc2lvbiBEZXNjcmlwdG9yIFxuICAgICAqIEBwYXJhbSBzZHAgLSBTZXNzaW9uIERlc2NyaXB0b3IgYXMgYSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gdXNlTWljIC0gSXMgdGhlIG1pY3JvcGhvbmUgaW4gdXNlXG4gICAgICogQHJldHVybnMgQSBtb2RpZmllZCBTZXNzaW9uIERlc2NyaXB0b3JcbiAgICAgKi9cbiAgICBtdW5nZU9mZmVyKHNkcDogc3RyaW5nLCB1c2VNaWM6IGJvb2xlYW4pIHtcbiAgICAgICAgbGV0IHRlbXAgPSBzZHA7XG4gICAgICAgIHRlbXAucmVwbGFjZSgvKGE9Zm10cDpcXGQrIC4qbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9LiopXFxyXFxuL2dtLCBcIiQxO3gtZ29vZ2xlLXN0YXJ0LWJpdHJhdGU9MTAwMDA7eC1nb29nbGUtbWF4LWJpdHJhdGU9MTAwMDAwXFxyXFxuXCIpO1xuICAgICAgICB0ZW1wLnJlcGxhY2UoJ3VzZWluYmFuZGZlYz0xJywgJ3VzZWluYmFuZGZlYz0xO3N0ZXJlbz0xO3Nwcm9wLW1heGNhcHR1cmVyYXRlPTQ4MDAwJyk7XG5cbiAgICAgICAgLy8gSW5jcmVhc2UgdGhlIGNhcHR1cmUgcmF0ZSBvZiBhdWRpbyBzbyB3ZSBjYW4gaGF2ZSBoaWdoZXIgcXVhbGl0eSBhdWRpbyBvdmVyIG1pY1xuICAgICAgICBpZiAodXNlTWljKSB7XG4gICAgICAgICAgICB0ZW1wID0gdGVtcC5yZXBsYWNlKCd1c2VpbmJhbmRmZWM9MScsICd1c2VpbmJhbmRmZWM9MTtzcHJvcC1tYXhjYXB0dXJlcmF0ZT00ODAwMDttYXhhdmVyYWdlYml0cmF0ZT01MTAwMDAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZW1wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgUmVtb3RlIERlc2NyaXB0b3IgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlciB0byB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvbiBcbiAgICAgKiBAcGFyYW0gc2RwQW5zd2VyIC0gUlRDIFNlc3Npb24gRGVzY3JpcHRvciBmcm9tIHRoZSBTaWduYWxpbmcgU2VydmVyXG4gICAgICovXG4gICAgaGFuZGxlQW5zd2VyKHNkcEFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLnNldFJlbW90ZURlc2NyaXB0aW9uKHNkcEFuc3dlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBhIEljZSBDYW5kaWRhdGUgaXMgcmVjZWl2ZWQgYWRkIHRvIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uIFxuICAgICAqIEBwYXJhbSBpY2VDYW5kaWRhdGUgLSBSVEMgSWNlIENhbmRpZGF0ZSBmcm9tIHRoZSBTaWduYWxpbmcgU2VydmVyXG4gICAgICovXG4gICAgaGFuZGxlT25JY2UoaWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcbiAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJwZWVyY29ubmVjdGlvbiBoYW5kbGVPbkljZVwiKVxuXG4gICAgICAgIC8vIC8vIGlmIGZvcmNpbmcgVFVSTiwgcmVqZWN0IGFueSBjYW5kaWRhdGVzIG5vdCByZWxheVxuICAgICAgICBpZiAodGhpcy5mb3JjZVR1cm4pIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG5vIHJlbGF5IGFkZHJlc3MgaXMgZm91bmQsIGlmIHNvLCB3ZSBhcmUgYXNzdW1pbmcgaXQgbWVhbnMgbm8gVFVSTiBzZXJ2ZXJcbiAgICAgICAgICAgIGlmIChpY2VDYW5kaWRhdGUuY2FuZGlkYXRlLmluZGV4T2YoXCJyZWxheVwiKSA8IDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEcm9wcGluZyBjYW5kaWRhdGUgYmVjYXVzZSBpdCB3YXMgbm90IFRVUk4gcmVsYXkuXCIsIFwifCBUeXBlPVwiLCBpY2VDYW5kaWRhdGUudHlwZSwgXCJ8IFByb3RvY29sPVwiLCBpY2VDYW5kaWRhdGUucHJvdG9jb2wsIFwifCBBZGRyZXNzPVwiLCBpY2VDYW5kaWRhdGUuYWRkcmVzcywgXCJ8IFBvcnQ9XCIsIGljZUNhbmRpZGF0ZS5wb3J0LCBcInxcIilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gU2lnbmFsaW5nIHNlcnZlciBzdGF0ZSBDaGFuZ2VzXG4gICAgICogQHBhcmFtIHN0YXRlIC0gU2lnbmFsaW5nIFNlcnZlciBTdGF0ZSBDaGFuZ2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVTaWduYWxTdGF0ZUNoYW5nZShzdGF0ZTogRXZlbnQpIHtcbiAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coJ3NpZ25hbGluZyBzdGF0ZSBjaGFuZ2U6ICcgKyBzdGF0ZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgSWNlIENvbm5lY3Rpb24gU3RhdGUgQ2hhbmdlc1xuICAgICAqIEBwYXJhbSBzdGF0ZSAtIEljZSBDb25uZWN0aW9uIFN0YXRlXG4gICAgICovXG4gICAgaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZygnaWNlIGNvbm5lY3Rpb24gc3RhdGUgY2hhbmdlOiAnICsgc3RhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBJY2UgR2F0aGVyaW5nIFN0YXRlIENoYW5nZXNcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBJY2UgR2F0aGVyaW5nIFN0YXRlIENoYW5nZVxuICAgICAqL1xuICAgIGhhbmRsZUljZUdhdGhlcmluZ1N0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZygnaWNlIGdhdGhlcmluZyBzdGF0ZSBjaGFuZ2U6ICcgKyBKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyB0aGUgb25UcmFjayBtZXRob2RcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgd2ViUnRjIHRyYWNrIGV2ZW50IFxuICAgICAqL1xuICAgIGhhbmRsZU9uVHJhY2soZXZlbnQ6IFJUQ1RyYWNrRXZlbnQpIHtcbiAgICAgICAgdGhpcy5vblRyYWNrKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uUGVlckljZUNhbmRpZGF0ZSBcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgcGVlciBpY2UgY2FuZGlkYXRlXG4gICAgICovXG4gICAgaGFuZGVsSWNlQ2FuZGlkYXRlKGV2ZW50OiBSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50KSB7XG4gICAgICAgIHRoaXMub25QZWVySWNlQ2FuZGlkYXRlKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uVHJhY2sgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0gdHJhY2tFdmVudCAtIFRoZSB3ZWJSdGMgdHJhY2sgZXZlbnRcbiAgICAgKi9cbiAgICBvblRyYWNrKHRyYWNrRXZlbnQ6IFJUQ1RyYWNrRXZlbnQpIHsgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvblBlZXJJY2VDYW5kaWRhdGUgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0gcGVlckNvbm5lY3Rpb25JY2VFdmVudCAtIFRoZSBwZWVyIGljZSBjYW5kaWRhdGVcbiAgICAgKi9cbiAgICBvblBlZXJJY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb25JY2VFdmVudDogUlRDUGVlckNvbm5lY3Rpb25JY2VFdmVudCkgeyB9XG5cblxuICAgIC8qKlxuICAgICAqIFNldHVwIHRyYWNrcyBvbiB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvbiBcbiAgICAgKi9cbiAgICBhc3luYyBzZXR1cFRyYWNrc1RvU2VuZEFzeW5jKHVzZU1pYzogYm9vbGVhbikge1xuXG4gICAgICAgIGxldCBoYXNUcmFuc2NlaXZlcnMgPSB0aGlzLnBlZXJDb25uZWN0aW9uLmdldFRyYW5zY2VpdmVycygpLmxlbmd0aCA+IDA7XG5cbiAgICAgICAgLy8gU2V0dXAgYSB0cmFuc2NlaXZlciBmb3IgZ2V0dGluZyBVRSB2aWRlb1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZFRyYW5zY2VpdmVyKFwidmlkZW9cIiwgeyBkaXJlY3Rpb246IFwicmVjdm9ubHlcIiB9KTtcblxuICAgICAgICAvLyBTZXR1cCBhIHRyYW5zY2VpdmVyIGZvciBzZW5kaW5nIG1pYyBhdWRpbyB0byBVRSBhbmQgcmVjZWl2aW5nIGF1ZGlvIGZyb20gVUVcbiAgICAgICAgaWYgKCF1c2VNaWMpIHtcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24uYWRkVHJhbnNjZWl2ZXIoXCJhdWRpb1wiLCB7IGRpcmVjdGlvbjogXCJyZWN2b25seVwiIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBzZXQgdGhlIGF1ZGlvIG9wdGlvbnMgYmFzZWQgb24gbWljIHVzYWdlXG4gICAgICAgICAgICBsZXQgYXVkaW9PcHRpb25zID0gdXNlTWljID9cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9HYWluQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxDb3VudDogMSxcbiAgICAgICAgICAgICAgICAgICAgZWNob0NhbmNlbGxhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGxhdGVuY3k6IDAsXG4gICAgICAgICAgICAgICAgICAgIG5vaXNlU3VwcHJlc3Npb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVSYXRlOiA0ODAwMCxcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlU2l6ZTogMTYsXG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZTogMS4wXG4gICAgICAgICAgICAgICAgfSA6IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBzZXQgdGhlIG1lZGlhIHNlbmQgb3B0aW9ucyBcbiAgICAgICAgICAgIGxldCBtZWRpYVNlbmRPcHRpb25zOiBNZWRpYVN0cmVhbUNvbnN0cmFpbnRzID0ge1xuICAgICAgICAgICAgICAgIHZpZGVvOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdWRpbzogYXVkaW9PcHRpb25zLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3RlIHVzaW5nIG1pYyBvbiBhbmRyb2lkIGNocm9tZSByZXF1aXJlcyBTU0wgb3IgY2hyb21lOi8vZmxhZ3MvIFwidW5zYWZlbHktdHJlYXQtaW5zZWN1cmUtb3JpZ2luLWFzLXNlY3VyZVwiXG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShtZWRpYVNlbmRPcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNjZWl2ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRyYW5zY2VpdmVyIG9mIHRoaXMucGVlckNvbm5lY3Rpb24uZ2V0VHJhbnNjZWl2ZXJzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2NlaXZlciAmJiB0cmFuc2NlaXZlci5yZWNlaXZlciAmJiB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjayAmJiB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjay5raW5kID09PSBcImF1ZGlvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWNrIG9mIHN0cmVhbS5nZXRUcmFja3MoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCAmJiB0cmFjay5raW5kID09IFwiYXVkaW9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZGVyLnJlcGxhY2VUcmFjayh0cmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5kaXJlY3Rpb24gPSBcInNlbmRyZWN2XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2Ygc3RyZWFtLmdldFRyYWNrcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCAmJiB0cmFjay5raW5kID09IFwiYXVkaW9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24uYWRkVHJhbnNjZWl2ZXIodHJhY2ssIHsgZGlyZWN0aW9uOiBcInNlbmRyZWN2XCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZFRyYW5zY2VpdmVyKFwiYXVkaW9cIiwgeyBkaXJlY3Rpb246IFwicmVjdm9ubHlcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuZCBvdmVycmlkZSBldmVudCBmb3Igd2hlbiB0aGUgdmlkZW8gc3RhdHMgYXJlIGZpcmVkXG4gICAgICogQHBhcmFtIGV2ZW50IC0gQWdncmVnYXRlZCBTdGF0c1xuICAgICAqL1xuICAgIG9uVmlkZW9TdGF0cyhldmVudDogQWdncmVnYXRlZFN0YXRzKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEV2ZW50IHRvIHNlbmQgdGhlIFJUQyBvZmZlciB0byB0aGUgU2lnbmFsaW5nIHNlcnZlclxuICAgICAqIEBwYXJhbSBvZmZlciAtIFJUQyBPZmZlclxuICAgICAqL1xuICAgIG9uU2VuZFdlYlJUQ09mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7IH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIGZvciBzaG93aW5nIHRoZSBQZWVyIGNvbm5lY3Rpb24gY29ubmVjdGluZyBPdmVybGF5XG4gICAgICovXG4gICAgc2hvd1RleHRPdmVybGF5Q29ubmVjdGluZygpIHsgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHNob3dpbmcgdGhlIFBlZXIgY29ubmVjdGlvbiBGYWlsZWQgb3ZlcmxheVxuICAgICAqL1xuICAgIHNob3dUZXh0T3ZlcmxheVNldHVwRmFpbHVyZSgpIHsgfVxufSIsIi8qKiBcbiAqIENsYXNzIHRvIGhvbGQgdGhlIHN0cmVhbSBzdGF0cyBkYXRhIGNvbWluZyBpbiBmcm9tIHdlYlJ0Y1xuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtU3RhdHMge1xuICAgIGlkOiBzdHJpbmdcbiAgICBzdHJlYW1JZGVudGlmaWVyOiBzdHJpbmdcbiAgICB0aW1lc3RhbXA6IG51bWJlclxuICAgIHRyYWNrSWRzOiBzdHJpbmdbXVxufSIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IFVlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9VZU1lc3NhZ2VUeXBlc1wiO1xuaW1wb3J0IHsgVWVEZXNjcmlwdG9yIH0gZnJvbSBcIi4vVWVEZXNjcmlwdG9yXCI7XG5cbi8qKlxuICogSGFuZGxlcyBTZW5kaW5nIGNvbnRyb2wgbWVzc2FnZXMgdG8gdGhlIFVFIEluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBVZUNvbnRyb2xNZXNzYWdlIGV4dGVuZHMgVWVEZXNjcmlwdG9yIHtcblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSBEYXRhIENoYW5uZWwgQ29udHJvbGxlclxuXHQgKi9cblx0Y29uc3RydWN0b3IoZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcblx0XHRzdXBlcihkYXRhQ2hhbm5lbENvbnRyb2xsZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgSUZyYW1lIFJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqL1xuXHRTZW5kSUZyYW1lUmVxdWVzdCgpIHtcblx0XHRsZXQgcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KFtVZU1lc3NhZ2VUeXBlLmlGcmFtZVJlcXVlc3RdKTtcblx0XHR0aGlzLnNlbmREYXRhKHBheWxvYWQuYnVmZmVyKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgUmVxdWVzdCB0byBUYWtlIFF1YWxpdHkgQ29udHJvbCB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICovXG5cdFNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2woKSB7XG5cdFx0bGV0IHBheWxvYWQgPSBuZXcgVWludDhBcnJheShbVWVNZXNzYWdlVHlwZS5yZXF1ZXN0UXVhbGl0eUNvbnRyb2xdKTtcblx0XHR0aGlzLnNlbmREYXRhKHBheWxvYWQuYnVmZmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kIE1heCBGUFMgUmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICovXG5cdFNlbmRNYXhGcHNSZXF1ZXN0KCkge1xuXHRcdGxldCBwYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkoW1VlTWVzc2FnZVR5cGUubWF4RnBzUmVxdWVzdF0pO1xuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgQXZlcmFnZSBCaXRyYXRlIFJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqL1xuXHRTZW5kQXZlcmFnZUJpdHJhdGVSZXF1ZXN0KCkge1xuXHRcdGxldCBwYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkoW1VlTWVzc2FnZVR5cGUuYXZlcmFnZUJpdHJhdGVSZXF1ZXN0XSk7XG5cdFx0dGhpcy5zZW5kRGF0YShwYXlsb2FkLmJ1ZmZlcik7XG5cdH1cblxuXHQvKipcblx0ICogU2VuZCBhIFN0YXJ0IFN0cmVhbWluZyBNZXNzYWdlIHRvIHRoZSBVRSBJbnN0YW5jZVxuXHQgKi9cblx0U2VuZFN0YXJ0U3RyZWFtaW5nKCkge1xuXHRcdGxldCBwYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkoW1VlTWVzc2FnZVR5cGUuc3RhcnRTdHJlYW1pbmddKTtcblx0XHR0aGlzLnNlbmREYXRhKHBheWxvYWQuYnVmZmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kIGEgU3RvcCBTdHJlYW1pbmcgTWVzc2FnZSB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICovXG5cdFNlbmRTdG9wU3RyZWFtaW5nKCkge1xuXHRcdGxldCBwYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkoW1VlTWVzc2FnZVR5cGUuc3RvcFN0cmVhbWluZ10pO1xuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgYSBMYXRlbmN5IFRlc3QgdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqIEBwYXJhbSBTdGFydFRpbWVNcyAtIFN0YXJ0IFRpbWUgb2YgdGhlIExhdGVuY3kgdGVzdFxuXHQgKi9cblx0c2VuZExhdGVuY3lUZXN0KFN0YXJ0VGltZU1zOiBudW1iZXIpIHtcblx0XHRsZXQgcGF5bG9hZCA9IHtcblx0XHRcdFN0YXJ0VGltZTogU3RhcnRUaW1lTXMsXG5cdFx0fTtcblxuXHRcdHRoaXMuc2VuZERlc2NyaXB0b3IoVWVNZXNzYWdlVHlwZS5sYXRlbmN5VGVzdCwgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgYSBSZXF1ZXN0IEluaXRpYWwgU2V0dGluZ3MgdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqL1xuXHRTZW5kUmVxdWVzdEluaXRpYWxTZXR0aW5ncygpIHtcblx0XHRsZXQgcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KFtVZU1lc3NhZ2VUeXBlLnJlcXVlc3RJbml0aWFsU2V0dGluZ3NdKTtcblx0XHR0aGlzLnNlbmREYXRhKHBheWxvYWQuYnVmZmVyKTtcblx0fVxufSIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcblxuLyoqXG4gKiBIYW5kbGVzIHNlbmRpbmcgYSBtZXNzYWdlIHRvIHRoZSBVRSBJbnN0YW5jZVxuICovXG5leHBvcnQgY2xhc3MgVWVEYXRhTWVzc2FnZSB7XG5cbiAgICBkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcjtcblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSBEYXRhIENoYW5uZWwgQ29udHJvbGxlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyKXtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIgPSBkYXRhQ2hhbm5lbENvbnRyb2xsZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBBcnJheSBCdWZmZXIgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIGJ1ZmZlciAtIE1lc3NhZ2UgQnVmZmVyIEFycmF5XG4gICAgICovXG4gICAgc2VuZERhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5zZW5kRGF0YShidWZmZXIpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgVWVEYXRhTWVzc2FnZSB9IGZyb20gXCIuL1VlRGF0YU1lc3NhZ2VcIjtcblxuLyoqXG4gKiBIYW5kbGVzIHNlbmRpbmcgYSBEZXNjcmlwdG9yIHRvIHRoZSBVRSBJbnN0YW5jZSBcbiAqL1xuZXhwb3J0IGNsYXNzIFVlRGVzY3JpcHRvciBleHRlbmRzIFVlRGF0YU1lc3NhZ2Uge1xuXG4gICAgbG9nZ2luZzpib29sZWFuO1xuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0gZGF0YWNoYW5uZWxDb250cm9sbGVyIC0gRGF0YSBDaGFubmVsIENvbnRyb2xsZXJcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGFjaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyKSB7XG4gICAgICAgIHN1cGVyKGRhdGFjaGFubmVsQ29udHJvbGxlcik7XG4gICAgICAgIHRoaXMubG9nZ2luZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSBEZXNjcmlwdG9yIHRvIHRoZSBVRSBJbnN0YW5jZXNcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVR5cGUgLSBVRSBNZXNzYWdlIFR5cGVcbiAgICAgKiBAcGFyYW0gSlNPRGVzY3JpcHRvciAtIERlc2NyaXB0b3IgTWVzc2FnZSBhcyBKU09OXG4gICAgICovXG4gICAgc2VuZERlc2NyaXB0b3IobWVzc2FnZVR5cGU6IG51bWJlciwgSlNPRGVzY3JpcHRvcjogc3RyaW5nKSB7XG4gICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiU2VuZGluZzogXCIgKyBKU09EZXNjcmlwdG9yKTtcbiAgICAgICAgLy8gQWRkIHRoZSBVVEYtMTYgSlNPTiBzdHJpbmcgdG8gdGhlIGFycmF5IGJ5dGUgYnVmZmVyLCBnb2luZyB0d28gYnl0ZXMgYXRcbiAgICAgICAgLy8gYSB0aW1lLlxuICAgICAgICBsZXQgZGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSArIDIgKyAyICogSlNPRGVzY3JpcHRvci5sZW5ndGgpKTtcbiAgICAgICAgbGV0IGJ5dGVJZHggPSAwO1xuICAgICAgICBkYXRhLnNldFVpbnQ4KGJ5dGVJZHgsIG1lc3NhZ2VUeXBlKTtcbiAgICAgICAgYnl0ZUlkeCsrO1xuICAgICAgICBkYXRhLnNldFVpbnQxNihieXRlSWR4LCBKU09EZXNjcmlwdG9yLmxlbmd0aCwgdHJ1ZSk7XG4gICAgICAgIGJ5dGVJZHggKz0gMjtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEpTT0Rlc2NyaXB0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGVJZHgsIEpTT0Rlc2NyaXB0b3IuY2hhckNvZGVBdChpKSwgdHJ1ZSk7XG4gICAgICAgICAgICBieXRlSWR4ICs9IDI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlbmREYXRhKGRhdGEuYnVmZmVyKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVWVEZXNjcmlwdG9yIH0gZnJvbSBcIi4vVWVEZXNjcmlwdG9yXCI7XG5pbXBvcnQgeyBVZU1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vVWVNZXNzYWdlVHlwZXNcIjtcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBTZW5kaW5nIG9mIGEgVUkgRGVzY3JpcHRvciB0byB0aGUgVUUgSW5zdGFuY2VcbiAqL1xuZXhwb3J0IGNsYXNzIFVlRGVzY3JpcHRvclVpIGV4dGVuZHMgVWVEZXNjcmlwdG9yIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSBEYXRhIENoYW5uZWwgQ29udHJvbGxlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyKSB7XG4gICAgICAgIHN1cGVyKGRhdGFDaGFubmVsQ29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIHNldCByZXMgVUkgRGVzY3JpcHRvciB0byBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSB3aWR0aCAtIFdpZHRoIG9mIHJlc1xuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBIZWlnaHQgb2YgcmVzXG4gICAgICovXG4gICAgc2VuZFVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcInNldHJlcyBcIiArIHdpZHRoICsgXCJ4XCIgKyBoZWlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSBzdGF0IGZwcyBVSSBEZXNjcmlwdG9yIHRvIFVFIEluc3RhbmNlXG4gICAgICovXG4gICAgc2VuZFNob3dGcHMoKSB7XG4gICAgICAgIHRoaXMuc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKFwic3RhdCBmcHNcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIEVuY29kZXIgUmF0ZSBDb250cm9sIHRvIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIHJhdGVDb250cm9sIC0gUmF0ZSBDb250cm9sIFwiQ0JSXCIgfCBcIlZCUlwiIHwgXCJDb25zdFFQXCIgXG4gICAgICovXG4gICAgc2VuZEVuY29kZXJSYXRlQ29udHJvbChyYXRlQ29udHJvbDogXCJDQlJcIiB8IFwiVkJSXCIgfCBcIkNvbnN0UVBcIikge1xuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuUmF0ZUNvbnRyb2wgXCIgKyByYXRlQ29udHJvbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBFbmNvZGVyIFRhcmdldCBCaXQgUmF0ZSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gdGFyZ2V0Qml0UmF0ZSAtIFNlbmQgYSBUYXJnZXQgQml0IFJhdGVcbiAgICAgKi9cbiAgICBzZW5kRW5jb2RlclRhcmdldEJpdFJhdGUodGFyZ2V0Qml0UmF0ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKFwiUGl4ZWxTdHJlYW1pbmcuRW5jb2Rlci5UYXJnZXRCaXRyYXRlIFwiICsgKHRhcmdldEJpdFJhdGUgPiAwID8gdGFyZ2V0Qml0UmF0ZSA6IC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBFbmNvZGVyIE1heCBCaXQgUmF0ZSBWQlIgdG8gVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbWF4Qml0UmF0ZSAtIFNlbmQgQSBNYXggQml0IFJhdGVcbiAgICAgKi9cbiAgICBzZW5kRW5jb2Rlck1heEJpdHJhdGVWYnIobWF4Qml0UmF0ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKFwiUGl4ZWxTdHJlYW1pbmcuRW5jb2Rlci5NYXhCaXRyYXRlVkJSIFwiICsgKG1heEJpdFJhdGUgPiAwID8gbWF4Qml0UmF0ZSA6IDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIHRoZSBNaW5pbXVtIFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1pblFQIC0gTWluaW11bSBRdWFudGl6YXRpb24gUGFyYW1ldGVyIFxuICAgICAqL1xuICAgIHNlbmRFbmNvZGVyTWluUVAobWluUVA6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuTWluUVAgXCIgKyBtaW5RUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgTWF4aW11bSBRdWFudGl6YXRpb24gUGFyYW1ldGVyIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtYXhRUCAtIE1heGltdW0gUXVhbnRpemF0aW9uIFBhcmFtZXRlciBcbiAgICAgKi9cbiAgICBzZW5kRW5jb2Rlck1heFFQKG1heFFQOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5FbmNvZGVyLk1heFFQIFwiICsgbWF4UVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgRW5hYmxlIEZpbGxlciBEYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBlbmFibGUgLSBUcnVlXG4gICAgICovXG4gICAgc2VuZEVuY29kZXJFbmFibGVGaWxsZXJEYXRhKGVuYWJsZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuRW5hYmxlRmlsbGVyRGF0YSBcIiArIE51bWJlcihlbmFibGUpLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBFbmNvZGVyIE11bHRpUGFzcyB0byBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtdWx0aVBhc3MgLSBNdWx0aVBhc3MgXCJESVNBQkxFRFwiIHwgXCJRVUFSVEVSXCIgfCBcIkZVTExcIlxuICAgICAqL1xuICAgIHNlbmRFbmNvZGVyTXVsdGlQYXNzKG11bHRpUGFzczogXCJESVNBQkxFRFwiIHwgXCJRVUFSVEVSXCIgfCBcIkZVTExcIikge1xuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuTXVsdGlwYXNzIFwiICsgbXVsdGlQYXNzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgV2ViIFJUQyBEZWdyYWRhdGlvbiBQcmVmZXJlbmNlIHRvIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIERlZ3JhZGF0aW9uUHJlZmVyZW5jZSAtIERlZ3JhZGF0aW9uIFByZWZlcmVuY2UgXCJCQUxBTkNFRFwiIHwgXCJNQUlOVEFJTl9GUkFNRVJBVEVcIiB8IFwiTUFJTlRBSU5fUkVTT0xVVElPTlwiXG4gICAgICovXG4gICAgc2VuZFdlYlJ0Y0RlZ3JhZGF0aW9uUHJlZmVyZW5jZShEZWdyYWRhdGlvblByZWZlcmVuY2U6IFwiQkFMQU5DRURcIiB8IFwiTUFJTlRBSU5fRlJBTUVSQVRFXCIgfCBcIk1BSU5UQUlOX1JFU09MVVRJT05cIikge1xuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLldlYlJUQy5EZWdyYWRhdGlvblByZWZlcmVuY2UgXCIgKyBEZWdyYWRhdGlvblByZWZlcmVuY2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBNYXggRlBTIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBNYXhGcHMgLSBXZWIgUlRDIE1heCBGcmFtZXMgUGVyIFNlY29uZFxuICAgICAqL1xuICAgIHNlbmRXZWJSdGNNYXhGcHMoTWF4RnBzOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5XZWJSVEMuTWF4RnBzIFwiICsgTWF4RnBzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFNlbmRzIHRoZSBGUFMgdG8gdGhlIFVFIEluc3RhbmNlIHVzZWQgdW4gVUUgNS4wXG4gICAgKiBAcGFyYW0gRnBzIC0gV2ViIFJUQyBGcmFtZXMgUGVyIFNlY29uZFxuICAgICovXG4gICAgc2VuZFdlYlJ0Y0ZwcyhGcHM6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLldlYlJUQy5GcHMgXCIgKyBGcHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBNaW5pbXVtIGJpdCByYXRlIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBNaW5CaXRyYXRlIC0gV2ViIFJUQyBNaW5pbXVtIEJpdHJhdGVcbiAgICAgKi9cbiAgICBzZW5kV2ViUnRjTWluQml0cmF0ZShNaW5CaXRyYXRlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5XZWJSVEMuTWluQml0cmF0ZSBcIiArIE1pbkJpdHJhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBNYXhpbXVtIGJpdCByYXRlIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBNYXhCaXRyYXRlIC0gV2ViIFJUQyBNYXhpbXVtIEJpdHJhdGVcbiAgICAgKi9cbiAgICBzZW5kV2ViUnRjTWF4Qml0cmF0ZShNYXhCaXRyYXRlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5XZWJSVEMuTWF4Qml0cmF0ZSBcIiArIE1heEJpdHJhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBMb3cgUXVhbnRpemF0aW9uIFBhcmFtZXRlciBUaHJlc2hvbGQgbGV2ZWwgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIExvd1FwVGhyZXNob2xkIC0gTG93IFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgVGhyZXNob2xkIExldmVsXG4gICAgICovXG4gICAgc2VuZFdlYlJ0Y0xvd1FwVGhyZXNob2xkKExvd1FwVGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5XZWJSVEMuTG93UXBUaHJlc2hvbGQgXCIgKyBMb3dRcFRocmVzaG9sZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgdGhlIEhpZ2ggUXVhbnRpemF0aW9uIFBhcmFtZXRlciBUaHJlc2hvbGQgbGV2ZWwgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIEhpZ2hRcFRocmVzaG9sZCAtIEhpZ2ggUXVhbnRpemF0aW9uIFBhcmFtZXRlciBUaHJlc2hvbGQgTGV2ZWxcbiAgICAgKi9cbiAgICBzZW5kV2ViUnRjSGlnaFFwVGhyZXNob2xkKEhpZ2hRcFRocmVzaG9sZDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKFwiUGl4ZWxTdHJlYW1pbmcuV2ViUlRDLkhpZ2hRcFRocmVzaG9sZCBcIiArIEhpZ2hRcFRocmVzaG9sZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBkZXNjcmlwdG9yIHN0cmluZyB0byB0aGUgVUUgSW50ZXJhY3Rpb24gSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZGVzY3JpcHRvciAtIHRoZSBTdHJpbmcgZGVzY3JpcHRvciB0byBzZW5kXG4gICAgICovXG4gICAgc2VuZFVpSW50ZXJhY3Rpb24oZGVzY3JpcHRvcjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3IoVWVNZXNzYWdlVHlwZS51aUludGVyYWN0aW9uLCBkZXNjcmlwdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIGNvbnNvbGUgZGVzY3JpcHRvclxuICAgICAqIEBwYXJhbSBkZXNjcmlwdG9yIC0gVGhlIHN0cmluZyBkZXNjcmlwdG9yIHRvIHNlbmRcbiAgICAgKi9cbiAgICBzZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oZGVzY3JpcHRvcjogc3RyaW5nKSB7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgQ29uc29sZTogZGVzY3JpcHRvclxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VuZFVpSW50ZXJhY3Rpb24oSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVWVEYXRhTWVzc2FnZSB9IGZyb20gXCIuL1VlRGF0YU1lc3NhZ2VcIjtcbmltcG9ydCB7IFVlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9VZU1lc3NhZ2VUeXBlc1wiO1xuXG4vKipcbiAqIFRoZSBjbGFzcyBmb3IgaGFuZGxpbmcgVUUgSW5wdXQgR2FtZVBhZCBNZXNzYWdlcy4gSXQgaW1wbGVtZW50cyB0aGUgVWVEYXRhTWVzc2FnZSBjbGFzc1xuICovXG5leHBvcnQgY2xhc3MgVWVJbnB1dEdhbWVQYWRNZXNzYWdlIGV4dGVuZHMgVWVEYXRhTWVzc2FnZSB7XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZGF0YWNoYW5uZWxDb250cm9sbGVyIC0gRGF0YSBDaGFubmVsIENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhY2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcikge1xuICAgICAgICBzdXBlcihkYXRhY2hhbm5lbENvbnRyb2xsZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIGNvbnRyb2xsZXIgYnV0dG9uIHByZXNzIGRhdGEgdGhyb3VnaCB0aGUgZGF0YSBjaGFubmVsIFxuICAgICAqIEBwYXJhbSBjb250cm9sbGVySW5kZXggLSB0aGUgY29udHJvbGxlciBpbmRleCBudW1iZXIgXG4gICAgICogQHBhcmFtIGJ1dHRvbkluZGV4IC0gdGhlIGJ1dHRvbiBpbmRleCBudW1iZXJcbiAgICAgKiBAcGFyYW0gaXNSZXBlYXQgLSBpcyB0aGlzIGEgcmVwZWF0IHByZXNzIFxuICAgICAqL1xuICAgIHNlbmRDb250cm9sbGVyQnV0dG9uUHJlc3NlZChjb250cm9sbGVySW5kZXg6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlciwgaXNSZXBlYXQ6IGJvb2xlYW4pIHtcbiAgICAgICAgbGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDQpKTtcbiAgICAgICAgRGF0YS5zZXRVaW50OCgwLCBVZU1lc3NhZ2VUeXBlLmdhbWVwYWRCdXR0b25QcmVzc2VkKTtcbiAgICAgICAgRGF0YS5zZXRVaW50OCgxLCBjb250cm9sbGVySW5kZXgpO1xuICAgICAgICBEYXRhLnNldFVpbnQ4KDIsIGJ1dHRvbkluZGV4KTtcbiAgICAgICAgRGF0YS5zZXRVaW50OCgzLCBOdW1iZXIoaXNSZXBlYXQpLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgY29udHJvbGxlciBidXR0b24gcmVsZWFzZSBkYXRhIHRocm91Z2ggdGhlIGRhdGEgY2hhbm5lbCBcbiAgICAgKiBAcGFyYW0gY29udHJvbGxlckluZGV4IC0gdGhlIGNvbnRyb2xsZXIgaW5kZXggbnVtYmVyIFxuICAgICAqIEBwYXJhbSBidXR0b25JbmRleCAgLSB0aGUgYnV0dG9uIGluZGV4IG51bWJlclxuICAgICAqL1xuICAgIHNlbmRDb250cm9sbGVyQnV0dG9uUmVsZWFzZWQoY29udHJvbGxlckluZGV4OiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgbGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDMpKTtcbiAgICAgICAgRGF0YS5zZXRVaW50OCgwLCBVZU1lc3NhZ2VUeXBlLmdhbWVwYWRCdXR0b25SZWxlYXNlZCk7XG4gICAgICAgIERhdGEuc2V0VWludDgoMSwgY29udHJvbGxlckluZGV4KTtcbiAgICAgICAgRGF0YS5zZXRVaW50OCgyLCBidXR0b25JbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBjb250cm9sbGVyIGF4aXMgZGF0YSB0aHJvdWdoIHRoZSBkYXRhIGNoYW5uZWwgXG4gICAgICogQHBhcmFtIGNvbnRyb2xsZXJJbmRleCAtIHRoZSBjb250cm9sbGVyIGluZGV4IG51bWJlciBcbiAgICAgKiBAcGFyYW0gYXhpc0luZGV4IC0gdGhlIGF4aXMgaW5kZXggbnVtYmVyIFxuICAgICAqIEBwYXJhbSBhbmFsb2dWYWx1ZSAtIHRoZSBhbmFsb2d1ZSB2YWx1ZSBudW1iZXIgXG4gICAgICovXG4gICAgc2VuZENvbnRyb2xsZXJBeGlzTW92ZShjb250cm9sbGVySW5kZXg6IG51bWJlciwgYXhpc0luZGV4OiBudW1iZXIsIGFuYWxvZ1ZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgbGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDExKSk7XG4gICAgICAgIERhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5nYW1lcGFkQW5hbG9nKTtcbiAgICAgICAgRGF0YS5zZXRVaW50OCgxLCBjb250cm9sbGVySW5kZXgpO1xuICAgICAgICBEYXRhLnNldFVpbnQ4KDIsIGF4aXNJbmRleCk7XG4gICAgICAgIERhdGEuc2V0RmxvYXQ2NCgzLCBhbmFsb2dWYWx1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5zZW5kRGF0YShEYXRhLmJ1ZmZlcik7XG4gICAgfVxuXG5cblxufVxuIiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVWVEYXRhTWVzc2FnZSB9IGZyb20gXCIuL1VlRGF0YU1lc3NhZ2VcIjtcbmltcG9ydCB7IFVlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9VZU1lc3NhZ2VUeXBlc1wiXG5cbi8qKlxuICogSGFuZGxlcyBzZW5kaW5nIEtleWJvYXJkIE1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZVxuICovXG5leHBvcnQgY2xhc3MgVWVJbnB1dEtleWJvYXJkTWVzc2FnZSBleHRlbmRzIFVlRGF0YU1lc3NhZ2V7XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZGF0YWNoYW5uZWxDb250cm9sbGVyIC0gRGF0YSBDaGFubmVsIENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhY2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcil7XG4gICAgICAgIHN1cGVyKGRhdGFjaGFubmVsQ29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgdGhlIGtleSBkb3duIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBrZXlDb2RlIC0gS2V5IGNvZGVcbiAgICAgKiBAcGFyYW0gaXNSZXBlYXQgLSBJcyB0aGUga2V5IHJlcGVhdGluZ1xuICAgICAqL1xuICAgIHNlbmRLZXlEb3duKGtleUNvZGU6bnVtYmVyLCBpc1JlcGVhdDpCb29sZWFuKXtcbiAgICAgICAgbGV0IFBheWxvYWQgPSBuZXcgVWludDhBcnJheShbVWVNZXNzYWdlVHlwZS5rZXlEb3duLCBrZXlDb2RlLCBOdW1iZXIoaXNSZXBlYXQpLnZhbHVlT2YoKV0pO1xuICAgICAgICB0aGlzLnNlbmREYXRhKFBheWxvYWQuYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyB0aGUgS2V5IFVwIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBrZXlDb2RlIC0gS2V5IGNvZGVcbiAgICAgKi9cbiAgICBzZW5kS2V5VXAoa2V5Q29kZTogbnVtYmVyKXtcbiAgICAgICAgbGV0IHBheWxvYWQgPSBuZXcgVWludDhBcnJheShbVWVNZXNzYWdlVHlwZS5rZXlVcCwga2V5Q29kZV0pO1xuICAgICAgICB0aGlzLnNlbmREYXRhKHBheWxvYWQuYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyB0aGUga2V5IHByZXNzIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBDaGFyQ29kZSAtIGNoYXJhY3RlciBjb2RlIG9mIGEga2V5IHByZXNzZWRcbiAgICAgKi9cbiAgICBzZW5kS2V5UHJlc3MoQ2hhckNvZGU6bnVtYmVyKXtcbiAgICAgICAgbGV0IGRhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDMpKTtcbiAgICAgICAgZGF0YS5zZXRVaW50OCgwLCBVZU1lc3NhZ2VUeXBlLmtleVByZXNzKTtcbiAgICAgICAgZGF0YS5zZXRVaW50MTYoMSwgQ2hhckNvZGUsIHRydWUpO1xuICAgICAgICB0aGlzLnNlbmREYXRhKGRhdGEuYnVmZmVyKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVWVEYXRhTWVzc2FnZSB9IGZyb20gXCIuL1VlRGF0YU1lc3NhZ2VcIjtcbmltcG9ydCB7IFVlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9VZU1lc3NhZ2VUeXBlc1wiXG5cbi8qKlxuICogSGFuZGxlcyBzZW5kaW5nIE1vdXNlIE1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZVxuICovXG5leHBvcnQgY2xhc3MgVWVJbnB1dE1vdXNlTWVzc2FnZSBleHRlbmRzIFVlRGF0YU1lc3NhZ2Uge1xuXG5cdC8qKlxuXHQqIEBwYXJhbSBkYXRhY2hhbm5lbENvbnRyb2xsZXIgLSBEYXRhIGNoYW5uZWwgQ29udHJvbGxlclxuXHQqL1xuXHRjb25zdHJ1Y3RvcihkYXRhY2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcikge1xuXHRcdHN1cGVyKGRhdGFjaGFubmVsQ29udHJvbGxlcik7XG5cdH1cblxuXHQvKipcblx0ICogU2VuZCBNb3VzZSBFbnRlciB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICovXG5cdHNlbmRNb3VzZUVudGVyKCkge1xuXHRcdGxldCBEYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSk7XG5cdFx0RGF0YS5zZXRVaW50OCgwLCBVZU1lc3NhZ2VUeXBlLm1vdXNlRW50ZXIpO1xuXHRcdHRoaXMuc2VuZERhdGEoRGF0YS5idWZmZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgTW91c2UgTGVhdmUgdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqL1xuXHRzZW5kTW91c2VMZWF2ZSgpIHtcblx0XHRsZXQgRGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpO1xuXHRcdERhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5tb3VzZUxlYXZlKTtcblx0XHR0aGlzLnNlbmREYXRhKERhdGEuYnVmZmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kIE1vdXNlIERvd24gdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqIEBwYXJhbSBidXR0b24gLSBNb3VzZSBCdXR0b24gXG5cdCAqIEBwYXJhbSBYIC0gWCBDb29yZGluYXRlIFZhbHVlIG9mIG1vdXNlIFxuXHQgKiBAcGFyYW0gWSAtIFkgQ29vcmRpbmF0ZSBWYWx1ZSBvZiBtb3VzZSBcblx0ICovXG5cdHNlbmRNb3VzZURvd24oYnV0dG9uOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XG5cdFx0bGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDYpKTtcblx0XHREYXRhLnNldFVpbnQ4KDAsIFVlTWVzc2FnZVR5cGUubW91c2VEb3duKTtcblx0XHREYXRhLnNldFVpbnQ4KDEsIGJ1dHRvbik7XG5cdFx0RGF0YS5zZXRVaW50MTYoMiwgWCwgdHJ1ZSk7XG5cdFx0RGF0YS5zZXRVaW50MTYoNCwgWSwgdHJ1ZSk7XG5cdFx0dGhpcy5zZW5kRGF0YShEYXRhLmJ1ZmZlcik7XG5cdH1cblxuXHQvKipcblx0ICogU2VuZCBNb3VzZSBVcCB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBcblx0ICogQHBhcmFtIFggLSBYIENvb3JkaW5hdGUgVmFsdWUgb2YgbW91c2UgXG5cdCAqIEBwYXJhbSBZIC0gWSBDb29yZGluYXRlIFZhbHVlIG9mIG1vdXNlIFxuXHQgKi9cblx0c2VuZE1vdXNlVXAoYnV0dG9uOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XG5cdFx0bGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDYpKTtcblx0XHREYXRhLnNldFVpbnQ4KDAsIFVlTWVzc2FnZVR5cGUubW91c2VVcCk7XG5cdFx0RGF0YS5zZXRVaW50OCgxLCBidXR0b24pO1xuXHRcdERhdGEuc2V0VWludDE2KDIsIFgsIHRydWUpO1xuXHRcdERhdGEuc2V0VWludDE2KDQsIFksIHRydWUpO1xuXHRcdHRoaXMuc2VuZERhdGEoRGF0YS5idWZmZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgTW91c2UgTW92ZSB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICogQHBhcmFtIG1vdXNlQ29yZFggLSBYIE1vdXNlIENvb3JkaW5hdGVcblx0ICogQHBhcmFtIG1vdXNlQ29yZFkgLSBZIE1vdXNlIENvb3JkaW5hdGVcblx0ICogQHBhcmFtIGRlbHRhWCAtIFggTW91c2UgRGVsdGEgQ29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0gZGVsdGFZIC0gWSBNb3VzZSBEZWx0YSBDb29yZGluYXRlXG5cdCAqL1xuXHRzZW5kTW91c2VNb3ZlKG1vdXNlQ29yZFg6IG51bWJlciwgbW91c2VDb3JkWTogbnVtYmVyLCBkZWx0YVg6IG51bWJlciwgZGVsdGFZOiBudW1iZXIpIHtcblx0XHRsZXQgRGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoOSkpO1xuXHRcdERhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5tb3VzZU1vdmUpO1xuXHRcdERhdGEuc2V0VWludDE2KDEsIG1vdXNlQ29yZFgsIHRydWUpO1xuXHRcdERhdGEuc2V0VWludDE2KDMsIG1vdXNlQ29yZFksIHRydWUpO1xuXHRcdERhdGEuc2V0SW50MTYoNSwgZGVsdGFYLCB0cnVlKTtcblx0XHREYXRhLnNldEludDE2KDcsIGRlbHRhWSwgdHJ1ZSk7XG5cdFx0dGhpcy5zZW5kRGF0YShEYXRhLmJ1ZmZlcik7XG5cdH1cblxuXHQvKipcblx0ICogU2VuZCBNb3VzZSB3aGVlbCBldmVudCB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICogQHBhcmFtIGRlbHRhWSAtIE1vdXNlIFdoZWVsIGRlbHRhIFlcblx0ICogQHBhcmFtIFggLSBNb3VzZSBYIENvb3JkaW5hdGVcblx0ICogQHBhcmFtIFkgLSBNb3VzZSBZIENvb3JkaW5hdGVcblx0ICovXG5cdHNlbmRNb3VzZVdoZWVsKGRlbHRhWTogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xuXHRcdGxldCBEYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig3KSk7XG5cdFx0RGF0YS5zZXRVaW50OCgwLCBVZU1lc3NhZ2VUeXBlLm1vdXNlV2hlZWwpO1xuXHRcdERhdGEuc2V0SW50MTYoMSwgZGVsdGFZLCB0cnVlKTtcblx0XHREYXRhLnNldFVpbnQxNigzLCBYLCB0cnVlKTtcblx0XHREYXRhLnNldFVpbnQxNig1LCBZLCB0cnVlKTtcblx0XHR0aGlzLnNlbmREYXRhKERhdGEuYnVmZmVyKTtcblx0fVxufSIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQgfSBmcm9tIFwiLi4vSW5wdXRzL0Nvb3JkaW5hdGVEYXRhXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xuaW1wb3J0IHsgVWVEYXRhTWVzc2FnZSB9IGZyb20gXCIuL1VlRGF0YU1lc3NhZ2VcIjtcbmltcG9ydCB7IFVlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9VZU1lc3NhZ2VUeXBlc1wiXG5cbi8qKlxuICogSGFuZGxlcyBTZW5kaW5nIFRvdWNoIG1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZVxuICovXG5leHBvcnQgY2xhc3MgVWVJbnB1dFRvdWNoTWVzc2FnZSBleHRlbmRzIFVlRGF0YU1lc3NhZ2Uge1xuXG4gICAgZmluZ2VyczogbnVtYmVyW107XG4gICAgZmluZ2Vyc0lkczogeyBba2V5OiBudW1iZXJdOiBudW1iZXIgfTtcblxuICAgIHJlYWRvbmx5IHVuc2lnbmVkT3V0T2ZSYW5nZTogbnVtYmVyID0gNjU1MzU7XG4gICAgcmVhZG9ubHkgc2lnbmVkT3V0T2ZSYW5nZTogbnVtYmVyID0gMzI3Njc7XG5cbiAgICBwcmludElucHV0czogYm9vbGVhbjtcblxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGFjaGFubmVsQ29udHJvbGxlciAtIERhdGEgY2hhbm5lbCBDb250cm9sbGVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGF0YWNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcbiAgICAgICAgc3VwZXIoZGF0YWNoYW5uZWxDb250cm9sbGVyKTtcbiAgICAgICAgdGhpcy5maW5nZXJzSWRzID0ge31cbiAgICAgICAgdGhpcy5maW5nZXJzID0gWzksIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEsIDBdO1xuICAgICAgICB0aGlzLnByaW50SW5wdXRzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBUb3VjaCBldmVudCBTdGFydFxuICAgICAqIEBwYXJhbSB0b3VjaGVzIC0gVG91Y2ggTGlzdFxuICAgICAqL1xuICAgIHNlbmRUb3VjaFN0YXJ0KHRvdWNoZXM6IFRvdWNoTGlzdCkge1xuICAgICAgICB0aGlzLnNlbmRUb3VjaChVZU1lc3NhZ2VUeXBlLnRvdWNoU3RhcnQsIHRvdWNoZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgVG91Y2ggZXZlbnQgRW5kXG4gICAgICogQHBhcmFtIHRvdWNoZXMgLSBUb3VjaCBMaXN0XG4gICAgICovXG4gICAgc2VuZFRvdWNoRW5kKHRvdWNoZXM6IFRvdWNoTGlzdCkge1xuICAgICAgICB0aGlzLnNlbmRUb3VjaChVZU1lc3NhZ2VUeXBlLnRvdWNoRW5kLCB0b3VjaGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIFRvdWNoIGV2ZW50IE1vdmVcbiAgICAgKiBAcGFyYW0gdG91Y2hlcyAtIFRvdWNoIExpc3RcbiAgICAgKi9cbiAgICBzZW5kVG91Y2hNb3ZlKHRvdWNoZXM6IFRvdWNoTGlzdCkge1xuICAgICAgICB0aGlzLnNlbmRUb3VjaChVZU1lc3NhZ2VUeXBlLnRvdWNoTW92ZSwgdG91Y2hlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBTZW5kaW5nIHRoZSBUb3VjaCBFdmVudCB0byB0aGUgVUUgSW5zdGFuY2UgdmlhIHRoZSBEYXRhIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gdG91Y2hlcyAtIFRvdWNoIExpc3RcbiAgICAgKi9cbiAgICBzZW5kVG91Y2godG91Y2hUeXBlOiBudW1iZXIsIHRvdWNoZXM6IFRvdWNoTGlzdCkge1xuICAgICAgICBsZXQgZGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMiArIDcgKiB0b3VjaGVzLmxlbmd0aCkpO1xuICAgICAgICBkYXRhLnNldFVpbnQ4KDAsIHRvdWNoVHlwZSk7XG4gICAgICAgIGRhdGEuc2V0VWludDgoMSwgdG91Y2hlcy5sZW5ndGgpO1xuICAgICAgICBsZXQgYnl0ZSA9IDI7XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdG91Y2hlcy5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgbGV0IHRvdWNoID0gdG91Y2hlc1t0XTtcbiAgICAgICAgICAgIGxldCB4ID0gdG91Y2guY2xpZW50WDsvLy0gb2Zmc2V0TGVmdDtcbiAgICAgICAgICAgIGxldCB5ID0gdG91Y2guY2xpZW50WTsvLy0gb2Zmc2V0VG9wO1xuXG4gICAgICAgICAgICBsZXQgY29vcmQgPSB0aGlzLm5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQoeCwgeSk7XG4gICAgICAgICAgICAvLyAgICAgIGJ5dGUgPSAgMlxuICAgICAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZSwgY29vcmQueCwgdHJ1ZSk7XG4gICAgICAgICAgICBieXRlICs9IDI7XG4gICAgICAgICAgICAvLyAgICAgIGJ5dGUgPSAgNFxuICAgICAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZSwgY29vcmQueSwgdHJ1ZSk7XG4gICAgICAgICAgICBieXRlICs9IDI7XG4gICAgICAgICAgICAvLyAgICAgIGJ5dGUgPSAgNlxuICAgICAgICAgICAgZGF0YS5zZXRVaW50OChieXRlLCB0aGlzLmZpbmdlcnNJZHNbdG91Y2guaWRlbnRpZmllcl0pO1xuICAgICAgICAgICAgYnl0ZSArPSAxO1xuICAgICAgICAgICAgLy8gICAgICBieXRlID0gIDdcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDgoYnl0ZSwgMjU1ICogdG91Y2guZm9yY2UpOyAgIC8vIGZvcmNlIGlzIGJldHdlZW4gMC4wIGFuZCAxLjAgc28gcXVhbnRpemUgaW50byBieXRlLlxuICAgICAgICAgICAgYnl0ZSArPSAxO1xuICAgICAgICAgICAgLy8gICAgICBieXRlID0gIDhcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDgoYnl0ZSwgY29vcmQuaW5SYW5nZSA/IDEgOiAwKTsgLy8gbWFyayB0aGUgdG91Y2ggYXMgaW4gdGhlIHBsYXllciBvciBub3RcbiAgICAgICAgICAgIGJ5dGUgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbmREYXRhKGRhdGEuYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUTyBET1xuICAgICAqIEBwYXJhbSB4IC0gWCBDb29yZGluYXRlXG4gICAgICogQHBhcmFtIHkgLSBZIENvb3JkaW5hdGVcbiAgICAgKiBAcmV0dXJucyAtIE5vcm1hbGlzZWQgYW5kIFF1YW50aXNlZCBVbnNpZ25lZCB2YWx1ZXNcbiAgICAgKi9cbiAgICBub3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkKHg6IG51bWJlciwgeTogbnVtYmVyKTogTm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCB7XG4gICAgICAgIGxldCBwbGF5ZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcicpO1xuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gcGxheWVyRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpO1xuXG4gICAgICAgIGlmIChwbGF5ZXJFbGVtZW50ICYmIHZpZGVvRWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgcGxheWVyQXNwZWN0UmF0aW8gPSBwbGF5ZXJFbGVtZW50LmNsaWVudEhlaWdodCAvIHBsYXllckVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBsZXQgdmlkZW9Bc3BlY3RSYXRpbyA9IHZpZGVvRWxlbWVudFswXS52aWRlb0hlaWdodCAvIHZpZGVvRWxlbWVudFswXS52aWRlb1dpZHRoO1xuXG4gICAgICAgICAgICAvLyBVbnNpZ25lZCBYWSBwb3NpdGlvbnMgYXJlIHRoZSByYXRpbyAoMC4wLi4xLjApIGFsb25nIGEgdmlld3BvcnQgYXhpcyxcbiAgICAgICAgICAgIC8vIHF1YW50aXplZCBpbnRvIGFuIHVpbnQxNiAoMC4uNjU1MzYpLlxuICAgICAgICAgICAgLy8gU2lnbmVkIFhZIGRlbHRhcyBhcmUgdGhlIHJhdGlvICgtMS4wLi4xLjApIGFsb25nIGEgdmlld3BvcnQgYXhpcyxcbiAgICAgICAgICAgIC8vIHF1YW50aXplZCBpbnRvIGFuIGludDE2ICgtMzI3NjcuLjMyNzY3KS5cbiAgICAgICAgICAgIC8vIFRoaXMgYWxsb3dzIHRoZSBicm93c2VyIHZpZXdwb3J0IGFuZCBjbGllbnQgdmlld3BvcnQgdG8gaGF2ZSBhIGRpZmZlcmVudFxuICAgICAgICAgICAgLy8gc2l6ZS5cbiAgICAgICAgICAgIC8vIEhhY2s6IEN1cnJlbnRseSB3ZSBzZXQgYW4gb3V0LW9mLXJhbmdlIHBvc2l0aW9uIHRvIGFuIGV4dHJlbWUgKDY1NTM1KVxuICAgICAgICAgICAgLy8gYXMgd2UgY2FuJ3QgeWV0IGFjY3VyYXRlbHkgZGV0ZWN0IG1vdXNlIGVudGVyIGFuZCBsZWF2ZSBldmVudHNcbiAgICAgICAgICAgIC8vIHByZWNpc2VseSBpbnNpZGUgYSB2aWRlbyB3aXRoIGFuIGFzcGVjdCByYXRpbyB3aGljaCBjYXVzZXMgbWF0dGVzLlxuICAgICAgICAgICAgaWYgKHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpbykge1xuXG4gICAgICAgICAgICAgICAgbGV0IHJhdGlvID0gcGxheWVyQXNwZWN0UmF0aW8gLyB2aWRlb0FzcGVjdFJhdGlvO1xuICAgICAgICAgICAgICAgIC8vIFVuc2lnbmVkLlxuICAgICAgICAgICAgICAgIGxldCBub3JtYWxpemVkWCA9IHggLyBwbGF5ZXJFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgICAgIGxldCBub3JtYWxpemVkWSA9IHJhdGlvICogKHkgLyBwbGF5ZXJFbGVtZW50LmNsaWVudEhlaWdodCAtIDAuNSkgKyAwLjU7XG5cbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFggPCAwLjAgfHwgbm9ybWFsaXplZFggPiAxLjAgfHwgbm9ybWFsaXplZFkgPCAwLjAgfHwgbm9ybWFsaXplZFkgPiAxLjApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluUmFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy51bnNpZ25lZE91dE9mUmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluUmFuZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBub3JtYWxpemVkWCAqICh0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZSArIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogbm9ybWFsaXplZFkgKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmludElucHV0cykge1xuICAgICAgICAgICAgICAgICAgICBMb2dnZXIudmVyYm9zZUxvZygnU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpbycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCByYXRpbyA9IHZpZGVvQXNwZWN0UmF0aW8gLyBwbGF5ZXJBc3BlY3RSYXRpbztcbiAgICAgICAgICAgICAgICAvLyBVbnNpZ25lZC4gXG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZWRYID0gcmF0aW8gKiAoeCAvIHBsYXllckVsZW1lbnQuY2xpZW50V2lkdGggLSAwLjUpICsgMC41O1xuICAgICAgICAgICAgICAgIGxldCBub3JtYWxpemVkWSA9IHkgLyBwbGF5ZXJFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFggPCAwLjAgfHwgbm9ybWFsaXplZFggPiAxLjAgfHwgbm9ybWFsaXplZFkgPCAwLjAgfHwgbm9ybWFsaXplZFkgPiAxLjApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluUmFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogdGhpcy51bnNpZ25lZE91dE9mUmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpblJhbmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogbm9ybWFsaXplZFggKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG5vcm1hbGl6ZWRZICogKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwiLyoqXG4gKiBUaGUgVHlwZSBvZiBtZXNzYWdlIHNlbnQgdG8gdGhlIFVFIGluc3RhbmNlIG92ZXIgdGhlIGRhdGEgY2hhbm5lbFxuICogTXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBQaXhlbFN0cmVhbWluZ1Byb3RvY29sOjpFVG9VRTRNc2cgQysrIGVudW0uXG4gKiB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL0VwaWNHYW1lcy9VbnJlYWxFbmdpbmUvYmxvYi9yZWxlYXNlL0VuZ2luZS9QbHVnaW5zL01lZGlhL1BpeGVsU3RyZWFtaW5nL1NvdXJjZS9QaXhlbFN0cmVhbWluZy9Qcml2YXRlL1Byb3RvY29sRGVmcy5ofSBSZXF1aXJlcyBMb2dpblxuICovXG5leHBvcnQgY2xhc3MgVWVNZXNzYWdlVHlwZSB7XG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdC8qXG5cdCAqIENvbnRyb2wgTWVzc2FnZXMuIFJhbmdlID0gMC4uNDkuXG5cdCAqL1xuXHRzdGF0aWMgaUZyYW1lUmVxdWVzdCA9IDA7XG5cdHN0YXRpYyByZXF1ZXN0UXVhbGl0eUNvbnRyb2wgPSAxO1xuXHRzdGF0aWMgbWF4RnBzUmVxdWVzdCA9IDI7XG5cdHN0YXRpYyBhdmVyYWdlQml0cmF0ZVJlcXVlc3QgPSAzO1xuXHRzdGF0aWMgc3RhcnRTdHJlYW1pbmcgPSA0O1xuXHRzdGF0aWMgc3RvcFN0cmVhbWluZyA9IDU7XG5cdHN0YXRpYyBsYXRlbmN5VGVzdCA9IDY7XG5cdHN0YXRpYyByZXF1ZXN0SW5pdGlhbFNldHRpbmdzID0gNztcblxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQvKlxuXHQgKiBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA1MC4uODkuXG5cdCAqL1xuXG5cdC8vIEdlbmVyaWMgSW5wdXQgTWVzc2FnZXMuIFJhbmdlID0gNTAuLjU5LlxuXHRzdGF0aWMgdWlJbnRlcmFjdGlvbiA9IDUwO1xuXHRzdGF0aWMgY29tbWFuZCA9IDUxO1xuXG5cdC8vIEtleWJvYXJkIElucHV0IE1lc3NhZ2UuIFJhbmdlID0gNjAuLjY5LlxuXHRzdGF0aWMga2V5RG93biA9IDYwO1xuXHRzdGF0aWMga2V5VXAgPSA2MTtcblx0c3RhdGljIGtleVByZXNzID0gNjI7XG5cblx0Ly8gTW91c2UgSW5wdXQgTWVzc2FnZXMuIFJhbmdlID0gNzAuLjc5LlxuXHRzdGF0aWMgbW91c2VFbnRlciA9IDcwO1xuXHRzdGF0aWMgbW91c2VMZWF2ZSA9IDcxO1xuXHRzdGF0aWMgbW91c2VEb3duID0gNzI7XG5cdHN0YXRpYyBtb3VzZVVwID0gNzM7XG5cdHN0YXRpYyBtb3VzZU1vdmUgPSA3NDtcblx0c3RhdGljIG1vdXNlV2hlZWwgPSA3NTtcblxuXHQvLyBUb3VjaCBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA4MC4uODkuXG5cdHN0YXRpYyB0b3VjaFN0YXJ0ID0gODA7XG5cdHN0YXRpYyB0b3VjaEVuZCA9IDgxO1xuXHRzdGF0aWMgdG91Y2hNb3ZlID0gODI7XG5cblx0Ly8gR2FtZXBhZCBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA5MC4uOTlcblx0c3RhdGljIGdhbWVwYWRCdXR0b25QcmVzc2VkID0gOTA7XG5cdHN0YXRpYyBnYW1lcGFkQnV0dG9uUmVsZWFzZWQgPSA5MTtcblx0c3RhdGljIGdhbWVwYWRBbmFsb2cgPSA5MjtcblxuXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbn0iLCIvKipcbiAqIFRoZSBVaSBDb250cm9sbGVyIGNsYXNzIGhhbmRsZXMgYWxsIG1ldGhvZHMgdGhhdCBpbnRlcmFjdCB3aXRoIHRoZSBVSVxuICovXG5leHBvcnQgY2xhc3MgVWlDb250cm9sbGVyIHtcbiAgICBwbGF5ZXJTdHlsZUF0dHJpYnV0ZXM6IHBsYXllclN0eWxlQXR0cmlidXRlcztcbiAgICBvcmllbnRhdGlvbkNoYW5nZVRpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+O1xuICAgIGxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHJlc2l6ZVRpbWVvdXQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcyA9IG5ldyBwbGF5ZXJTdHlsZUF0dHJpYnV0ZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNpemVzIHRoZSBwbGF5ZXIgZWxlbWVudCB0byBmaWxsIHRoZSB3aW5kb3cgXG4gICAgICogQHBhcmFtIHBsYXllckVsZW1lbnQgLSB0aGUgcGxheWVyIERPTSBlbGVtZW50IFxuICAgICAqL1xuICAgIHJlc2l6ZVBsYXllclN0eWxlVG9GaWxsV2luZG93KHBsYXllckVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIGxldCB2aWRlb0VsZW1lbnQgPSBwbGF5ZXJFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiVklERU9cIilbMF0gYXMgSFRNTFZpZGVvRWxlbWVudDtcbiAgICAgICAgLy8gRmlsbCB0aGUgcGxheWVyIGRpc3BsYXkgaW4gd2luZG93LCBrZWVwaW5nIHBpY3R1cmUncyBhc3BlY3QgcmF0aW8uXG4gICAgICAgIGxldCB3aW5kb3dBc3BlY3RSYXRpbyA9IHdpbmRvdy5pbm5lckhlaWdodCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICBsZXQgcGxheWVyQXNwZWN0UmF0aW8gPSBwbGF5ZXJFbGVtZW50LmNsaWVudEhlaWdodCAvIHBsYXllckVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8ga2VlcCB0aGUgdmlkZW8gcmF0aW8gY29ycmVjdCBmb3IgdGhlIHZpZGVvIHN0cmVhbVxuICAgICAgICBsZXQgdmlkZW9XaWR0aDtcbiAgICAgICAgbGV0IHZpZGVvSGVpZ2h0O1xuICAgICAgICBpZiAoIXZpZGVvRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2aWRlb1dpZHRoID0gcGFyc2VJbnQodmlkZW9FbGVtZW50LmdldEF0dHJpYnV0ZShcInZpZGVvV2lkdGhcIikpO1xuICAgICAgICAgICAgdmlkZW9IZWlnaHQgPSBwYXJzZUludCh2aWRlb0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwidmlkZW9IZWlnaHRcIikpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB2aWRlb0FzcGVjdFJhdGlvID0gdmlkZW9IZWlnaHQgLyB2aWRlb1dpZHRoO1xuXG4gICAgICAgIGlmIChpc05hTih2aWRlb0FzcGVjdFJhdGlvKSkge1xuICAgICAgICAgICAgLy9WaWRlbyBpcyBub3QgaW5pdGlhbGlzZWQgeWV0IHNvIHNldCBwbGF5ZXJFbGVtZW50IHRvIHNpemUgb2Ygd2luZG93XG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlVG9wID0gMDtcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlTGVmdCA9IDA7XG4gICAgICAgICAgICBwbGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBcInRvcDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVRvcCArIFwicHg7IGxlZnQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ICsgXCJweDsgd2lkdGg6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCArIFwicHg7IGhlaWdodDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCArIFwicHg7IGN1cnNvcjogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUN1cnNvciArIFwiOyBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQWRkaXRpb25hbCk7XG4gICAgICAgICAgICAvL3BsYXllckVsZW1lbnQuc3R5bGUgPSBcInRvcDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVRvcCArIFwicHg7IGxlZnQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ICsgXCJweDsgd2lkdGg6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCArIFwicHg7IGhlaWdodDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCArIFwicHg7IGN1cnNvcjogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUN1cnNvciArIFwiOyBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQWRkaXRpb25hbDtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3dBc3BlY3RSYXRpbyA8IHBsYXllckFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICAvLyBXaW5kb3cgaGVpZ2h0IGlzIHRoZSBjb25zdHJhaW5pbmcgZmFjdG9yIHNvIHRvIGtlZXAgYXNwZWN0IHJhdGlvIGNoYW5nZSB3aWR0aCBhcHByb3ByaWF0ZWx5XG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoID0gTWF0aC5mbG9vcih3aW5kb3cuaW5uZXJIZWlnaHQgLyB2aWRlb0FzcGVjdFJhdGlvKTtcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgPSAwO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ID0gTWF0aC5mbG9vcigod2luZG93LmlubmVyV2lkdGggLSB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoKSAqIDAuNSk7XG4gICAgICAgICAgICAvL1ZpZGVvIGlzIG5vdyAxMDAlIG9mIHRoZSBwbGF5ZXJFbGVtZW50LCBzbyBzZXQgdGhlIHBsYXllckVsZW1lbnQgc3R5bGVcbiAgICAgICAgICAgIHBsYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIFwidG9wOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlVG9wICsgXCJweDsgbGVmdDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUxlZnQgKyBcInB4OyB3aWR0aDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoICsgXCJweDsgaGVpZ2h0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0ICsgXCJweDsgY3Vyc29yOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQ3Vyc29yICsgXCI7IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVBZGRpdGlvbmFsKVxuICAgICAgICAgICAgLy9wbGF5ZXJFbGVtZW50LnN0eWxlID0gXCJ0b3A6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgKyBcInB4OyBsZWZ0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlTGVmdCArIFwicHg7IHdpZHRoOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVIZWlnaHQgKyBcInB4OyBjdXJzb3I6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVDdXJzb3IgKyBcIjsgXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUFkZGl0aW9uYWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXaW5kb3cgd2lkdGggaXMgdGhlIGNvbnN0cmFpbmluZyBmYWN0b3Igc28gdG8ga2VlcCBhc3BlY3QgcmF0aW8gY2hhbmdlIGhlaWdodCBhcHByb3ByaWF0ZWx5XG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCA9IE1hdGguZmxvb3Iod2luZG93LmlubmVyV2lkdGggKiB2aWRlb0FzcGVjdFJhdGlvKTtcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlVG9wID0gTWF0aC5mbG9vcigod2luZG93LmlubmVySGVpZ2h0IC0gdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVIZWlnaHQpICogMC41KTtcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlTGVmdCA9IDA7XG4gICAgICAgICAgICAvL1ZpZGVvIGlzIG5vdyAxMDAlIG9mIHRoZSBwbGF5ZXJFbGVtZW50LCBzbyBzZXQgdGhlIHBsYXllckVsZW1lbnQgc3R5bGVcbiAgICAgICAgICAgIHBsYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIFwidG9wOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlVG9wICsgXCJweDsgbGVmdDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUxlZnQgKyBcInB4OyB3aWR0aDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoICsgXCJweDsgaGVpZ2h0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0ICsgXCJweDsgY3Vyc29yOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQ3Vyc29yICsgXCI7IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVBZGRpdGlvbmFsKVxuICAgICAgICAgICAgLy9wbGF5ZXJFbGVtZW50LnN0eWxlID0gXCJ0b3A6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgKyBcInB4OyBsZWZ0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlTGVmdCArIFwicHg7IHdpZHRoOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVIZWlnaHQgKyBcInB4OyBjdXJzb3I6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVDdXJzb3IgKyBcIjsgXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUFkZGl0aW9uYWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNpemVzIHRoZSBwbGF5ZXIgZWxlbWVudCB0byBmaXQgdGhlIGFjdHVhbCBzaXplIG9mIHRoZSBzdHJlYW1cbiAgICAgKiBAcGFyYW0gcGxheWVyRWxlbWVudCAtIHRoZSBwbGF5ZXIgRE9NIGVsZW1lbnRcbiAgICAgKi9cbiAgICByZXNpemVQbGF5ZXJTdHlsZVRvQWN0dWFsU2l6ZShwbGF5ZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gPEhUTUxWaWRlb0VsZW1lbnQ+cGxheWVyRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIlZJREVPXCIpWzBdO1xuICAgICAgICBsZXQgdmlkZW9FbGVtZW50TGVuZ3RoO1xuICAgICAgICBpZiAoIXZpZGVvRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRMZW5ndGggPSBwYXJzZUludCh2aWRlb0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwibGVuZ3RoXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlkZW9FbGVtZW50TGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gRGlzcGxheSBpbWFnZSBpbiBpdHMgYWN0dWFsIHNpemVcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggPSB2aWRlb0VsZW1lbnQudmlkZW9XaWR0aDtcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0ID0gdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0O1xuICAgICAgICAgICAgbGV0IFRvcCA9IE1hdGguZmxvb3IoKHdpbmRvdy5pbm5lckhlaWdodCAtIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0KSAqIDAuNSk7XG4gICAgICAgICAgICBsZXQgTGVmdCA9IE1hdGguZmxvb3IoKHdpbmRvdy5pbm5lcldpZHRoIC0gdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCkgKiAwLjUpO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgPSAoVG9wID4gMCkgPyBUb3AgOiAwO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ID0gKExlZnQgPiAwKSA/IExlZnQgOiAwO1xuICAgICAgICAgICAgLy9WaWRlbyBpcyBub3cgMTAwJSBvZiB0aGUgcGxheWVyRWxlbWVudCwgc28gc2V0IHRoZSBwbGF5ZXJFbGVtZW50IHN0eWxlXG4gICAgICAgICAgICBwbGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBcInRvcDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVRvcCArIFwicHg7IGxlZnQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ICsgXCJweDsgd2lkdGg6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCArIFwicHg7IGhlaWdodDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCArIFwicHg7IGN1cnNvcjogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUN1cnNvciArIFwiOyBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQWRkaXRpb25hbClcbiAgICAgICAgICAgIC8vcGxheWVyRWxlbWVudC5zdHlsZSA9IFwidG9wOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlVG9wICsgXCJweDsgbGVmdDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUxlZnQgKyBcInB4OyB3aWR0aDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoICsgXCJweDsgaGVpZ2h0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0ICsgXCJweDsgY3Vyc29yOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQ3Vyc29yICsgXCI7IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVBZGRpdGlvbmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyB0aGUgcGxheWVyIGVsZW1lbnQgdG8gZml0IGFuIGFyYml0cmFyeSBzaXplIFxuICAgICAqIEBwYXJhbSBwbGF5ZXJFbGVtZW50IC0gdGhlIHBsYXllciBET00gZWxlbWVudFxuICAgICAqL1xuICAgIHJlc2l6ZVBsYXllclN0eWxlVG9BcmJpdHJhcnlTaXplKHBsYXllckVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIGxldCB2aWRlb0VsZW1lbnQgPSBwbGF5ZXJFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiVklERU9cIilbMF07XG4gICAgICAgIC8vVmlkZW8gaXMgbm93IDEwMCUgb2YgdGhlIHBsYXllckVsZW1lbnQsIHNvIHNldCB0aGUgcGxheWVyRWxlbWVudCBzdHlsZVxuICAgICAgICBwbGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBcInRvcDogMHB4OyBsZWZ0OiAwcHg7IHdpZHRoOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVIZWlnaHQgKyBcInB4OyBjdXJzb3I6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVDdXJzb3IgKyBcIjsgXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUFkZGl0aW9uYWwpXG4gICAgICAgIC8vcGxheWVyRWxlbWVudC5zdHlsZSA9IFwidG9wOiAwcHg7IGxlZnQ6IDBweDsgd2lkdGg6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCArIFwicHg7IGhlaWdodDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCArIFwicHg7IGN1cnNvcjogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUN1cnNvciArIFwiOyBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQWRkaXRpb25hbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvdmVycmlkZSBmb3Igc2V0dGluZyB1cCB0aGUgbW91c2UgYW5kIGZyZWV6ZUZyYW1lIFxuICAgICAqIEBwYXJhbSBlbGVtZW50IC0gdGhlIHBsYXllciBET00gZWxlbWVudFxuICAgICAqL1xuICAgIHNldFVwTW91c2VBbmRGcmVlemVGcmFtZShlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvdmVycmlkZSBmb3IgdXBkYXRpbmcgdGhlIHZpZGVvIHN0cmVhbSBzaXplXG4gICAgICovXG4gICAgdXBkYXRlVmlkZW9TdHJlYW1TaXplKCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNpemVzIHRoZSBwbGF5ZXIgc3R5bGUgYmFzZWQgb24gdGhlIHdpbmRvdyBoZWlnaHQgYW5kIHdpZHRoIFxuICAgICAqIEByZXR1cm5zIC0gbmlsIGlmIHJlcXVpcmVtZW50cyBhcmUgc2F0aXNmaWVkIFxuICAgICAqL1xuICAgIHJlc2l6ZVBsYXllclN0eWxlKCkge1xuICAgICAgICB2YXIgcGxheWVyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXInKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuICAgICAgICBpZiAoIXBsYXllckVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlVmlkZW9TdHJlYW1TaXplKCk7XG5cbiAgICAgICAgaWYgKHBsYXllckVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmaXhlZC1zaXplJykpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKHBsYXllckVsZW1lbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2hlY2tCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5sYXJnZS1kaXNwbGF5LXRvLWZpbGwtd2luZG93LXRnbCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGxldCB2aWRlb1dpZHRoID0gcGFyc2VJbnQocGxheWVyRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ2aWRlb1dpZHRoXCIpKVxuICAgICAgICBsZXQgdmlkZW9IZWlnaHQgPSBwYXJzZUludChwbGF5ZXJFbGVtZW50LmdldEF0dHJpYnV0ZShcInZpZGVvSGVpZ2h0XCIpKVxuICAgICAgICBsZXQgd2luZG93U21hbGxlclRoYW5QbGF5ZXIgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IHZpZGVvV2lkdGggfHwgd2luZG93LmlubmVySGVpZ2h0IDwgdmlkZW9IZWlnaHQ7XG4gICAgICAgIGlmIChjaGVja0JveCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGNoZWNrQm94LmNoZWNrZWQgfHwgd2luZG93U21hbGxlclRoYW5QbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlVG9GaWxsV2luZG93KHBsYXllckVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlVG9BY3R1YWxTaXplKHBsYXllckVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZVRvQXJiaXRyYXJ5U2l6ZShwbGF5ZXJFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKHBsYXllckVsZW1lbnQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIHRoZSB0aGUgcmVzaXplIHdpbmRvd3MgdGljayBib3ggZXZlbnQgXG4gICAgICovXG4gICAgcmVnaXN0ZXJSZXNpemVUaWNrQm94RXZlbnQoKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlc2l6ZVBsYXllclN0eWxlLmJpbmQodGhpcyksIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLm9uT3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgIGxldCByZXNpemVDaGVja0JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmxhcmdlLWRpc3BsYXktdG8tZmlsbC13aW5kb3ctdGdsJyk7XG4gICAgICAgIGlmIChyZXNpemVDaGVja0JveCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzaXplQ2hlY2tCb3gub25jaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gdGhlIG9yaWVudGF0aW9uIGNoYW5nZSBvZiBhIHdpbmRvdyBjbGVhciB0aGUgdGltZW91dCBcbiAgICAgKi9cbiAgICBvbk9yaWVudGF0aW9uQ2hhbmdlKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5vcmllbnRhdGlvbkNoYW5nZVRpbWVvdXQpO1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uQ2hhbmdlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLnJlc2l6ZVBsYXllclN0eWxlKCkgfSwgNTAwKTtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBwbGF5ZXIgc3R5bGUgYXR0cmlidXRlcyBzbyB0aGV5IGNhbiBiZSBpbnN0YW50aWF0ZWRcbiAqL1xuZXhwb3J0IGNsYXNzIHBsYXllclN0eWxlQXR0cmlidXRlcyB7XG4gICAgc3R5bGVXaWR0aDogbnVtYmVyO1xuICAgIHN0eWxlSGVpZ2h0OiBudW1iZXI7XG4gICAgc3R5bGVUb3A6IG51bWJlcjtcbiAgICBzdHlsZUxlZnQ6IG51bWJlcjtcbiAgICBzdHlsZUN1cnNvciA9ICdkZWZhdWx0JztcbiAgICBzdHlsZUFkZGl0aW9uYWw6IG51bWJlcjtcbn0iLCJpbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vSW5wdXRzL01vdXNlQ29udHJvbGxlclwiXG5pbXBvcnQgeyBJVmlkZW9QbGF5ZXJNb3VzZUludGVyZmFjZSB9IGZyb20gXCIuL1ZpZGVvUGxheWVyTW91c2VJbnRlcmZhY2VcIjtcbmltcG9ydCB7IFVlRGVzY3JpcHRvclVpIH0gZnJvbSBcIi4uL1VlSW5zdGFuY2VNZXNzYWdlL1VlRGVzY3JpcHRvclVpXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xuXG4vKipcbiAqIFZpZGVvIFBsYXllciBDb250cm9sbGVyIGhhbmRsZXMgdGhlIGNyZWF0aW9uIG9mIHRoZSB2aWRlbyBIVE1MIGVsZW1lbnQgYW5kIGFsbCBoYW5kbGVyc1xuICovXG5leHBvcnQgY2xhc3MgVmlkZW9QbGF5ZXJDb250cm9sbGVyIHtcbiAgICB2aWRlb1BsYXllckRpdjogSFRNTERpdkVsZW1lbnQ7XG4gICAgdmlkZW9FbGVtZW50OiBhbnk7XG4gICAgbW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXI7XG4gICAgdWVEZXNjcmlwdG9yVWk6IFVlRGVzY3JpcHRvclVpO1xuICAgIG9uVXBkYXRlUG9zaXRpb246IChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgIHZpZGVvSW5wdXRCaW5kaW5nczogSVZpZGVvUGxheWVyTW91c2VJbnRlcmZhY2U7XG4gICAgc3RhcnRWaWRlb011dGVkOiBib29sZWFuO1xuICAgIGF1ZGlvRWxlbWVudDogSFRNTEF1ZGlvRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGh0bWxEaXZFbGVtZW50OiBIVE1MRGl2RWxlbWVudCwgc3RhcnRWaWRlb011dGVkOiBib29sZWFuKSB7XG4gICAgICAgIC8vIHNldCB0aGUgYXVkaW8gZGVmYXVsdHNcbiAgICAgICAgdGhpcy5zdGFydFZpZGVvTXV0ZWQgPSBzdGFydFZpZGVvTXV0ZWQ7XG5cbiAgICAgICAgLy8gdGhlIHZpZGVvIGVsZW1lbnQgbmVlZHMgdG8gZXhpc3QgYmVmb3JlIGNyZWF0aW5nIHRoZSBwbGF5ZXIgc28gYXNzaWduIHRoZSBkaXYgYW5kIG1ha2UgdGhlIGVsZW1lbnRcbiAgICAgICAgdGhpcy52aWRlb1BsYXllckRpdiA9IGh0bWxEaXZFbGVtZW50O1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiQXVkaW9cIikgYXMgSFRNTEF1ZGlvRWxlbWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHZpZGVvIEVsZW1lbnRcbiAgICAgKi9cbiAgICBjcmVhdGVWaWRlb1BsYXllcigpIHtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuaWQgPSBcInN0cmVhbWluZ1ZpZGVvXCI7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm11dGVkID0gdGhpcy5zdGFydFZpZGVvTXV0ZWQ7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGxheXNJbmxpbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25tb3VzZWVudGVyID0gdGhpcy5oYW5kbGVNb3VzZUVudGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9ubW91c2VsZWF2ZSA9IHRoaXMuaGFuZGxlTW91c2VMZWF2ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnZpZGVvUGxheWVyRGl2LmFwcGVuZENoaWxkKHRoaXMudmlkZW9FbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgbG9ja2VkIHN0YXRlIENoYW5nZWRcbiAgICAgKi9cbiAgICBoYW5kbGVMb2NrU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiTG9jayBzdGF0ZSBoYXMgY2hhbmdlZFwiKTtcbiAgICAgICAgaWYgKGRvY3VtZW50LnBvaW50ZXJMb2NrRWxlbWVudCA9PT0gdGhpcy52aWRlb0VsZW1lbnQgLypkb2N1bWVudC5tb3pQb2ludGVyTG9ja0VsZW1lbnQgPT09IHBsYXllckVsZW1lbnQqLykge1xuICAgICAgICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSB0aGlzLnZpZGVvSW5wdXRCaW5kaW5ncy5oYW5kbGVNb3VzZU1vdmUuYmluZCh0aGlzLnZpZGVvSW5wdXRCaW5kaW5ncyk7XG4gICAgICAgICAgICBkb2N1bWVudC5vbndoZWVsID0gdGhpcy52aWRlb0lucHV0QmluZGluZ3MuaGFuZGxlTW91c2VXaGVlbC5iaW5kKHRoaXMudmlkZW9JbnB1dEJpbmRpbmdzKTtcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9ubW91c2Vkb3duID0gdGhpcy52aWRlb0lucHV0QmluZGluZ3MuaGFuZGxlTW91c2VEb3duLmJpbmQodGhpcy52aWRlb0lucHV0QmluZGluZ3MpO1xuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25tb3VzZXVwID0gdGhpcy52aWRlb0lucHV0QmluZGluZ3MuaGFuZGxlTW91c2VVcC5iaW5kKHRoaXMudmlkZW9JbnB1dEJpbmRpbmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9ubW91c2Vkb3duID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9ubW91c2V1cCA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9ud2hlZWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIEVsZW1lbnQgaXMgbW91c2UgY2xpY2tlZFxuICAgICAqIEBwYXJhbSBldmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50LnBhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGxheSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnJlcXVlc3RQb2ludGVyTG9jaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBNb3VzZSBoYXMgZW50ZXJlZCB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSBldmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIk1vdXNlIEVudGVyZWRcIik7XG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnNlbmRNb3VzZUVudGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBtb3VzZSBoYXMgbGVmdCB0aGUgZWxlbWVudCBcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNb3VzZSBldmVudFxuICAgICAqL1xuICAgIGhhbmRsZU1vdXNlTGVhdmUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJNb3VzZSBMZWZ0XCIpO1xuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VMZWF2ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIExvYWQgTWV0YSBEYXRhIEV2ZW50XG4gICAgICogQHBhcmFtIGV2ZW50IC0gRXZlbnQgTm90IHVzZWRcbiAgICAgKi9cbiAgICBoYW5kbGVMb2FkTWV0YURhdGEoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwic2hvd1BsYXlPdmVybGF5IFxcbiByZXNpemVQbGF5ZXJTdHlsZVwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIFBlZXIgY29ubmVjdGlvbiBoYXMgYSB0cmFjayBldmVudFxuICAgICAqIEBwYXJhbSBydGNUcmFja0V2ZW50IC0gUlRDIFRyYWNrIEV2ZW50IFxuICAgICAqL1xuICAgIGhhbmRsZU9uVHJhY2socnRjVHJhY2tFdmVudDogUlRDVHJhY2tFdmVudCkge1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcImhhbmRsZU9uVHJhY2sgXCIgKyBKU09OLnN0cmluZ2lmeShydGNUcmFja0V2ZW50LnN0cmVhbXMpKTtcblxuICAgICAgICBpZiAocnRjVHJhY2tFdmVudC50cmFjaykge1xuICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coJ0dvdCB0cmFjayAtICcgKyBydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgKyAnIGlkPScgKyBydGNUcmFja0V2ZW50LnRyYWNrLmlkICsgJyByZWFkeVN0YXRlPScgKyBydGNUcmFja0V2ZW50LnRyYWNrLnJlYWR5U3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCA9PSBcImF1ZGlvXCIpIHtcbiAgICAgICAgICAgIHRoaXMuQ3JlYXRlQXVkaW9UcmFjayhydGNUcmFja0V2ZW50LnN0cmVhbXNbMF0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCA9PSBcInZpZGVvXCIgJiYgdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0ICE9PSBydGNUcmFja0V2ZW50LnN0cmVhbXNbMF0pIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHJ0Y1RyYWNrRXZlbnQuc3RyZWFtc1swXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXQgdmlkZW8gc291cmNlIGZyb20gdmlkZW8gdHJhY2sgb250cmFjay4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogQ3JlYXRlcyB0aGUgYXVkaW8gZGV2aWNlIHdoZW4gcmVjZWl2aW5nIGFuIFJUQ1RyYWNrRXZlbnQgd2l0aCB0aGUga2luZCBvZiBcImF1ZGlvXCJcbiAgICAqIEBwYXJhbSBhdWRpb01lZGlhU3RyZWFtIC0gQXVkaW8gTWVkaWEgc3RyZWFtIHRyYWNrXG4gICAgKi9cbiAgICBDcmVhdGVBdWRpb1RyYWNrKGF1ZGlvTWVkaWFTdHJlYW06IE1lZGlhU3RyZWFtKSB7XG5cbiAgICAgICAgLy8gZG8gbm90aGluZyB0aGUgdmlkZW8gaGFzIHRoZSBzYW1lIG1lZGlhIHN0cmVhbSBhcyB0aGUgYXVkaW8gdHJhY2sgd2UgaGF2ZSBoZXJlICh0aGV5IGFyZSBsaW5rZWQpXG4gICAgICAgIGlmICh0aGlzLnZpZGVvRWxlbWVudC5zcmNPYmplY3QgPT0gYXVkaW9NZWRpYVN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHZpZGVvIGVsZW1lbnQgaGFzIHNvbWUgb3RoZXIgbWVkaWEgc3RyZWFtIHRoYXQgaXMgbm90IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGF1ZGlvIHRyYWNrXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCAmJiB0aGlzLnZpZGVvRWxlbWVudC5zcmNPYmplY3QgIT09IGF1ZGlvTWVkaWFTdHJlYW0pIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhdWRpbyBlbGVtZW50XG4gICAgICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5zcmNPYmplY3QgPSBhdWRpb01lZGlhU3RyZWFtO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0NyZWF0ZWQgbmV3IGF1ZGlvIGVsZW1lbnQgdG8gcGxheSBzZXBhcmF0ZSBhdWRpbyBzdHJlYW0uJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGF5cyB0aGUgYXVkaW8gZnJvbSB0aGUgYXVkaW8gZWxlbWVudCBvciBzZXRzIHVwIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHBsYXkgaXQgb25jZSBhbiBpbnRlcmFjdGlvbiBoYXMgb2NjdXJyZWQgXG4gICAgICovXG4gICAgUGxheUF1ZGlvVHJhY2soKXtcbiAgICAgICAgLy8gYXR0ZW1wdCB0byBhdXRvIHBsYXkgdGhlIGF1ZGlvIGZyb20gdGhlIGF1ZGlvIGVsZW1lbnQgaWYgbm90IHRoZW4gc2V0IHVwIGEgbGlzdGVuZXIgXG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50Lm11dGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50LnBsYXkoKS5jYXRjaCgob25SZWplY3RlZFJlYXNvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhvblJlamVjdGVkUmVhc29uKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGF1dG9wbGF5aW5nIGF1ZGlvIHdpdGhvdXQgaW50ZXJhY3Rpb24gLSB0byByZXNvbHZlIHRoaXMgd2UgYXJlIGdvaW5nIHRvIHJ1biB0aGUgYXVkaW8gdW50aWwgdGhlIHZpZGVvIGlzIGNsaWNrZWRcIik7XG5cbiAgICAgICAgICAgIGxldCBjbGlja1RvUGxheUF1ZGlvID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9FbGVtZW50Lm11dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQucGxheSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGlja1RvUGxheUF1ZGlvKTtcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tUb1BsYXlBdWRpbyk7XG4gICAgICAgIH0pOyAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIFZpZGVvIEVsZW1lbnRzIHNyYyBvYmplY3QgdHJhY2tzIHRvIGVuYWJsZVxuICAgICAqIEBwYXJhbSBlbmFibGVkIC0gRW5hYmxlIFRyYWNrcyBvbiB0aGUgU3JjIE9iamVjdFxuICAgICAqL1xuICAgIHNldFZpZGVvRW5hYmxlZChlbmFibGVkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdC5nZXRUcmFja3MoKS5mb3JFYWNoKCh0cmFjazogTWVkaWFTdHJlYW1UcmFjaykgPT4gdHJhY2suZW5hYmxlZCA9IGVuYWJsZWQpO1xuICAgIH1cblxufVxuXG4vKiA1NDU3NTI0RjRENEQgKi8iLCJpbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vSW5wdXRzL01vdXNlQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcbmltcG9ydCB7IElWaWRlb1BsYXllck1vdXNlSW50ZXJmYWNlIH0gZnJvbSBcIi4vVmlkZW9QbGF5ZXJNb3VzZUludGVyZmFjZVwiO1xuXG4vKipcbiAqIFZpZGVvIFBsYXllciBtb3VzZSBIb3ZlciBoYW5kbGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWRlb1BsYXllck1vdXNlSG92ZXJFdmVudHMgaW1wbGVtZW50cyBJVmlkZW9QbGF5ZXJNb3VzZUludGVyZmFjZSB7XG5cbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBNb3VzZSBDb250cm9sbGVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIgPSBtb3VzZUNvbnRyb2xsZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBtb3ZlIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTW91c2VNb3ZlKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJNb3VzZU1vdmVcIik7XG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnNlbmRNb3VzZU1vdmUobW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFksIG1vdXNlRXZlbnQubW92ZW1lbnRYLCBtb3VzZUV2ZW50Lm1vdmVtZW50WSk7XG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIERvd24gZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVNb3VzZURvd24obW91c2VFdmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIm9uTW91c2UgRG93blwiKTtcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuc2VuZE1vdXNlRG93bihtb3VzZUV2ZW50LmJ1dHRvbiwgbW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFkpO1xuICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudDogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VVcChtb3VzZUV2ZW50LmJ1dHRvbiwgbW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFkpO1xuICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSB3aGVlbCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIHdoZWVsIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIHdoZWVsRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudDogV2hlZWxFdmVudCkge1xuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VXaGVlbCh3aGVlbEV2ZW50LmRldGFpbCAqIC0xMjAsIHdoZWVsRXZlbnQub2Zmc2V0WCwgd2hlZWxFdmVudC5vZmZzZXRZKTtcbiAgICAgICAgd2hlZWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgY29udGV4dCBtZW51IGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlQ29udGV4dE1lbnUobW91c2VFdmVudDogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VVcChtb3VzZUV2ZW50LmJ1dHRvbiwgbW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFkpO1xuICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufSIsImltcG9ydCB7IE1vdXNlQ29udHJvbGxlciB9IGZyb20gXCIuLi9JbnB1dHMvTW91c2VDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBJVmlkZW9QbGF5ZXJNb3VzZUludGVyZmFjZSB9IGZyb20gXCIuL1ZpZGVvUGxheWVyTW91c2VJbnRlcmZhY2VcIjtcblxuLyoqXG4gKiBIYW5kbGUgdGhlIG1vdXNlIGxvY2tlZCBldmVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFZpZGVvUGxheWVyTW91c2VMb2NrZWRFdmVudHMgaW1wbGVtZW50cyBJVmlkZW9QbGF5ZXJNb3VzZUludGVyZmFjZSB7XG5cbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuXG4gICAgaHRtbFZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudDtcbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBodG1sVmlkZW9FbGVtZW50IC0gVGhlIEhUTUwgVmlkZW8gRWxlbWVudFxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgIC0gTW91c2UgQ29udHJvbGxlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGh0bWxWaWRlb0VsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQsIG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuaHRtbFZpZGVvRWxlbWVudCA9IGh0bWxWaWRlb0VsZW1lbnQ7XG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyID0gbW91c2VDb250cm9sbGVyO1xuXG4gICAgICAgIHRoaXMueCA9IHRoaXMuaHRtbFZpZGVvRWxlbWVudC53aWR0aCAvIDI7XG4gICAgICAgIHRoaXMueSA9IHRoaXMuaHRtbFZpZGVvRWxlbWVudC5oZWlnaHQgLyAyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgbW92ZSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU1vdXNlTW92ZShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMueCArPSBtb3VzZUV2ZW50Lm1vdmVtZW50WDtcbiAgICAgICAgdGhpcy55ICs9IG1vdXNlRXZlbnQubW92ZW1lbnRZO1xuICAgICAgICBpZiAodGhpcy54ID4gdGhpcy5odG1sVmlkZW9FbGVtZW50LmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLnggLT0gdGhpcy5odG1sVmlkZW9FbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnkgPiB0aGlzLmh0bWxWaWRlb0VsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnkgLT0gdGhpcy5odG1sVmlkZW9FbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy54IDwgMCkge1xuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy5odG1sVmlkZW9FbGVtZW50LmNsaWVudFdpZHRoICsgdGhpcy54O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnkgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmh0bWxWaWRlb0VsZW1lbnQuY2xpZW50SGVpZ2h0IC0gdGhpcy55O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnNlbmRNb3VzZU1vdmUodGhpcy54LCB0aGlzLnksIG1vdXNlRXZlbnQubW92ZW1lbnRYLCBtb3VzZUV2ZW50Lm1vdmVtZW50WSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBEb3duIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTW91c2VEb3duKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuc2VuZE1vdXNlRG93bihtb3VzZUV2ZW50LmJ1dHRvbiwgbW91c2VFdmVudC54LCBtb3VzZUV2ZW50LnkpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudDogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VVcChtb3VzZUV2ZW50LmJ1dHRvbiwgbW91c2VFdmVudC54LCBtb3VzZUV2ZW50LnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgbW91c2Ugd2hlZWwgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSB3aGVlbCBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSB3aGVlbEV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQ6IFdoZWVsRXZlbnQpIHtcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuc2VuZE1vdXNlV2hlZWwod2hlZWxFdmVudC5kZWx0YVksIHdoZWVsRXZlbnQueCwgd2hlZWxFdmVudC55KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIGNvbnRleHQgbWVudSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZUNvbnRleHRNZW51KG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKFwib25Db250ZXh0TWVudVwiKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgV2ViU29ja2V0Q29udHJvbGxlciB9IGZyb20gXCIuLi9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IFZpZGVvUGxheWVyQ29udHJvbGxlciB9IGZyb20gXCIuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllckNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IE1lc3NhZ2VJbnN0YW5jZVN0YXRlLCBNZXNzYWdlQW5zd2VyLCBNZXNzYWdlQXV0aFJlc3BvbnNlLCBNZXNzYWdlQ29uZmlnIH0gZnJvbSBcIi4uL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmVcIjtcbmltcG9ydCB7IFVpQ29udHJvbGxlciB9IGZyb20gXCIuLi9VaS9VaUNvbnRyb2xsZXJcIjtcbi8vaW1wb3J0IHsgRnJlZXplRnJhbWVMb2dpYyB9IGZyb20gXCIuLi9GcmVlemVGcmFtZS9GcmVlemVGcmFtZUxvZ2ljXCI7XG5pbXBvcnQgeyBBZmtMb2dpYyB9IGZyb20gXCIuLi9BZmsvQWZrTG9naWNcIjtcbmltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcbmltcG9ydCB7IFBlZXJDb25uZWN0aW9uQ29udHJvbGxlciB9IGZyb20gXCIuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyXCJcbmltcG9ydCB7IE1vdXNlQ29udHJvbGxlciB9IGZyb20gXCIuLi9JbnB1dHMvTW91c2VDb250cm9sbGVyXCI7XG5pbXBvcnQgeyBLZXlib2FyZENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vSW5wdXRzL0tleWJvYXJkQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgSVRvdWNoQ29udHJvbGxlciB9IGZyb20gXCIuLi9JbnB1dHMvSVRvdWNoQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgVWVEZXNjcmlwdG9yVWkgfSBmcm9tIFwiLi4vVWVJbnN0YW5jZU1lc3NhZ2UvVWVEZXNjcmlwdG9yVWlcIjtcbmltcG9ydCB7IFVlQ29udHJvbE1lc3NhZ2UgfSBmcm9tIFwiLi4vVWVJbnN0YW5jZU1lc3NhZ2UvVWVDb250cm9sTWVzc2FnZVwiO1xuaW1wb3J0IHsgQWdncmVnYXRlZFN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHNcIjtcbmltcG9ydCB7IElXZWJSdGNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSBcIi4vSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXJcIjtcbmltcG9ydCB7IElEZWxlZ2F0ZSB9IGZyb20gXCIuLi9EZWxlZ2F0ZS9JRGVsZWdhdGVcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9Db25maWcvQ29uZmlnXCI7XG5pbXBvcnQgeyBFbmNvZGVyLCBJbml0aWFsU2V0dGluZ3MsIFdlYlJUQyB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9Jbml0aWFsU2V0dGluZ3NcIjtcbmltcG9ydCB7IExhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9Mb2dnZXIvTG9nZ2VyXCI7XG5pbXBvcnQgeyBJbnB1dENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vSW5wdXRzL0lucHV0Q29udHJvbGxlclwiO1xuaW1wb3J0IHsgTWljQ29udHJvbGxlciB9IGZyb20gXCIuLi9NaWNQbGF5ZXIvTWljQ29udHJvbGxlclwiO1xuLyoqXG4gKiBFbnRyeSBwb2ludCBmb3IgdGhlIFdlYiBSVEMgUGxheWVyXG4gKi9cbmV4cG9ydCBjbGFzcyB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyIGltcGxlbWVudHMgSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXIge1xuXHRjb25maWc6IENvbmZpZztcblx0c2RwQ29uc3RyYWludHM6IFJUQ09mZmVyT3B0aW9ucztcblx0d2ViU29ja2V0Q29udHJvbGxlcjogV2ViU29ja2V0Q29udHJvbGxlcjtcblx0ZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXI7XG5cdGRhdGFjaGFubmVsT3B0aW9uczogUlRDRGF0YUNoYW5uZWxJbml0O1xuXHR2aWRlb1BsYXllckNvbnRyb2xsZXI6IFZpZGVvUGxheWVyQ29udHJvbGxlcjtcblx0a2V5Ym9hcmRDb250cm9sbGVyOiBLZXlib2FyZENvbnRyb2xsZXI7XG5cdG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyXG5cdHRvdWNoQ29udHJvbGxlcjogSVRvdWNoQ29udHJvbGxlcjtcblx0dWVDb250cm9sTWVzc2FnZTogVWVDb250cm9sTWVzc2FnZTtcblx0dWVEZXNjcmlwdG9yVWk6IFVlRGVzY3JpcHRvclVpO1xuXHRwZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXI6IFBlZXJDb25uZWN0aW9uQ29udHJvbGxlcjtcblx0dWlDb250cm9sbGVyOiBVaUNvbnRyb2xsZXI7XG5cdGlucHV0Q29udHJvbGxlcjogSW5wdXRDb250cm9sbGVyO1xuXHQvL2ZyZWV6ZUZyYW1lTG9naWM6IEZyZWV6ZUZyYW1lTG9naWM7XG5cdGFma0xvZ2ljOiBBZmtMb2dpYztcblx0cGxheWVyRWxlbWVudENsaWVudFJlY3Q6IERPTVJlY3Q7XG5cdGxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRtYXRjaFZpZXdwb3J0UmVzb2x1dGlvbjogYm9vbGVhbjtcblx0cmVzaXplVGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD47XG5cdGxhdGVuY3lTdGFydFRpbWU6IG51bWJlcjtcblx0ZGVsZWdhdGU6IElEZWxlZ2F0ZTtcblxuXHQvLyBmb3IgbWljIHN1cHBvcnQgXG5cdHVybFBhcmFtczogVVJMU2VhcmNoUGFyYW1zO1xuXHRtaWNDb250cm9sbGVyOiBNaWNDb250cm9sbGVyO1xuXG5cdC8qKlxuXHQgKiBcblx0ICogQHBhcmFtIGNvbmZpZyAtIHRoZSBmcm9udGVuZCBjb25maWcgb2JqZWN0IFxuXHQgKiBAcGFyYW0gZGVsZWdhdGUgLSB0aGUgZGVsZWdhdGUgaW50ZXJmYWNlIG9iamVjdCBcblx0ICovXG5cdGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBkZWxlZ2F0ZTogSURlbGVnYXRlKSB7XG5cdFx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cdFx0dGhpcy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuXG5cdFx0dGhpcy5zZHBDb25zdHJhaW50cyA9IHtcblx0XHRcdG9mZmVyVG9SZWNlaXZlQXVkaW86IHRydWUsXG5cdFx0XHRvZmZlclRvUmVjZWl2ZVZpZGVvOiB0cnVlXG5cdFx0fVxuXG5cdFx0Ly8gc2V0IHVwIHRoZSBhZmsgbG9naWMgY2xhc3MgYW5kIGNvbm5lY3QgdXAgaXRzIG1ldGhvZCBmb3IgY2xvc2luZyB0aGUgc2lnbmFsaW5nIHNlcnZlciBcblx0XHR0aGlzLmFma0xvZ2ljID0gbmV3IEFma0xvZ2ljKHRoaXMuY29uZmlnLmNvbnRyb2xTY2hlbWUsIHRoaXMuY29uZmlnLmFma1RpbWVvdXQpO1xuXHRcdHRoaXMuYWZrTG9naWMuY2xvc2VXZWJTb2NrZXQgPSAoKSA9PiB0aGlzLmNsb3NlU2lnbmFsaW5nU2VydmVyKCk7XG5cblx0XHR0aGlzLnVpQ29udHJvbGxlciA9IG5ldyBVaUNvbnRyb2xsZXIoKTtcblx0XHR0aGlzLnVpQ29udHJvbGxlci5zZXRVcE1vdXNlQW5kRnJlZXplRnJhbWUgPSB0aGlzLnNldFVwTW91c2VBbmRGcmVlemVGcmFtZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMudWlDb250cm9sbGVyLnJlZ2lzdGVyUmVzaXplVGlja0JveEV2ZW50KCk7XG5cblx0XHQvL3RoaXMuZnJlZXplRnJhbWUgPSBuZXcgRnJlZXplRnJhbWUoKTtcblx0XHQvL3RoaXMuZnJlZXplRnJhbWUuZnJlZXplRnJhbWVPdmVybGF5LnJlc2l6ZVBsYXllclN0eWxlID0gdGhpcy51aUNvbnRyb2xsZXIucmVzaXplUGxheWVyU3R5bGUuYmluZCh0aGlzKTtcblxuXHRcdHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyID0gbmV3IERhdGFDaGFubmVsQ29udHJvbGxlcigpO1xuXHRcdHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uT3BlbiA9IHRoaXMuaGFuZGxlRGF0YUNoYW5uZWxDb25uZWN0ZWQuYmluZCh0aGlzKTtcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5vbkxhdGVuY3lUZXN0UmVzdWx0ID0gdGhpcy5oYW5kbGVMYXRlbmN5VGVzdFJlc3VsdC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLm9uVmlkZW9FbmNvZGVyQXZnUVAgPSB0aGlzLmhhbmRsZVZpZGVvRW5jb2RlckF2Z1FQLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIuT25Jbml0aWFsU2V0dGluZ3MgPSB0aGlzLmhhbmRsZUluaXRpYWxTZXR0aW5ncy5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLm9uUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAgPSB0aGlzLmhhbmRsZVF1YWxpdHlDb250cm9sT3duZXJzaGlwLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIucmVzZXRBZmtXYXJuaW5nVGltZXJPbkRhdGFTZW5kID0gKCkgPT4gdGhpcy5hZmtMb2dpYy5yZXNldEFma1dhcm5pbmdUaW1lcigpO1xuXG5cdFx0dGhpcy52aWRlb1BsYXllckNvbnRyb2xsZXIgPSBuZXcgVmlkZW9QbGF5ZXJDb250cm9sbGVyKHRoaXMuY29uZmlnLnBsYXllckVsZW1lbnQsIHRoaXMuY29uZmlnLnN0YXJ0VmlkZW9NdXRlZCk7XG5cblx0XHQvL3RoaXMuZnJlZXplRnJhbWUuc2V0UGxheU92ZXJsYXlFdmVudCh0aGlzLnBsYXlPdmVybGF5RXZlbnQpO1xuXG5cdFx0Ly8gc2V0IHVwIHdlYnNvY2tldCBtZXRob2RzXG5cdFx0dGhpcy53ZWJTb2NrZXRDb250cm9sbGVyID0gbmV3IFdlYlNvY2tldENvbnRyb2xsZXIodGhpcy5jb25maWcuc2lnbmFsbGluZ1NlcnZlckFkZHJlc3MpO1xuXHRcdHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkNvbmZpZyA9IHRoaXMuaGFuZGxlT25Db25maWdNZXNzYWdlLmJpbmQodGhpcyk7XG5cdFx0dGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uSW5zdGFuY2VTdGF0ZUNoYW5nZSA9IHRoaXMuaGFuZGxlSW5zdGFuY2VTdGF0ZUNoYW5nZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkF1dGhlbnRpY2F0aW9uUmVzcG9uc2UgPSB0aGlzLmhhbmRsZUF1dGhlbnRpY2F0aW9uUmVzcG9uc2UuYmluZCh0aGlzKTtcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25XZWJTb2NrZXRPbmNsb3NlT3ZlcmxheU1lc3NhZ2UgPSB0aGlzLmRlbGVnYXRlLm9uRGlzY29ubmVjdC5iaW5kKHRoaXMuZGVsZWdhdGUpO1xuXG5cdFx0Ly8gc2V0IHVwIHRoZSBmaW5hbCB3ZWJSdGMgcGxheWVyIGNvbnRyb2xsZXIgbWV0aG9kcyBmcm9tIHdpdGhpbiBvdXIgZGVsZWdhdGUgc28gYSBjb25uZWN0aW9uIGNhbiBiZSBhY3RpdmF0ZWRcblx0XHR0aGlzLnNldFVwV2ViUnRjQ29ubmVjdGlvbkZvckFjdGl2YXRpb24oKTtcblxuXHRcdC8vIG5vdyB0aGF0IHRoZSBkZWxlZ2F0ZSBoYXMgZmluaXNoZWQgaW5zdGFudGlhdGluZyBjb25uZWN0IHRoZSByZXN0IG9mIHRoZSBhZmsgbWV0aG9kcyB0byB0aGUgYWZrIGxvZ2ljIGNsYXNzXG5cdFx0dGhpcy5hZmtMb2dpYy5zaG93QWZrT3ZlcmxheSA9ICgpID0+IHRoaXMuZGVsZWdhdGUuc2hvd0Fma092ZXJsYXkodGhpcy5hZmtMb2dpYy5jb3VudERvd24pO1xuXHRcdHRoaXMuYWZrTG9naWMudXBkYXRlQWZrQ291bnRkb3duID0gKCkgPT4gdGhpcy5kZWxlZ2F0ZS51cGRhdGVBZmtPdmVybGF5KHRoaXMuYWZrTG9naWMuY291bnREb3duKTtcblx0XHR0aGlzLmFma0xvZ2ljLmhpZGVDdXJyZW50T3ZlcmxheSA9ICgpID0+IHRoaXMuZGVsZWdhdGUuaGlkZUN1cnJlbnRPdmVybGF5KCk7XG5cdH1cblxuXHQvKipcblx0ICogY29ubmVjdCB1cCB0aGUgb25BZmtDbGljayBhY3Rpb24gd2l0aCBhIG1ldGhvZCBzbyBpdCBjYW4gYmUgZXhwb3NlZCB0byB0aGUgZGVsZWdhdGVcblx0ICovXG5cdG9uQWZrQ2xpY2soKTogdm9pZCB7XG5cdFx0dGhpcy5hZmtMb2dpYy5vbkFma0NsaWNrKCk7XG5cdH1cblxuXHQvKipcblx0ICogUmVzdGFydCB0aGUgc3RyZWFtIGF1dG9tYXRpY2l0eSB3aXRob3V0IHJlZnJlc2hpbmcgdGhlIHBhZ2Vcblx0ICovXG5cdHJlc3RhcnRTdHJlYW1BdXRvbWF0aWNpdHkoKSB7XG5cdFx0Ly8gaWYgdGhlcmUgaXMgbm8gd2ViU29ja2V0Q29udHJvbGxlciByZXR1cm4gaW1tZWRpYXRlbHkgb3IgdGhpcyB3aWxsIG5vdCB3b3JrXG5cdFx0aWYgKCF0aGlzLndlYlNvY2tldENvbnRyb2xsZXIpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiVGhlIFdlYiBTb2NrZXQgQ29udHJvbGxlciBkb2VzIG5vdCBleGlzdCBzbyB0aGlzIHdpbGwgbm90IHdvcmsgcmlnaHQgbm93LlwiKVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGlmIGEgd2Vic29ja2V0IG9iamVjdCBoYXMgbm90IGJlZW4gY3JlYXRlZCBjb25uZWN0IG5vcm1hbGx5IHdpdGhvdXQgY2xvc2luZyBcblx0XHRpZiAoIXRoaXMud2ViU29ja2V0Q29udHJvbGxlci53ZWJTb2NrZXQpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiQSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYXMgbm90IGJlZW4gbWFkZSB5ZXQgcGxlYXNlIGNsaWNrIHRvIHN0YXJ0IHRoZSBzdHJlYW1cIilcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gY2xvc2UgdGhlIGNvbm5lY3Rpb24gXG5cdFx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY2xvc2UoKTtcblxuXHRcdFx0Ly8gd2FpdCBmb3IgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgYW5kIHJlc3RhcnQgdGhlIGNvbm5lY3Rpb25cblx0XHRcdHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLnNldFVwV2ViUnRjQ29ubmVjdGlvbkZvckFjdGl2YXRpb24oKSB9LCAzMDAwKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogYWN0aXZhdGUgdGhlIHNldElXZWJSdGNQbGF5ZXJDb250cm9sbGVyIG1ldGhvZCB3aXRoaW4gb3VyIGRlbGVnYXRlIHRvIHNldCB1cCB0aGUgZmluYWwgd2ViUnRjIHBsYXllciBjb250cm9sbGVyIG1ldGhvZHMgc28gYSB3ZWJSdGMgY29ubmVjdGlvbiBjYW4gYmUgbWFkZSBcblx0ICovXG5cdHNldFVwV2ViUnRjQ29ubmVjdGlvbkZvckFjdGl2YXRpb24oKSB7XG5cdFx0dGhpcy5kZWxlZ2F0ZS5zZXRJV2ViUnRjUGxheWVyQ29udHJvbGxlcih0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQbGF5cyB0aGUgc3RyZWFtIGFuZCBzZXRzIHVwIG90aGVyIHBpZWNlcyB3aGlsZSB0aGUgc3RyZWFtIHN0YXJ0cyBhbHNvIGhhbmRsZXMgaWYgdGhlIHZpZGVvIGNhbm5vdCBwbGF5XG5cdCAqL1xuXHRwbGF5U3RyZWFtKCkge1xuXHRcdGlmICh0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlciAmJiB0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0VsZW1lbnQpIHtcblx0XHRcdC8vIGhhbmRsZSBwbGF5KCkgd2l0aCAudGhlbiBhcyBpdCBpcyBhbiBhc3luY2hyb25vdXMgY2FsbCAgXG5cdFx0XHR0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0VsZW1lbnQucGxheSgpLnRoZW4oKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci5QbGF5QXVkaW9UcmFjaygpO1xuXHRcdFx0XHR0aGlzLnVlQ29udHJvbE1lc3NhZ2UuU2VuZFJlcXVlc3RJbml0aWFsU2V0dGluZ3MoKTtcblx0XHRcdFx0dGhpcy51ZUNvbnRyb2xNZXNzYWdlLlNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2woKTtcblx0XHRcdFx0Ly90aGlzLmZyZWV6ZUZyYW1lLmZyZWV6ZUZyYW1lT3ZlcmxheS5zaG93RnJlZXplRnJhbWVPdmVybGF5KCk7XG5cdFx0XHRcdHRoaXMuZGVsZWdhdGUuaGlkZUN1cnJlbnRPdmVybGF5KCk7XG5cdFx0XHRcdHRoaXMuaW5wdXRDb250cm9sbGVyLnJlZ2lzdGVyVG91Y2godGhpcy5jb25maWcuZmFrZU1vdXNlV2l0aFRvdWNoZXMsIHRoaXMuY29uZmlnLnBsYXllckVsZW1lbnQpO1xuXHRcdFx0XHR0aGlzLmFma0xvZ2ljLnN0YXJ0QWZrV2FybmluZ1RpbWVyKCk7XG5cdFx0XHR9KS5jYXRjaCgob25SZWplY3RlZFJlYXNvbjogc3RyaW5nKSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKG9uUmVqZWN0ZWRSZWFzb24pO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhdXRvcGxheWluZyB2aWRlbyB3aXRob3V0IGludGVyYWN0aW9uIC0gdG8gcmVzb2x2ZSB0aGlzIHdlIGFyZSBnb2luZyB0byBzaG93IHRoZSBwbGF5IGJ1dHRvbiBvdmVybGF5LlwiKVxuXHRcdFx0XHR0aGlzLmRlbGVnYXRlLnNob3dQbGF5T3ZlcmxheSgpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgcGxheWVyIHZpZGVvIHN0cmVhbSBiZWNhdXNlIHdlYlJ0Y1BsYXllck9iai52aWRlbyB3YXMgbm90IHZhbGlkLlwiKVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBFbmFibGUgdGhlIHZpZGVvIHRvIHBsYXkgYXV0b21hdGljaXR5IGlmIGVuYWJsZVNwc0F1dG9wbGF5IGlzIHRydWVcblx0ICovXG5cdGF1dG9QbGF5VmlkZW9PclNldFVwUGxheU92ZXJsYXkoKSB7XG5cdFx0aWYgKHRoaXMuY29uZmlnLmVuYWJsZVNwc0F1dG9wbGF5ID09PSB0cnVlKSB7XG5cblx0XHRcdC8vIHNldCB1cCB0aGUgYXV0byBwbGF5IG9uIHRoZSB2aWRlbyBlbGVtZW50ICBcblx0XHRcdHRoaXMudmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvRWxlbWVudC5hdXRvcGxheSA9IHRydWU7XG5cblx0XHRcdC8vIGF0dGVtcHQgdG8gcGxheSB0aGUgdmlkZW9cblx0XHRcdHRoaXMucGxheVN0cmVhbSgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZGVsZWdhdGUuc2hvd1BsYXlPdmVybGF5KCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENvbm5lY3QgdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcblx0ICovXG5cdGNvbm5lY3RUb1NpZ25hbGxpbmdTZXZlcigpIHtcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY29ubmVjdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgd2lsbCBzdGFydCB0aGUgaGFuZHNoYWtlIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxuXHQgKiBAcGFyYW0gcGVlckNvbmZpZyAgLSBSVEMgQ29uZmlndXJhdGlvbiBPcHRpb25zIGZyb20gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcblx0ICogQHJlbWFyayBSVEMgUGVlciBDb25uZWN0aW9uIG9uIEljZSBDYW5kaWRhdGUgZXZlbnQgaGF2ZSBpdCBoYW5kbGVkIGJ5IGhhbmRsZSBTZW5kIEljZSBDYW5kaWRhdGVcblx0ICovXG5cdHN0YXJ0U2Vzc2lvbihwZWVyQ29uZmlnOiBSVENDb25maWd1cmF0aW9uKSB7XG5cdFx0Ly8gc2V0IHVwIHVybCBwYXJhbXMgZm9yIFNUVU4sIE1pYyBhbmQgU0ZVXG5cdFx0dGhpcy51cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuXG5cdFx0Ly8gc2V0IHVwIHRoZSBwZWVyIGNvbm5lY3Rpb24gY29udHJvbGxlclxuXHRcdHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyID0gbmV3IFBlZXJDb25uZWN0aW9uQ29udHJvbGxlcihwZWVyQ29uZmlnLCB0aGlzLnVybFBhcmFtcyk7XG5cblx0XHQvL3NldCB1cCBtaWMgY29udHJvbGxlclxuXHRcdHRoaXMubWljQ29udHJvbGxlciA9IG5ldyBNaWNDb250cm9sbGVyKHRoaXMudXJsUGFyYW1zKVxuXG5cdFx0Ly8gc2V0IHVwIHBlZXIgY29ubmVjdGlvbiBjb250cm9sbGVyIHZpZGVvIHN0YXRzXG5cdFx0dGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25WaWRlb1N0YXRzID0gdGhpcy5oYW5kbGVWaWRlb1N0YXRzLmJpbmQodGhpcyk7XG5cblx0XHQvKiBXaGVuIHRoZSBQZWVyIENvbm5lY3Rpb24gV2FudHMgdG8gc2VuZCBhbiBvZmZlciBoYXZlIGl0IGhhbmRsZWQgKi9cblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblNlbmRXZWJSVENPZmZlciA9IHRoaXMuaGFuZGxlU2VuZFdlYlJUQ09mZmVyLmJpbmQodGhpcyk7XG5cblx0XHQvKiBXaGVuIHRoZSBQZWVyIGNvbm5lY3Rpb24gaWNlIGNhbmRpZGF0ZSBpcyBhZGRlZCBoYXZlIGl0IGhhbmRsZWQgKi9cblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblBlZXJJY2VDYW5kaWRhdGUgPSB0aGlzLmhhbmRsZVNlbmRJY2VDYW5kaWRhdGUuYmluZCh0aGlzKTtcblxuXHRcdC8vIGhhbmRlbCBtaWMgY29ubmVjdGlvbnMgd2l0aCBwcm9taXNlXG5cdFx0dGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIuY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24sIFwiY2lycnVzXCIsIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zKTtcblxuXHRcdC8vIHNldCB1cCB3ZWJSdGMgdGV4dCBvdmVybGF5cyBcblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5zaG93VGV4dE92ZXJsYXlDb25uZWN0aW5nID0gdGhpcy5kZWxlZ2F0ZS5vbldlYlJ0Y0Nvbm5lY3RpbmcuYmluZCh0aGlzLmRlbGVnYXRlKTtcblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5zaG93VGV4dE92ZXJsYXlTZXR1cEZhaWx1cmUgPSB0aGlzLmRlbGVnYXRlLm9uV2ViUnRjRmFpbGVkLmJpbmQodGhpcy5kZWxlZ2F0ZSk7XG5cblx0XHQvKiBSVEMgUGVlciBDb25uZWN0aW9uIG9uIFRyYWNrIGV2ZW50IC0+IGhhbmRsZSBvbiB0cmFjayAqL1xuXHRcdHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uVHJhY2sgPSB0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci5oYW5kbGVPblRyYWNrLmJpbmQodGhpcy52aWRlb1BsYXllckNvbnRyb2xsZXIpO1xuXG5cdFx0LyogU3RhcnQgdGhlIEhhbmQgc2hha2UgcHJvY2VzcyBieSBjcmVhdGluZyBhbiBPZmZlciAqL1xuXHRcdHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmNyZWF0ZU9mZmVyKHRoaXMuc2RwQ29uc3RyYWludHMsIHRoaXMubWljQ29udHJvbGxlci51c2VNaWMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgd2hlbiBhIENvbmZpZyBNZXNzYWdlIGlzIHJlY2VpdmVkIGNvbnRhaW5zIHRoZSBQZWVyIENvbm5lY3Rpb24gT3B0aW9ucyByZXF1aXJlZCAoU1RVTiBhbmQgVFVSTiBTZXJ2ZXIgSW5mbylcblx0ICogQHBhcmFtIG1lc3NhZ2VDb25maWcgLSBDb25maWcgTWVzc2FnZSByZWNlaXZlZCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXG5cdCAqL1xuXHRoYW5kbGVPbkNvbmZpZ01lc3NhZ2UobWVzc2FnZUNvbmZpZzogTWVzc2FnZUNvbmZpZykge1xuXG5cdFx0LyogVGVsbCB0aGUgV2ViUnRjQ29udHJvbGxlciB0byBzdGFydCBhIHNlc3Npb24gd2l0aCB0aGUgcGVlciBvcHRpb25zIHNlbnQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlciAqL1xuXHRcdHRoaXMuc3RhcnRTZXNzaW9uKG1lc3NhZ2VDb25maWcucGVlckNvbm5lY3Rpb25PcHRpb25zKTtcblxuXHRcdC8qIFdoZW4gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgc2VuZHMgYSBXZWJSVEMgQW5zd2VyIG92ZXIgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uIGhhdmUgdGhlIFdlYlJ0Y0NvbnRyb2xsZXIgaGFuZGxlIHRoZSBtZXNzYWdlICovXG5cdFx0dGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjQW5zd2VyID0gdGhpcy5oYW5kbGVXZWJSdGNBbnN3ZXIuYmluZCh0aGlzKTtcblxuXHRcdC8qIFdoZW4gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgc2VuZHMgYSBJY2VDYW5kaWRhdGUgb3ZlciB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gaGF2ZSB0aGUgV2ViUnRjQ29udHJvbGxlciBoYW5kbGUgdGhlIG1lc3NhZ2UgICovXG5cdFx0dGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uSWNlQ2FuZGlkYXRlID0gdGhpcy5oYW5kbGVJY2VDYW5kaWRhdGUuYmluZCh0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgdGhlIFJUQyBBbnN3ZXIgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxuXHQgKiBAcGFyYW0gQW5zd2VyIC0gQW5zd2VyIE1lc3NhZ2UgZnJvbSB0aGUgU2lnbmFsaW5nIHNlcnZlclxuXHQgKi9cblx0aGFuZGxlV2ViUnRjQW5zd2VyKEFuc3dlcjogTWVzc2FnZUFuc3dlcikge1xuXHRcdExvZ2dlci52ZXJib3NlTG9nKFwiVGhlcmUgaXMgYW4gYW5zd2VyXCIpXG5cblx0XHRsZXQgc2RwQW5zd2VyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0ID0ge1xuXHRcdFx0c2RwOiBBbnN3ZXIuc2RwLFxuXHRcdFx0dHlwZTogXCJhbnN3ZXJcIlxuXHRcdH1cblxuXHRcdHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmhhbmRsZUFuc3dlcihzZHBBbnN3ZXIpO1xuXHRcdHRoaXMuZGVsZWdhdGUub25XZWJSdGNBbnN3ZXIoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZW4gYW4gaWNlIENhbmRpZGF0ZSBpcyByZWNlaXZlZCBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyIGFkZCBpdCB0byB0aGUgUGVlciBDb25uZWN0aW9uIENsaWVudFxuXHQgKiBAcGFyYW0gaWNlQ2FuZGlkYXRlIC0gSWNlIENhbmRpZGF0ZSBmcm9tIFNlcnZlclxuXHQgKi9cblx0aGFuZGxlSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlSW5pdCkge1xuXHRcdExvZ2dlci52ZXJib3NlTG9nKFwiV2ViIFJUQyBDb250cm9sbGVyOiBvbldlYlJ0Y0ljZVwiKTtcblxuXHRcdGxldCBjYW5kaWRhdGUgPSBuZXcgUlRDSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XG5cdFx0dGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuaGFuZGxlT25JY2UoY2FuZGlkYXRlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kIHRoZSBpY2UgQ2FuZGlkYXRlIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyIHZpYSB3ZWJzb2NrZXRcblx0ICAgKiBAcGFyYW0gaWNlRXZlbnQgLSBSVEMgUGVlciBDb25uZWN0aW9uSWNlRXZlbnQpIHtcblx0ICovXG5cdGhhbmRsZVNlbmRJY2VDYW5kaWRhdGUoaWNlRXZlbnQ6IFJUQ1BlZXJDb25uZWN0aW9uSWNlRXZlbnQpIHtcblx0XHRMb2dnZXIudmVyYm9zZUxvZyhcIk9uSWNlQ2FuZGlkYXRlXCIpO1xuXHRcdGlmIChpY2VFdmVudC5jYW5kaWRhdGUgJiYgaWNlRXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSkge1xuXHRcdFx0dGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRJY2VDYW5kaWRhdGUoaWNlRXZlbnQuY2FuZGlkYXRlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2VuZCB0aGUgUlRDIE9mZmVyIFNlc3Npb24gdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxuXHQgKiBAcGFyYW0gb2ZmZXIgLSBSVEMgU2Vzc2lvbiBEZXNjcmlwdGlvblxuXHQgKi9cblx0aGFuZGxlU2VuZFdlYlJUQ09mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XG5cdFx0TG9nZ2VyLnZlcmJvc2VMb2coXCJTZW5kaW5nIHRoZSBvZmZlciB0byB0aGUgU2VydmVyXCIpO1xuXHRcdHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kV2ViUnRjT2ZmZXIob2ZmZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIHJlZ2lzdGVycyB0aGUgbW91c2UgZm9yIHVzZSBpbiBJV2ViUnRjUGxheWVyQ29udHJvbGxlclxuXHQgKi9cblx0YWN0aXZhdGVSZWdpc3Rlck1vdXNlKCkge1xuXHRcdHRoaXMuaW5wdXRDb250cm9sbGVyLnJlZ2lzdGVyTW91c2UodGhpcy5jb25maWcuY29udHJvbFNjaGVtZSwgdGhpcy52aWRlb1BsYXllckNvbnRyb2xsZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdXAgdGhlIERhdGEgY2hhbm5lbCBLZXlib2FyZCwgTW91c2UsIFVFIENvbnRyb2wgTWVzc2FnZSwgVUUgRGVzY3JpcHRvclxuXHQgKi9cblx0aGFuZGxlRGF0YUNoYW5uZWxDb25uZWN0ZWQoKSB7XG5cdFx0TG9nZ2VyLnZlcmJvc2VMb2coXCJEYXRhIENoYW5uZWwgaXMgb3BlblwiKTtcblxuXHRcdC8vIHNob3cgdGhlIGNvbm5lY3RlZCBvdmVybGF5IFxuXHRcdHRoaXMuZGVsZWdhdGUub25XZWJSdGNDb25uZWN0ZWQoKTtcblxuXHRcdHRoaXMuaW5wdXRDb250cm9sbGVyID0gbmV3IElucHV0Q29udHJvbGxlcih0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlcik7XG5cblx0XHR0aGlzLnVlQ29udHJvbE1lc3NhZ2UgPSBuZXcgVWVDb250cm9sTWVzc2FnZSh0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlcik7XG5cdFx0dGhpcy51ZURlc2NyaXB0b3JVaSA9IG5ldyBVZURlc2NyaXB0b3JVaSh0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlcik7XG5cblx0XHR0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci5jcmVhdGVWaWRlb1BsYXllcigpO1xuXG5cdFx0dGhpcy5hY3RpdmF0ZVJlZ2lzdGVyTW91c2UoKVxuXHRcdHRoaXMuaW5wdXRDb250cm9sbGVyLnJlZ2lzdGVyS2V5Qm9hcmQodGhpcy5jb25maWcuc3VwcHJlc3NCcm93c2VyS2V5cyk7XG5cdFx0dGhpcy5pbnB1dENvbnRyb2xsZXIucmVnaXN0ZXJHYW1lUGFkKCk7XG5cblx0XHR0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci5tb3VzZUNvbnRyb2xsZXIgPSB0aGlzLmlucHV0Q29udHJvbGxlci5tb3VzZUNvbnRyb2xsZXI7XG5cblx0XHR0aGlzLnVpQ29udHJvbGxlci5yZXNpemVQbGF5ZXJTdHlsZSgpO1xuXG5cdFx0TG9nZ2VyLnZlcmJvc2VMb2coXCJvblZpZGVvSW5pdGlhbGlzZWRcIik7XG5cblx0XHQvL3RoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLnByb2Nlc3NGcmVlemVGcmFtZU1lc3NhZ2UgPSAvL3RoaXMuZnJlZXplRnJhbWUucHJvY2Vzc0ZyZWV6ZUZyYW1lTWVzc2FnZS5iaW5kKC8vdGhpcy5mcmVlemVGcmFtZSk7XG5cdFx0Ly90aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5vblVuRnJlZXplRnJhbWUgPSAvL3RoaXMuZnJlZXplRnJhbWUuZnJlZXplRnJhbWVPdmVybGF5LmludmFsaWRhdGVGcmVlemVGcmFtZU92ZXJsYXkuYmluZCgvL3RoaXMuZnJlZXplRnJhbWUpO1xuXG5cdFx0c2V0SW50ZXJ2YWwodGhpcy5nZXRTdGF0cy5iaW5kKHRoaXMpLCAxMDAwKTtcblxuXHRcdC8vIGVpdGhlciBhdXRvcGxheSB0aGUgdmlkZW8gb3Igc2V0IHVwIHRoZSBwbGF5IG92ZXJsYXlcblx0XHR0aGlzLmF1dG9QbGF5VmlkZW9PclNldFVwUGxheU92ZXJsYXkoKTtcblxuXHRcdHRoaXMudWlDb250cm9sbGVyLnJlc2l6ZVBsYXllclN0eWxlKCk7XG5cblx0XHQvL3RoaXMuZnJlZXplRnJhbWUuZnJlZXplRnJhbWVPdmVybGF5LmNoZWNrSWZWaWRlb0V4aXN0cyA9IHRoaXMuY2hlY2tJZlZpZGVvRXhpc3RzLmJpbmQoLy90aGlzLmZyZWV6ZUZyYW1lKTtcblx0XHQvL3RoaXMuZnJlZXplRnJhbWUuZnJlZXplRnJhbWVPdmVybGF5LnNldFZpZGVvRW5hYmxlZCA9IHRoaXMudmlkZW9QbGF5ZXJDb250cm9sbGVyLnNldFZpZGVvRW5hYmxlZC5iaW5kKHRoaXMudmlkZW9QbGF5ZXJDb250cm9sbGVyKTtcblxuXHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZFVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSh0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0VsZW1lbnQuY2xpZW50V2lkdGgsIHRoaXMudmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvRWxlbWVudC5jbGllbnRIZWlnaHQpO1xuXG5cdFx0dGhpcy5kZWxlZ2F0ZS5vblZpZGVvSW5pdGlhbGlzZWQoKTtcblxuXHRcdHRoaXMudWlDb250cm9sbGVyLnVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSA9IHRoaXMudXBkYXRlVmlkZW9TdHJlYW1TaXplLmJpbmQodGhpcyk7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyB3aGVuIHRoZSB3ZWIgc29ja2V0IHJlY2VpdmVzIGFuIGF1dGhlbnRpY2F0aW9uIHJlc3BvbnNlXG5cdCAqIEBwYXJhbSBhdXRoUmVzcG9uc2UgLSBBdXRoZW50aWNhdGlvbiBSZXNwb25zZVxuXHQgKi9cblx0aGFuZGxlQXV0aGVudGljYXRpb25SZXNwb25zZShhdXRoUmVzcG9uc2U6IE1lc3NhZ2VBdXRoUmVzcG9uc2UpIHtcblx0XHR0aGlzLmRlbGVnYXRlLm9uQXV0aGVudGljYXRpb25SZXNwb25zZShhdXRoUmVzcG9uc2UpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgd2hlbiB0aGUgc3RyZWFtIHNpemUgY2hhbmdlc1xuXHQgKi9cblx0dXBkYXRlVmlkZW9TdHJlYW1TaXplKCkge1xuXHRcdC8vIENhbGwgdGhlIHNldHRlciBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uXG5cdFx0aWYgKCF0aGlzLm1hdGNoVmlld3BvcnRSZXNvbHV0aW9uKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdGlmIChub3cgLSB0aGlzLmxhc3RUaW1lUmVzaXplZCA+IDEwMDApIHtcblx0XHRcdHZhciBwbGF5ZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllcicpO1xuXHRcdFx0aWYgKCFwbGF5ZXJFbGVtZW50KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZFVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSh0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb0VsZW1lbnQuY2xpZW50V2lkdGgsIHRoaXMudmlkZW9QbGF5ZXJDb250cm9sbGVyLnZpZGVvRWxlbWVudC5jbGllbnRIZWlnaHQpXG5cdFx0XHR0aGlzLmxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdExvZ2dlci52ZXJib3NlTG9nKCdSZXNpemluZyB0b28gb2Z0ZW4gLSBza2lwcGluZycpO1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZW91dCk7XG5cdFx0XHR0aGlzLnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMudXBkYXRlVmlkZW9TdHJlYW1TaXplLCAxMDAwKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyB3aGVuIHRoZSBJbnN0YW5jZSBTdGF0ZSBDaGFuZ2VzXG5cdCAqIEBwYXJhbSBpbnN0YW5jZVN0YXRlICAtIEluc3RhbmNlIFN0YXRlIFxuXHQgKi9cblx0aGFuZGxlSW5zdGFuY2VTdGF0ZUNoYW5nZShpbnN0YW5jZVN0YXRlOiBNZXNzYWdlSW5zdGFuY2VTdGF0ZSkge1xuXHRcdHRoaXMuZGVsZWdhdGUub25JbnN0YW5jZVN0YXRlQ2hhbmdlKGluc3RhbmNlU3RhdGUpXG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSB2aWRlbyBwbGF5ZXIgZGl2IGV4aXN0c1xuXHQgKiBAcmV0dXJucyAtIGlmIFZpZGVvIEV4aXN0c1xuXHQgKi9cblx0Y2hlY2tJZlZpZGVvRXhpc3RzKCkge1xuXHRcdGlmICh0aGlzLnZpZGVvUGxheWVyQ29udHJvbGxlci52aWRlb1BsYXllckRpdikge1xuXHRcdFx0cmV0dXJuIHRydWVcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0IHRoZSBmcmVlemUgZnJhbWUgb3ZlcmxheSB0byB0aGUgcGxheWVyIGRpdlxuXHQgKiBAcGFyYW0gcGxheWVyRWxlbWVudCAtIFRoZSBkaXYgZWxlbWVudCBvZiB0aGUgUGxheWVyXG5cdCAqL1xuXHRzZXRVcE1vdXNlQW5kRnJlZXplRnJhbWUocGxheWVyRWxlbWVudDogSFRNTERpdkVsZW1lbnQpIHtcblx0XHQvLyBDYWxjdWxhdGluZyBhbmQgbm9ybWFsaXppbmcgcG9zaXRpb25zIGRlcGVuZHMgb24gdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIHBsYXllci5cblx0XHR0aGlzLnBsYXllckVsZW1lbnRDbGllbnRSZWN0ID0gcGxheWVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHQvL3RoaXMuZnJlZXplRnJhbWUuZnJlZXplRnJhbWVPdmVybGF5LnJlc2l6ZUZyZWV6ZUZyYW1lT3ZlcmxheSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsb3NlIHRoZSBDb25uZWN0aW9uIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyXG5cdCAqL1xuXHRjbG9zZVNpZ25hbGluZ1NlcnZlcigpIHtcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY2xvc2UoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGaXJlcyBhIFZpZGVvIFN0YXRzIEV2ZW50IGluIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uIFxuXHQgKi9cblx0Z2V0U3RhdHMoKSB7XG5cdFx0dGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuZ2VuZXJhdGVTdGF0cygpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNlbmQgYSBMYXRlbmN5IFRlc3QgUmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2Vcblx0ICovXG5cdHNlbmRMYXRlbmN5VGVzdCgpIHtcblx0XHR0aGlzLmxhdGVuY3lTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdHRoaXMudWVDb250cm9sTWVzc2FnZS5zZW5kTGF0ZW5jeVRlc3QodGhpcy5sYXRlbmN5U3RhcnRUaW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kIHRoZSBFbmNvZGVyIFNldHRpbmdzIHRvIHRoZSBVRSBJbnN0YW5jZSBhcyBhIFVFIFVJIERlc2NyaXB0b3IuXG5cdCAqIEBwYXJhbSBlbmNvZGVyIC0gRW5jb2RlciBTZXR0aW5nc1xuXHQgKi9cblx0c2VuZEVuY29kZXJTZXR0aW5ncyhlbmNvZGVyOiBFbmNvZGVyKSB7XG5cdFx0Y29uc29sZS5sb2coXCItLS0tICAgRW5jb2RlciBTZXR0aW5ncyAgICAtLS0tXFxuXCIgKyBKU09OLnN0cmluZ2lmeShlbmNvZGVyLCB1bmRlZmluZWQsIDQpICsgXCJcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXG5cdFx0aWYgKGVuY29kZXIuUmF0ZUNvbnRyb2wgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kRW5jb2RlclJhdGVDb250cm9sKGVuY29kZXIuUmF0ZUNvbnRyb2wpO1xuXHRcdH1cblx0XHRpZiAoZW5jb2Rlci5UYXJnZXRCaXRyYXRlICE9IG51bGwpIHtcblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZEVuY29kZXJUYXJnZXRCaXRSYXRlKGVuY29kZXIuVGFyZ2V0Qml0cmF0ZSk7XG5cdFx0fVxuXHRcdGlmIChlbmNvZGVyLk1heEJpdHJhdGUgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kRW5jb2Rlck1heEJpdHJhdGVWYnIoZW5jb2Rlci5NYXhCaXRyYXRlKTtcblx0XHR9XG5cdFx0aWYgKGVuY29kZXIuTWluUVAgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kRW5jb2Rlck1pblFQKGVuY29kZXIuTWluUVApO1xuXHRcdH1cblx0XHRpZiAoZW5jb2Rlci5NYXhRUCAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRFbmNvZGVyTWF4UVAoZW5jb2Rlci5NYXhRUCk7XG5cdFx0fVxuXHRcdGlmIChlbmNvZGVyLkZpbGxlckRhdGEgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kRW5jb2RlckVuYWJsZUZpbGxlckRhdGEoZW5jb2Rlci5GaWxsZXJEYXRhKTtcblx0XHR9XG5cdFx0aWYgKGVuY29kZXIuTXVsdGlQYXNzICE9IG51bGwpIHtcblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZEVuY29kZXJNdWx0aVBhc3MoZW5jb2Rlci5NdWx0aVBhc3MpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kIHRoZSBXZWJSVEMgU2V0dGluZ3MgdG8gdGhlIFVFIEluc3RhbmNlIGFzIGEgVUUgVUkgRGVzY3JpcHRvci5cblx0ICogQHBhcmFtIHdlYlJUQyAtIFdlYiBSVEMgU2V0dGluZ3MgXG5cdCAqL1xuXHRzZW5kV2ViUnRjU2V0dGluZ3Mod2ViUlRDOiBXZWJSVEMpIHtcblx0XHRjb25zb2xlLmxvZyhcIi0tLS0gICBXZWJSVEMgU2V0dGluZ3MgICAgLS0tLVxcblwiICsgSlNPTi5zdHJpbmdpZnkod2ViUlRDLCB1bmRlZmluZWQsIDQpICsgXCJcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXG5cdFx0aWYgKHdlYlJUQy5EZWdyYWRhdGlvblByZWYgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kV2ViUnRjRGVncmFkYXRpb25QcmVmZXJlbmNlKHdlYlJUQy5EZWdyYWRhdGlvblByZWYpXG5cdFx0fVxuXG5cdFx0aWYgKHdlYlJUQy5GUFMgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kV2ViUnRjRnBzKHdlYlJUQy5GUFMpO1xuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kV2ViUnRjTWF4RnBzKHdlYlJUQy5GUFMpO1xuXHRcdH1cblxuXHRcdGlmICh3ZWJSVEMuTWluQml0cmF0ZSAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRXZWJSdGNNaW5CaXRyYXRlKHdlYlJUQy5NaW5CaXRyYXRlKTtcblx0XHR9XG5cdFx0aWYgKHdlYlJUQy5NYXhCaXRyYXRlICE9IG51bGwpIHtcblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZFdlYlJ0Y01heEJpdHJhdGUod2ViUlRDLk1heEJpdHJhdGUpO1xuXHRcdH1cblx0XHRpZiAod2ViUlRDLkxvd1FQICE9IG51bGwpIHtcblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZFdlYlJ0Y0xvd1FwVGhyZXNob2xkKHdlYlJUQy5Mb3dRUCk7XG5cdFx0fVxuXHRcdGlmICh3ZWJSVEMuSGlnaFFQICE9IG51bGwpIHtcblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZFdlYlJ0Y0hpZ2hRcFRocmVzaG9sZCh3ZWJSVEMuSGlnaFFQKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2VuZCBBZ2dyZWdhdGVkIFN0YXRzIHRvIHRoZSBTaWduYWxpbmcgU2VydmVyXG5cdCAqIEBwYXJhbSBzdGF0cyAtIEFnZ3JlZ2F0ZWQgU3RhdHNcblx0ICovXG5cdHNlbmRTdGF0c1RvU2lnbmFsbGluZ1NlcnZlcihzdGF0czogQWdncmVnYXRlZFN0YXRzKSB7XG5cdFx0Ly9jb25zb2xlLmxvZyhcIi0tLS0gICBTZW5kaW5nIEFnZ3JlZ2F0ZWQgU3RhdHMgdG8gU2lnbmFsaW5nIFNlcnZlciAgIC0tLS1cXG5cIiArIEpTT04uc3RyaW5naWZ5KHN0YXRzLCB1bmRlZmluZWQsIDQpICsgXCJcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFN0YXRzKHN0YXRzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kcyBhIFVJIEludGVyYWN0aW9uIERlc2NyaXB0b3IgdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqIEBwYXJhbSBtZXNzYWdlIC0gU3RyaW5nIHRvIHNlbmQgdG8gdGhlIFVFIEluc3RhbmNlXG5cdCAqL1xuXHRzZW5kVWVVaURlc2NyaXB0b3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0Ly9jb25zb2xlLmxvZyhcIi0tLS0gICBVRSBVSSBJbnRlcmFjdGlvbiBTdHJpbmcgICAtLS0tXFxuXCIgKyBKU09OLnN0cmluZ2lmeShtZXNzYWdlLCB1bmRlZmluZWQsIDQpICsgXCJcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIik7XG5cdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kVWlJbnRlcmFjdGlvbihtZXNzYWdlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kcyB0aGUgVUkgRGVzY3JpcHRvciBgc3RhdCBmcHNgIHRvIHRoZSBVRSBJbnN0YW5jZSBcblx0ICovXG5cdHNlbmRTaG93RnBzKCk6IHZvaWQge1xuXHRcdC8vY29uc29sZS5sb2coXCItLS0tICAgU2VuZGluZyBzaG93IHN0YXQgdG8gVUUgICAtLS0tXCIpO1xuXHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZFNob3dGcHMoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZW5kcyBhIHJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlIHRvIGhhdmUgb3duZXJzaGlwIG9mIFF1YWxpdHlcblx0ICovXG5cdHNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2xPd25lcnNoaXAoKTogdm9pZCB7XG5cdFx0Ly9jb25zb2xlLmxvZyhcIi0tLS0gICBTZW5kaW5nIFJlcXVlc3QgdG8gQ29udHJvbCBRdWFsaXR5ICAtLS0tXCIpO1xuXHRcdHRoaXMudWVDb250cm9sTWVzc2FnZS5TZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCk7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyB3aGVuIGEgTGF0ZW5jeSBUZXN0IFJlc3VsdCBhcmUgcmVjZWl2ZWQgZnJvbSB0aGUgVUUgSW5zdGFuY2Vcblx0ICogQHBhcmFtIGxhdGVuY3lUaW1pbmdzIC0gTGF0ZW5jeSBUZXN0IFRpbWluZ3Ncblx0ICovXG5cdGhhbmRsZUxhdGVuY3lUZXN0UmVzdWx0KGxhdGVuY3lUaW1pbmdzOiBMYXRlbmN5VGVzdFJlc3VsdHMpIHtcblx0XHRsYXRlbmN5VGltaW5ncy50ZXN0U3RhcnRUaW1lTXMgPSB0aGlzLmxhdGVuY3lTdGFydFRpbWU7XG5cdFx0bGF0ZW5jeVRpbWluZ3MuYnJvd3NlclJlY2VpcHRUaW1lTXMgPSBEYXRlLm5vdygpO1xuXG5cdFx0bGF0ZW5jeVRpbWluZ3MubGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZSA9IH5+KGxhdGVuY3lUaW1pbmdzLmJyb3dzZXJSZWNlaXB0VGltZU1zIC0gbGF0ZW5jeVRpbWluZ3MudGVzdFN0YXJ0VGltZU1zKTtcblx0XHRsYXRlbmN5VGltaW5ncy50ZXN0RHVyYXRpb24gPSB+fihsYXRlbmN5VGltaW5ncy5UcmFuc21pc3Npb25UaW1lTXMgLSBsYXRlbmN5VGltaW5ncy5SZWNlaXB0VGltZU1zKTtcblx0XHRsYXRlbmN5VGltaW5ncy5uZXR3b3JrTGF0ZW5jeSA9IH5+KGxhdGVuY3lUaW1pbmdzLmxhdGVuY3lFeGNsdWRpbmdEZWNvZGUgLSBsYXRlbmN5VGltaW5ncy50ZXN0RHVyYXRpb24pO1xuXG5cdFx0aWYgKGxhdGVuY3lUaW1pbmdzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zICYmIGxhdGVuY3lUaW1pbmdzLmJyb3dzZXJSZWNlaXB0VGltZU1zKSB7XG5cdFx0XHRsYXRlbmN5VGltaW5ncy5lbmRUb0VuZExhdGVuY3kgPSB+fihsYXRlbmN5VGltaW5ncy5mcmFtZURpc3BsYXlEZWx0YVRpbWVNcyArIGxhdGVuY3lUaW1pbmdzLm5ldHdvcmtMYXRlbmN5LCArIGxhdGVuY3lUaW1pbmdzLkNhcHR1cmVUb1NlbmRNcyk7XG5cdFx0fVxuXHRcdHRoaXMuZGVsZWdhdGUub25MYXRlbmN5VGVzdFJlc3VsdChsYXRlbmN5VGltaW5ncyk7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyB3aGVuIHRoZSBFbmNvZGVyIGFuZCBXZWIgUlRDIFNldHRpbmdzIGFyZSByZWNlaXZlZCBmcm9tIHRoZSBVRSBJbnN0YW5jZVxuXHQgKiBAcGFyYW0gc2V0dGluZ3MgLSBJbml0aWFsIEVuY29kZXIgYW5kIFdlYiBSVEMgU2V0dGluZ3Ncblx0ICovXG5cdGhhbmRsZUluaXRpYWxTZXR0aW5ncyhzZXR0aW5nczogSW5pdGlhbFNldHRpbmdzKSB7XG5cdFx0dGhpcy5kZWxlZ2F0ZS5vbkluaXRpYWxTZXR0aW5ncyhzZXR0aW5ncyk7XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlcyB3aGVuIHRoZSBRdWFudGl6YXRpb24gUGFyYW1ldGVyIGFyZSByZWNlaXZlZCBmcm9tIHRoZSBVRSBJbnN0YW5jZVxuXHQgKiBAcGFyYW0gQXZnUVAgLSBFbmNvZGVycyBRdWFudGl6YXRpb24gUGFyYW1ldGVyXG5cdCAqL1xuXHRoYW5kbGVWaWRlb0VuY29kZXJBdmdRUChBdmdRUDogbnVtYmVyKSB7XG5cdFx0dGhpcy5kZWxlZ2F0ZS5vblZpZGVvRW5jb2RlckF2Z1FQKEF2Z1FQKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGbGFnIHNldCBpZiB0aGUgdXNlciBoYXMgUXVhbGl0eSBPd25lcnNoaXBcblx0ICogQHBhcmFtIGhhc1F1YWxpdHlPd25lcnNoaXAgLSBEb2VzIHRoZSBjdXJyZW50IGNsaWVudCBoYXZlIFF1YWxpdHkgT3duZXJzaGlwXG5cdCAqL1xuXHRoYW5kbGVRdWFsaXR5Q29udHJvbE93bmVyc2hpcChoYXNRdWFsaXR5T3duZXJzaGlwOiBib29sZWFuKSB7XG5cdFx0dGhpcy5kZWxlZ2F0ZS5vblF1YWxpdHlDb250cm9sT3duZXJzaGlwKGhhc1F1YWxpdHlPd25lcnNoaXApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgd2hlbiB0aGUgQWdncmVnYXRlZCBzdGF0cyBhcmUgQ29sbGVjdGVkXG5cdCAqIEBwYXJhbSBzdGF0cyAtIEFnZ3JlZ2F0ZWQgU3RhdHNcblx0ICovXG5cdGhhbmRsZVZpZGVvU3RhdHMoc3RhdHM6IEFnZ3JlZ2F0ZWRTdGF0cykge1xuXHRcdHRoaXMuZGVsZWdhdGUub25WaWRlb1N0YXRzKHN0YXRzKTtcblx0fVxuXG5cdC8qKlxuXHQqIFRvIFJlc2l6ZSB0aGUgVmlkZW8gUGxheWVyIGVsZW1lbnRcblx0Ki9cblx0cmVzaXplUGxheWVyU3R5bGUoKTogdm9pZCB7XG5cdFx0dGhpcy51aUNvbnRyb2xsZXIucmVzaXplUGxheWVyU3R5bGUoKTtcblx0fVxufSIsIi8qKlxuICogVGhlIFR5cGVzIG9mIE1lc3NhZ2VzIHRoYXQgd2lsbCBiZSByZWNlaXZlZFxuICovXG5leHBvcnQgZW51bSBNZXNzYWdlUmVjdlR5cGVzIHtcbiAgICBBVVRIRU5USUNBVElPTl9SRVFVSVJFRCA9IFwiYXV0aGVudGljYXRpb25SZXF1aXJlZFwiLFxuICAgIEFVVEhFTlRJQ0FUSU9OX1JFU1BPTlNFID0gXCJhdXRoZW50aWNhdGlvblJlc3BvbnNlXCIsXG4gICAgSU5TVEFOQ0VfU1RBVEUgPSBcImluc3RhbmNlU3RhdGVcIixcbiAgICBDT05GSUcgPSBcImNvbmZpZ1wiLFxuICAgIFBMQVlFUl9DT1VOVCA9IFwicGxheWVyQ291bnRcIixcbiAgICBBTlNXRVIgPSBcImFuc3dlclwiLFxuICAgIElDRV9DQU5ESURBVEUgPSBcImljZUNhbmRpZGF0ZVwiXG59XG5cbi8qKlxuICogVHlwZXMgb2YgQXV0aGVudGljYXRpb24gcmVwb3NlcyBcbiAqL1xuZXhwb3J0IGVudW0gTWVzc2FnZUF1dGhSZXNwb25zZU91dGNvbWVUeXBlIHtcbiAgICBSRURJUkVDVCA9IFwiUkVESVJFQ1RcIixcbiAgICBJTlZBTElEX1RPS0VOID0gXCJJTlZBTElEX1RPS0VOXCIsXG4gICAgQVVUSEVOVElDQVRFRCA9IFwiQVVUSEVOVElDQVRFRFwiLFxuICAgIEVSUk9SID0gXCJFUlJPUlwiXG59XG5cbi8qKlxuICogU3RhdGVzIG9mIHRoZSBVRSBJbnN0YW5jZVxuICovXG5leHBvcnQgZW51bSBJbnN0YW5jZVN0YXRlIHtcbiAgICBVTkFMTE9DQVRFRCA9IFwiVU5BTExPQ0FURURcIixcbiAgICBQRU5ESU5HID0gXCJQRU5ESU5HXCIsXG4gICAgRkFJTEVEID0gXCJGQUlMRURcIixcbiAgICBSRUFEWSA9IFwiUkVBRFlcIlxufVxuXG4vKipcbiAqIENvbmNyZXRlIFJlY2VpdmVkIE1lc3NhZ2Ugd3JhcHBlclxuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZVJlY3Yge1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCBNZXNzYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VBdXRoUmVxdWlyZWQgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7IH1cblxuLyoqXG4gKiBBdXRoZW50aWNhdGlvbiBSZXNwb25zZSBNZXNzYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VBdXRoUmVzcG9uc2UgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XG4gICAgb3V0Y29tZTogTWVzc2FnZUF1dGhSZXNwb25zZU91dGNvbWVUeXBlO1xuICAgIHJlZGlyZWN0OiBzdHJpbmc7XG4gICAgZXJyb3I6IHN0cmluZztcbn1cblxuLyoqXG4gKiBJbnN0YW5jZSBTdGF0ZSBNZXNzYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VJbnN0YW5jZVN0YXRlIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xuICAgIHN0YXRlOiBJbnN0YW5jZVN0YXRlO1xuICAgIGRldGFpbHM6IHN0cmluZztcbiAgICBwcm9ncmVzczogbnVtYmVyO1xufVxuXG4vKipcbiAqIENvbmZpZyBNZXNzYWdlIFdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VDb25maWcgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XG4gICAgcGVlckNvbm5lY3Rpb25PcHRpb25zOiBSVENDb25maWd1cmF0aW9uOyBcbn1cblxuLyoqXG4gKiBQbGF5ZXIgQ291bnQgTWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlUGxheWVyQ291bnQgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XG4gICAgY291bnQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBXZWIgUlRDIG9mZmVyIEFuc3dlciBNZXNzYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VBbnN3ZXIgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XG4gICAgc2RwOiBzdHJpbmc7XG59XG5cbi8qKlxuICogSWNlIENhbmRpZGF0ZSBNZXNzYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VJY2VDYW5kaWRhdGUgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XG4gICAgY2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGVJbml0O1xufSIsImltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9Mb2dnZXIvTG9nZ2VyXCI7XG5pbXBvcnQgeyBBZ2dyZWdhdGVkU3RhdHMgfSBmcm9tIFwiLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0c1wiO1xuaW1wb3J0IHsgQ2FuZGlkYXRlUGFpclN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVQYWlyU3RhdHNcIjtcbmltcG9ydCB7IENhbmRpZGF0ZVN0YXQgfSBmcm9tIFwiLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVN0YXRcIjtcbmltcG9ydCB7IGRhdGFDaGFubmVsU3RhdHMgfSBmcm9tIFwiLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHNcIjtcbmltcG9ydCB7IGluYm91bmRBdWRpb1N0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kQXVkaW9TdGF0c1wiO1xuaW1wb3J0IHsgaW5ib3VuZFZpZGVvU3RhdHMgfSBmcm9tIFwiLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRWaWRlb1N0YXRzXCI7XG5pbXBvcnQgeyBPdXRCb3VuZFZpZGVvU3RhdHMgfSBmcm9tIFwiLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kVmlkZW9TdGF0c1wiO1xuXG4vKipcbiAqIFRoZSBTZW5kIFR5cGVzIHRoYXQgYXJlIHB1c2hlZCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXG4gKi9cbmV4cG9ydCBlbnVtIE1lc3NhZ2VTZW5kVHlwZXMge1xuICAgIElDRV9DQU5ESURBVEUgPSBcImljZUNhbmRpZGF0ZVwiLFxuICAgIFNUQVRTID0gXCJzdGF0c1wiLFxuICAgIEFVVEhFTlRJQ0FUSU9OX1JFUVVFU1QgPSBcImF1dGhlbnRpY2F0aW9uUmVxdWVzdFwiLFxuICAgIFJFUVVFU1RfSU5TVEFOQ0UgPSBcInJlcXVlc3RJbnN0YW5jZVwiLFxuICAgIE9GRkVSID0gXCJvZmZlclwiXG59XG5cbi8qKlxuICogQSBXcmFwcGVyIGZvciB0aGUgbWVzc2FnZSB0byBzZW5kIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlU2VuZCBpbXBsZW1lbnRzIFNlbmQge1xuICAgIHR5cGU6IE1lc3NhZ2VTZW5kVHlwZXM7XG4gICAgcGVlckNvbm5lY3Rpb25PcHRpb25zOiBPYmplY3Q7XG5cbiAgICAvKipcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcbiAgICAgKiBAcmV0dXJucyAtIEpTT04gU3RyaW5nIG9mIHRoZSBNZXNzYWdlIHRvIHNlbmRcbiAgICAgKi9cbiAgICBwYXlsb2FkKCkge1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIlNlbmRpbmcgPT4gXFxuXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLCB1bmRlZmluZWQsIDQpKTtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZW5kIHtcbiAgICAvKipcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcbiAgICAgKiBAcmV0dXJucyAtIEpTT04gU3RyaW5nIG9mIHRoZSBNZXNzYWdlIHRvIHNlbmRcbiAgICAgKi9cbiAgICBwYXlsb2FkOiAoKSA9PiBzdHJpbmc7XG59XG5cbi8qKlxuICogQXV0aCBSZXF1ZXN0IE1lc3NhZ2UgV3JhcHBlclxuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZUF1dGhSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZVNlbmQge1xuICAgIHRva2VuOiBzdHJpbmc7XG4gICAgcHJvdmlkZXI6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRva2VuIFByb3ZpZGVkIGJ5IHRoZSBBdXRoIFByb3ZpZGVyXG4gICAgICogQHBhcmFtIHByb3ZpZGVyIC0gTmFtZSBvZiB0aGUgcHJvdmlkZXIgdGhhdCBpcyByZWdpc3RlcmVkIGluIHRoZSBhdXRoIHBsdWdpblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRva2VuOiBzdHJpbmcsIHByb3ZpZGVyOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5BVVRIRU5USUNBVElPTl9SRVFVRVNUO1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICB9XG59XG5cbi8qKlxuICogSW5zdGFuY2UgUmVxdWVzdCBNZXNzYWdlIFdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VSZXF1ZXN0SW5zdGFuY2UgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuUkVRVUVTVF9JTlNUQU5DRTtcbiAgICB9XG59XG5cbi8qKlxuICogQWdncmVnYXRlZCBTdGF0cyBNZXNzYWdlIFdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VTdGF0cyBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcbiAgICBpbmJvdW5kVmlkZW9TdGF0czogaW5ib3VuZFZpZGVvU3RhdHM7XG4gICAgaW5ib3VuZEF1ZGlvU3RhdHM6IGluYm91bmRBdWRpb1N0YXRzO1xuICAgIGNhbmRpZGF0ZVBhaXI6IENhbmRpZGF0ZVBhaXJTdGF0c1xuICAgIGRhdGFDaGFubmVsU3RhdHM6IGRhdGFDaGFubmVsU3RhdHM7XG4gICAgbG9jYWxDYW5kaWRhdGVzOiBBcnJheTxDYW5kaWRhdGVTdGF0PjtcbiAgICByZW1vdGVDYW5kaWRhdGVzOiBBcnJheTxDYW5kaWRhdGVTdGF0PjtcbiAgICBvdXRib3VuZFZpZGVvU3RhdHM6IE91dEJvdW5kVmlkZW9TdGF0cztcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhZ2dyZWdhdGVkU3RhdHMgLSBBZ2dyZWdhdGVkIFN0YXRzIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFnZ3JlZ2F0ZWRTdGF0czogQWdncmVnYXRlZFN0YXRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuU1RBVFNcbiAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cyA9IGFnZ3JlZ2F0ZWRTdGF0cy5pbmJvdW5kVmlkZW9TdGF0cztcbiAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cyA9IGFnZ3JlZ2F0ZWRTdGF0cy5pbmJvdW5kQXVkaW9TdGF0cztcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyID0gYWdncmVnYXRlZFN0YXRzLmNhbmRpZGF0ZVBhaXI7XG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cyA9IGFnZ3JlZ2F0ZWRTdGF0cy5kYXRhQ2hhbm5lbFN0YXRzXG4gICAgICAgIHRoaXMubG9jYWxDYW5kaWRhdGVzID0gYWdncmVnYXRlZFN0YXRzLmxvY2FsQ2FuZGlkYXRlcztcbiAgICAgICAgdGhpcy5yZW1vdGVDYW5kaWRhdGVzID0gYWdncmVnYXRlZFN0YXRzLnJlbW90ZUNhbmRpZGF0ZXM7XG4gICAgICAgIHRoaXMub3V0Ym91bmRWaWRlb1N0YXRzID0gYWdncmVnYXRlZFN0YXRzLm91dEJvdW5kVmlkZW9TdGF0cztcbiAgICB9XG59XG5cbi8qKlxuICogIFdlYiBSVEMgT2ZmZXIgbWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlV2ViUlRDT2ZmZXIgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XG4gICAgc2RwOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb2ZmZXIgLSBHZW5lcmF0ZWQgV2ViIFJUQyBPZmZlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9mZmVyPzogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLk9GRkVSO1xuXG4gICAgICAgIGlmIChvZmZlcikge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gb2ZmZXIudHlwZSBhcyBNZXNzYWdlU2VuZFR5cGVzO1xuICAgICAgICAgICAgdGhpcy5zZHAgPSBvZmZlci5zZHA7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogUlRDIEljZSBDYW5kaWRhdGUgV3JhcHBlclxuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZUljZUNhbmRpZGF0ZSBpbXBsZW1lbnRzIFNlbmQge1xuICAgIGNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlO1xuICAgIHR5cGU6IE1lc3NhZ2VTZW5kVHlwZXM7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2FuZGlkYXRlIC0gUlRDIEljZSBDYW5kaWRhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLklDRV9DQU5ESURBVEU7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlID0gY2FuZGlkYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFR1cm5zIHRoZSB3cmFwcGVyIGludG8gYSBKU09OIFN0cmluZ1xuICAgICAqIEByZXR1cm5zIC0gSlNPTiBTdHJpbmcgb2YgdGhlIE1lc3NhZ2UgdG8gc2VuZFxuICAgICAqL1xuICAgIHBheWxvYWQoKSB7XG4gICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiU2VuZGluZyA9PiBcXG5cIiArIEpTT04uc3RyaW5naWZ5KHRoaXMsIHVuZGVmaW5lZCwgNCkpO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgfVxufSIsImltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9Mb2dnZXIvTG9nZ2VyXCI7XG5pbXBvcnQgeyBBZ2dyZWdhdGVkU3RhdHMgfSBmcm9tIFwiLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0c1wiO1xuaW1wb3J0ICogYXMgTWVzc2FnZVJlY2VpdmUgZnJvbSBcIi4vTWVzc2FnZVJlY2VpdmVcIjtcbmltcG9ydCAqIGFzIE1lc3NhZ2VTZW5kIGZyb20gXCIuL01lc3NhZ2VTZW5kXCI7XG5cbi8qKlxuICogVGhlIGNvbnRyb2xsZXIgZm9yIHRoZSBXZWJTb2NrZXQgYW5kIGFsbCBhc3NvY2lhdGVkIG1ldGhvZHMgXG4gKi9cbmV4cG9ydCBjbGFzcyBXZWJTb2NrZXRDb250cm9sbGVyIHtcbiAgICBXU19PUEVOX1NUQVRFID0gMTtcbiAgICBhZGRyZXNzOiBzdHJpbmc7XG4gICAgd2ViU29ja2V0OiBXZWJTb2NrZXQ7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gQWRkcmVzcyAtIFRoZSBBZGRyZXNzIG9mIHRoZSBzaWduYWxpbmcgc2VydmVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoQWRkcmVzczogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IEFkZHJlc3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byB0aGUgc2lnbmFsaW5nIHNlcnZlclxuICAgICAqIEByZXR1cm5zIC0gSWYgdGhlcmUgaXMgYSBjb25uZWN0aW9uXG4gICAgICovXG4gICAgY29ubmVjdCgpOiBib29sZWFuIHtcbiAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2codGhpcy5hZGRyZXNzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQub25vcGVuID0gdGhpcy5oYW5kbGVPbk9wZW4uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uZXJyb3IgPSB0aGlzLmhhbmRsZU9uRXJyb3IuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uY2xvc2UgPSB0aGlzLmhhbmRsZU9uQ2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9ubWVzc2FnZSA9IHRoaXMuaGFuZGxlT25NZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoYXQgaGFwcGVucyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxuICAgICAqIEBwYXJhbSBldmVudCAtIE1lc3NhZ2UgUmVjZWl2ZWRcbiAgICAgKi9cbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xuICAgICAgICBsZXQgbWVzc2FnZTogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3YgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcInJlY2VpdmVkID0+IFxcblwiICsgSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZShldmVudC5kYXRhKSwgdW5kZWZpbmVkLCA0KSk7XG5cbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3ZUeXBlcy5BVVRIRU5USUNBVElPTl9SRVFVSVJFRDoge1xuICAgICAgICAgICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiQVVUSEVOVElDQVRJT05fUkVRVUlSRURcIik7XG4gICAgICAgICAgICAgICAgbGV0IGF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBdXRoUmVxdWlyZWQgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuXG4gICAgICAgICAgICAgICAgbGV0IHVybF9zdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gbmV3IFVSTCh1cmxfc3RyaW5nKTtcblxuICAgICAgICAgICAgICAgIGxldCBhdXRoUmVxdWVzdCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlQXV0aFJlcXVlc3QodXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJjb2RlXCIpLCB1cmwuc2VhcmNoUGFyYW1zLmdldChcInByb3ZpZGVyXCIpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQoYXV0aFJlcXVlc3QucGF5bG9hZCgpKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdlR5cGVzLkFVVEhFTlRJQ0FUSU9OX1JFU1BPTlNFOiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJBVVRIRU5USUNBVElPTl9SRVNQT05TRVwiKTtcbiAgICAgICAgICAgICAgICBsZXQgYXV0aGVudGljYXRpb25SZXNwb25zZTogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUF1dGhSZXNwb25zZSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9uQXV0aGVudGljYXRpb25SZXNwb25zZShhdXRoZW50aWNhdGlvblJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYXV0aGVudGljYXRpb25SZXNwb25zZS5vdXRjb21lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUF1dGhSZXNwb25zZU91dGNvbWVUeXBlLlJFRElSRUNUOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGF1dGhlbnRpY2F0aW9uUmVzcG9uc2UucmVkaXJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBdXRoUmVzcG9uc2VPdXRjb21lVHlwZS5BVVRIRU5USUNBVEVEOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIlVzZXIgaXMgYXV0aGVudGljYXRlZCBhbmQgbm93IHJlcXVlc3RpbmcgYW4gaW5zdGFuY2VcIilcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChuZXcgTWVzc2FnZVNlbmQuTWVzc2FnZVJlcXVlc3RJbnN0YW5jZSgpLnBheWxvYWQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBdXRoUmVzcG9uc2VPdXRjb21lVHlwZS5JTlZBTElEX1RPS0VOOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJBdXRoZW50aWNhdGlvbiBlcnJvciA6IEludmFsaWQgVG9rZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBdXRoUmVzcG9uc2VPdXRjb21lVHlwZS5FUlJPUjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQXV0aGVudGljYXRpb24gRXJyb3IgZnJvbSBzZXJ2ZXIgQ2hlY2sgd2hhdCB5b3UgYXJlIHNlbmRpbmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIE91dGNvbWUgTWVzc2FnZSBoYXMgbm90IGJlZW4gaGFuZGxlZCA6IHRoaXMgaXMgcmVhbGx5IGJhZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdlR5cGVzLklOU1RBTkNFX1NUQVRFOiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJJTlNUQU5DRV9TVEFURVwiKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2VTdGF0ZTogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUluc3RhbmNlU3RhdGUgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMub25JbnN0YW5jZVN0YXRlQ2hhbmdlKGluc3RhbmNlU3RhdGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdlR5cGVzLkNPTkZJRzoge1xuICAgICAgICAgICAgICAgIExvZ2dlci52ZXJib3NlTG9nKFwiQ09ORklHXCIpO1xuICAgICAgICAgICAgICAgIGxldCBjb25maWc6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VDb25maWcgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMub25Db25maWcoY29uZmlnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3ZUeXBlcy5QTEFZRVJfQ09VTlQ6IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIlBMQVlFUl9DT1VOVFwiKTtcbiAgICAgICAgICAgICAgICBsZXQgcGxheWVyQ291bnQ6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VQbGF5ZXJDb3VudCA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJQbGF5ZXIgQ291bnQ6IFwiICsgKHBsYXllckNvdW50LmNvdW50IC0gMSkpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VSZWN2VHlwZXMuQU5TV0VSOiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLnZlcmJvc2VMb2coXCJBTlNXRVJcIik7XG4gICAgICAgICAgICAgICAgbGV0IGFuc3dlcjogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUFuc3dlciA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbldlYlJ0Y0Fuc3dlcihhbnN3ZXIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdlR5cGVzLklDRV9DQU5ESURBVEU6IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIklDRV9DQU5ESURBVEVcIik7XG4gICAgICAgICAgICAgICAgbGV0IGljZUNhbmRpZGF0ZTogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUljZUNhbmRpZGF0ZSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUuY2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgTWVzc2FnZSB0eXBlIG5vdCBEZWZpbmVkXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBXZWJzb2NrZXQgaXMgb3BlbmVkIFxuICAgICAqIEBwYXJhbSBldmVudCAtIE5vdCBVc2VkXG4gICAgICovXG4gICAgaGFuZGxlT25PcGVuKGV2ZW50OiBFdmVudCkge1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIkNvbm5lY3RlZCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgdmlhIFdlYlNvY2tldFwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3Igb24gdGhlIHdlYnNvY2tldFxuICAgICAqIEBwYXJhbSBldmVudCAtIEVycm9yIFBheWxvYWRcbiAgICAgKi9cbiAgICBoYW5kbGVPbkVycm9yKGV2ZW50OiBFdmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdXZWJTb2NrZXQgZXJyb3I6ICcpO1xuICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBXZWJzb2NrZXQgaXMgY2xvc2VkXG4gICAgICogQHBhcmFtIGV2ZW50IC0gQ2xvc2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVPbkNsb3NlKGV2ZW50OiBDbG9zZUV2ZW50KSB7XG4gICAgICAgIHRoaXMub25XZWJTb2NrZXRPbmNsb3NlT3ZlcmxheU1lc3NhZ2UoZXZlbnQpO1xuICAgICAgICBMb2dnZXIudmVyYm9zZUxvZyhcIkRpc2Nvbm5lY3RlZCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgdmlhIFdlYlNvY2tldDogXCIgKyBKU09OLnN0cmluZ2lmeShldmVudC5jb2RlKSArIFwiIC0gXCIgKyBldmVudC5yZWFzb24pO1xuICAgIH1cblxuICAgIHNlbmRXZWJSdGNPZmZlcihvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xuICAgICAgICBsZXQgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlV2ViUlRDT2ZmZXIob2ZmZXIpO1xuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhbiBSVEMgSWNlIENhbmRpZGF0ZSB0byB0aGUgU2VydmVyXG4gICAgICogQHBhcmFtIGNhbmRpZGF0ZSAtIFJUQyBJY2UgQ2FuZGlkYXRlXG4gICAgICovXG4gICAgc2VuZEljZUNhbmRpZGF0ZShjYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNlbmRpbmcgSWNlIENhbmRpZGF0ZVwiKTtcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0ICYmIHRoaXMud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IHRoaXMuV1NfT1BFTl9TVEFURSkge1xuICAgICAgICAgICAgLy93cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogJ2ljZUNhbmRpZGF0ZScsIGNhbmRpZGF0ZTogY2FuZGlkYXRlIH0pKTtcbiAgICAgICAgICAgIGxldCBJY2VDYW5kaWRhdGUgPSBuZXcgTWVzc2FnZVNlbmQuTWVzc2FnZUljZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xuXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKEljZUNhbmRpZGF0ZS5wYXlsb2FkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBXZWJzb2NrZXQgY29ubmVjdGlvblxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLndlYlNvY2tldC5jbG9zZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSBBZ2dyZWdhdGVkIFN0YXRzIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyXG4gICAgICogQHBhcmFtIHN0YXRzIC0gU3RhdHMgUGF5bG9hZFxuICAgICAqL1xuICAgIHNlbmRTdGF0cyhzdGF0czogQWdncmVnYXRlZFN0YXRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VTdGF0cyhzdGF0cyk7XG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQoZGF0YS5wYXlsb2FkKCkpO1xuICAgIH1cblxuICAgIC8qKiBFdmVudCB1c2VkIGZvciBEaXNwbGF5aW5nIHdlYnNvY2tldCBjbG9zZWQgbWVzc2FnZXMgKi9cbiAgICBvbldlYlNvY2tldE9uY2xvc2VPdmVybGF5TWVzc2FnZShldmVudDogQ2xvc2VFdmVudCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgTWVzc2FnZSBDb250YWlucyB0aGUgcGF5bG9hZCBvZiB0aGUgcGVlciBjb25uZWN0aW9uIG9wdGlvbnMgdXNlZCBmb3IgdGhlIFJUQyBQZWVyIGhhbmQgc2hha2VcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUNvbmZpZyAtIENvbmZpZyBNZXNzYWdlIHJlY2VpdmVkIGZyb20gaGUgc2lnbmFsaW5nIHNlcnZlclxuICAgICAqL1xuICAgIG9uQ29uZmlnKG1lc3NhZ2VDb25maWc6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VDb25maWcpIHsgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGljZUNhbmRpZGF0ZSAtIEljZSBDYW5kaWRhdGUgc2VudCBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyIHNlcnZlcidzIFJUQyBoYW5kIHNoYWtlXG4gICAgICovXG4gICAgb25JY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGVJbml0KSB7IH1cblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHdlYnNvY2tldCByZWNlaXZlcyB0aGUgYW5zd2VyIGZvciB0aGUgUlRDIHBlZXIgQ29ubmVjdGlvblxuICAgICAqIEBwYXJhbSBtZXNzYWdlQW5zd2VyIC0gVGhlIFJUQyBBbnN3ZXIgcGF5bG9hZCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXG4gICAgICovXG4gICAgb25XZWJSdGNBbnN3ZXIobWVzc2FnZUFuc3dlcjogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUFuc3dlcikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBmaXJlZCB3aXRoIHRoZSB3ZWJzb2NrZXQgcmVjZWl2ZXMgYSBpbnN0YW5jZSBzdGF0ZVxuICAgICAqIEBwYXJhbSBpbnN0YW5jZVN0YXRlIC0gVUUgSW5zdGFuY2UgU3RhdGVcbiAgICAgKi9cbiAgICBvbkluc3RhbmNlU3RhdGVDaGFuZ2UoaW5zdGFuY2VTdGF0ZTogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUluc3RhbmNlU3RhdGUpIHsgfVxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgZmlyZWQgd2l0aCB0aGUgd2Vic29ja2V0IHJlY2VpdmVzIGEgQXV0aGVudGljYXRpb24gUmVzcG9uc2VcbiAgICAgKiBAcGFyYW0gYXV0aFJlc3BvbnNlIC0gQXV0aGVudGljYXRpb24gUmVzcG9uc2VcbiAgICAgKi9cbiAgICBvbkF1dGhlbnRpY2F0aW9uUmVzcG9uc2UoYXV0aFJlc3BvbnNlOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQXV0aFJlc3BvbnNlKSB7IH1cbn1cblxuXG4vKiA1MjRmNGQ0ZCAqLyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSBcIi4vV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXJcIlxuaW1wb3J0IHsgQ29uZmlnLCBDb250cm9sU2NoZW1lVHlwZSB9IGZyb20gXCIuL0NvbmZpZy9Db25maWdcIlxuaW1wb3J0IHsgSURlbGVnYXRlIH0gZnJvbSBcIi4vRGVsZWdhdGUvSURlbGVnYXRlXCJcbmltcG9ydCB7IERlbGVnYXRlQmFzZSB9IGZyb20gXCIuL0RlbGVnYXRlL0RlbGVnYXRlQmFzZVwiXG5pbXBvcnQgeyBJV2ViUnRjUGxheWVyQ29udHJvbGxlciB9IGZyb20gXCIuL1dlYlJ0Y1BsYXllci9JV2ViUnRjUGxheWVyQ29udHJvbGxlclwiXG5cbmltcG9ydCB7IElPdmVybGF5IH0gZnJvbSAnLi9PdmVybGF5L0lPdmVybGF5JztcbmltcG9ydCB7IElUZXh0T3ZlcmxheSB9IGZyb20gJy4vT3ZlcmxheS9JVGV4dE92ZXJsYXknO1xuaW1wb3J0IHsgQWN0aW9uT3ZlcmxheSB9IGZyb20gXCIuL092ZXJsYXkvQWN0aW9uT3ZlcmxheVwiXG5pbXBvcnQgeyBBZmtPdmVybGF5IH0gZnJvbSAnLi9PdmVybGF5L0Fma092ZXJsYXknO1xuaW1wb3J0IHsgQWZrTG9naWMgfSBmcm9tICcuL0Fmay9BZmtMb2dpYyc7XG5cbmltcG9ydCB7IExhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gXCIuL0RhdGFDaGFubmVsL0xhdGVuY3lUZXN0UmVzdWx0c1wiO1xuaW1wb3J0IHsgRW5jb2RlciwgSW5pdGlhbFNldHRpbmdzLCBXZWJSVEMgfSBmcm9tICcuL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncyc7XG5pbXBvcnQgeyBBZ2dyZWdhdGVkU3RhdHMgfSBmcm9tICcuL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMnO1xuaW1wb3J0IHsgTWVzc2FnZUluc3RhbmNlU3RhdGUsIEluc3RhbmNlU3RhdGUsIE1lc3NhZ2VBdXRoUmVzcG9uc2UsIE1lc3NhZ2VBdXRoUmVzcG9uc2VPdXRjb21lVHlwZSB9IGZyb20gJy4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL0xvZ2dlci9Mb2dnZXInO1xuXG5leHBvcnQgeyBDb25maWcsIENvbnRyb2xTY2hlbWVUeXBlLCB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyLCBJRGVsZWdhdGUsIERlbGVnYXRlQmFzZSwgSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXIgfVxuZXhwb3J0IHsgTGF0ZW5jeVRlc3RSZXN1bHRzLCBJT3ZlcmxheSwgQWN0aW9uT3ZlcmxheSwgSVRleHRPdmVybGF5LCBBZmtPdmVybGF5LCBBZmtMb2dpYywgRW5jb2RlciwgSW5pdGlhbFNldHRpbmdzLCBXZWJSVEMsIEFnZ3JlZ2F0ZWRTdGF0cywgTWVzc2FnZUluc3RhbmNlU3RhdGUsIEluc3RhbmNlU3RhdGUsIE1lc3NhZ2VBdXRoUmVzcG9uc2UsIE1lc3NhZ2VBdXRoUmVzcG9uc2VPdXRjb21lVHlwZSwgTG9nZ2VyIH1cblxuZGVjbGFyZSB2YXIgTElCUkFSWV9WRVJTSU9OOiBzdHJpbmc7XG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IExJQlJBUllfVkVSU0lPTjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==