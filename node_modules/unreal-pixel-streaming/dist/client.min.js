(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["client"] = factory();
	else
		root["client"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/sdp/sdp.js":
/*!*********************************!*\
  !*** ./node_modules/sdp/sdp.js ***!
  \*********************************/
/***/ ((module) => {

"use strict";
/* eslint-env node */


// SDP helpers.
const SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(line => line.trim());
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ?
    'm=' + part : part).trim() + '\r\n');
};

// Returns the session description.
SDPUtils.getDescription = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function(line) {
  let parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7],
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function(candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);

  const component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  let parts = line.substr(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10), // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  const parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  const parsed = {};
  let kv;
  const parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  let line = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  const parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' '),
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  let lines = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10),
  };
  const colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function(line) {
  const parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function(line) {
  const parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint),
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  const parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  const parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: [],
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  let sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;

  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(line => {
      const parts = line.substr(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc,
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  const rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(obj => obj.attribute === 'cname')[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function(rtcpParameters) {
  let sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
      ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};


// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(msidParts => msidParts.attribute === 'msid');
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize,
    };
  }
  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize,
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  let output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n',
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  const user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);
  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' '),
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5],
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  const lines = SDPUtils.splitLines(blob);
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ }),

/***/ "./src/Afk/AfkLogic.ts":
/*!*****************************!*\
  !*** ./src/Afk/AfkLogic.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* binding */ AfkLogic)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");

var AfkLogic = /** @class */ (function () {
    function AfkLogic(controlScheme, afkTimeout) {
        this.warnTimeout = 0;
        this.closeTimeout = 10;
        this.active = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.warnTimeout = afkTimeout;
        this.controlScheme = controlScheme;
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    AfkLogic.prototype.onAfkClick = function () {
        this.hideCurrentOverlay();
        clearInterval(this.countDownTimer);
        this.startAfkWarningTimer();
    };
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    AfkLogic.prototype.startAfkWarningTimer = function () {
        if (this.warnTimeout > 0) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    };
    /**
     * Stop the timer which when elapsed will warn the user they are inactive.
     */
    AfkLogic.prototype.stopAfkWarningTimer = function () {
        this.active = false;
    };
    /**
     * If the user interacts then reset the warning timer.
     */
    AfkLogic.prototype.resetAfkWarningTimer = function () {
        var _this = this;
        if (this.active) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(function () { _this.activateAfkEvent(); }, this.warnTimeout * 1000);
        }
    };
    /**
     * Show the AFK overlay and begin the countDown
     */
    AfkLogic.prototype.activateAfkEvent = function () {
        var _this = this;
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.stopAfkWarningTimer();
        // instantiate a new overlay 
        this.showAfkOverlay();
        // update our countDown timer and overlay contents
        this.countDown = this.closeTimeout;
        this.updateAfkCountdown();
        // if we are in locked mouse exit pointerlock 
        if (this.controlScheme == _Config_Config__WEBPACK_IMPORTED_MODULE_0__.ControlSchemeType.LockedMouse) {
            document.exitPointerLock();
        }
        // reset our countDown interval accordingly 
        this.countDownTimer = setInterval(function () {
            _this.countDown--;
            if (_this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                _this.hideCurrentOverlay();
                _this.closeWebSocket();
                // switch off the afk feature as stream has closed 
                _this.active = false;
                _this.warnTimeout = 0;
            }
            else {
                // Update the countDown message.
                _this.updateAfkCountdown();
            }
        }, 1000);
    };
    /**
     * An override method for updating the afk countdown number in the overlay
     */
    AfkLogic.prototype.updateAfkCountdown = function () { };
    /**
     * An override method for showing the afk overlay
     */
    AfkLogic.prototype.showAfkOverlay = function () { };
    /**
     * An override method for hiding the afk overlay
     */
    AfkLogic.prototype.hideCurrentOverlay = function () { };
    /**
     * An override method for closing the websocket connection from the clients side
     */
    AfkLogic.prototype.closeWebSocket = function () { };
    return AfkLogic;
}());



/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ ControlSchemeType)
/* harmony export */ });
var Config = /** @class */ (function () {
    /**
     * @param signallingServerAddress - the address of the signaling server
     * @param playerElement - the player element ID
     */
    function Config(signallingServerAddress, playerElement) {
        // enable the autoplay of the video
        this.enableSpsAutoplay = true;
        // start the video muted
        this.startVideoMuted = false;
        // set the amount of wait time in seconds while there is inactivity for afk to occur 
        this.afkTimeout = 120;
        // The control scheme controls the behaviour of the mouse when it interacts with the WebRTC player.
        this.controlScheme = ControlSchemeType.HoveringMouse;
        // Browser keys are those which are typically used by the browser UI. We usually want to suppress these to allow, for example, UE4 to show shader complexity with the F5 key without the web page refreshing.
        this.suppressBrowserKeys = false;
        // UE4 has a fake touches option which fakes a single finger touch when the user drags with their mouse. 
        // We may perform the reverse; a single finger touch may be converted into a mouse drag UE4 side. This allows a non-touch application to be controlled partially via a touch device.
        this.fakeMouseWithTouches = true;
        this.signallingServerAddress = signallingServerAddress;
        this.playerElement = document.getElementById(playerElement);
    }
    // PRESET OPTIONS
    // TODO: expose config through delegate so we don't need static
    Config._enableVerboseLogging = false;
    return Config;
}());

/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/Custom/EmitClass.ts":
/*!*********************************!*\
  !*** ./src/Custom/EmitClass.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeDescriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
/* harmony import */ var _UeInstanceMessage_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UeInstanceMessage/UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
/* harmony import */ var _EventsClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventsClass */ "./src/Custom/EventsClass.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var EmitClass = /** @class */ (function (_super) {
    __extends(EmitClass, _super);
    function EmitClass(data) {
        return _super.call(this, data) || this;
    }
    Object.defineProperty(EmitClass.prototype, "verification_id", {
        get: function () {
            if (typeof window.ps_callback_id !== 'number') {
                window.ps_callback_id = 0;
            }
            else {
                window.ps_callback_id += 1;
            }
            var index = window.ps_callback_id;
            return "verification_".concat(index);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Send emit with json
     * @param descriptor - The string descriptor to send
     */
    EmitClass.prototype.emit = function (descriptor) {
        this.sendDescriptor(_UeInstanceMessage_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.uiInteraction, descriptor);
    };
    /**
     * Send emit with json
     * @param descriptor - The any descriptor to send
     */
    EmitClass.prototype.emitJson = function (descriptor) {
        try {
            var payload = JSON.stringify(descriptor);
            this.emit(payload);
            _EventsClass__WEBPACK_IMPORTED_MODULE_2__["default"].commands.dispatch(payload);
        }
        catch (err) {
            console.error('Json convertion error', descriptor);
        }
    };
    /**
       * Send emit with json
       * @param command - The string descriptor to send
       * @param body - The JSON descriptor to send
       */
    EmitClass.prototype.emitCommand = function (command, body, initiator) {
        if (initiator === void 0) { initiator = 'browser'; }
        var payload = {
            command: command,
            verification_id: this.verification_id,
            initiator: initiator,
            request: { body: body },
        };
        this.emitJson(payload);
        return payload;
    };
    EmitClass.prototype.emitCommandSystem = function (command, body) {
        return this.emitCommand(command, body, 'system');
    };
    EmitClass.prototype.emitConsole = function (descriptor) {
        var payload = {
            Console: descriptor
        };
        this.emit(JSON.stringify(payload));
    };
    return EmitClass;
}(_UeInstanceMessage_UeDescriptor__WEBPACK_IMPORTED_MODULE_0__.UeDescriptor));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmitClass);


/***/ }),

/***/ "./src/Custom/EventsClass.ts":
/*!***********************************!*\
  !*** ./src/Custom/EventsClass.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _useCopyright__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useCopyright */ "./src/Custom/useCopyright.ts");


var KEYS = {
    PS_CALLBACK: 'PS_CALLBACK',
    PS_COMMAND: 'PS_COMMAND',
    MOUSE_ACTION: 'MOUSE_ACTION',
    WEBRTC_STATUS: 'WEBRTC_STATUS',
    UE_INITIAL_SETTINGS: 'UE_INITIAL_SETTINGS',
};
var EventsClass = new /** @class */ (function () {
    function class_1() {
    }
    class_1.prototype._event = function (key) {
        return {
            key: key,
            dispatch: function (detail) {
                document.dispatchEvent(new CustomEvent(key, { detail: detail }));
            },
        };
    };
    Object.defineProperty(class_1.prototype, "callbacks", {
        get: function () {
            return this._event(KEYS.PS_CALLBACK);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "commands", {
        get: function () {
            return this._event(KEYS.PS_COMMAND);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "mouseAction", {
        get: function () {
            return this._event(KEYS.MOUSE_ACTION);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "ueInitialSettings", {
        get: function () {
            return this._event(KEYS.UE_INITIAL_SETTINGS);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "mouse", {
        get: function () {
            var _this = this;
            return {
                move: function (offsetX, offsetY, movementX, movementY) {
                    // this.mouseAction.dispatch({ variant: 'move', offsetX, offsetY, movementX, movementY })
                    if (_this.lastMouseButtonEvent === 'down') {
                        _this.lastMouseButtonEvent = 'moveStart';
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('Mouse move start');
                        _this.mouseAction.dispatch({ variant: 'moveStart', offsetX: offsetX, offsetY: offsetY, movementX: movementX, movementY: movementY });
                    }
                },
                down: function (button, offsetX, offsetY) {
                    _this.mouseAction.dispatch({ variant: 'down', offsetX: offsetX, offsetY: offsetY });
                    _this.lastMouseButtonEvent = 'down';
                },
                up: function (button, offsetX, offsetY) {
                    _this.mouseAction.dispatch({ variant: 'up', offsetX: offsetX, offsetY: offsetY });
                    if (_this.lastMouseButtonEvent === 'moveStart') {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('Mouse move stop');
                        _this.mouseAction.dispatch({ variant: 'moveStop', offsetX: offsetX, offsetY: offsetY });
                    }
                    _this.lastMouseButtonEvent = 'up';
                },
                wheel: function (wheelDelta, offsetX, offsetY) {
                    _this.mouseAction.dispatch({ variant: 'wheel', wheelDelta: wheelDelta, offsetX: offsetX, offsetY: offsetY });
                },
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1.prototype, "webrtcStatus", {
        // For external calls from NativeDOMDelegate.ts
        get: function () {
            return this._event(KEYS.WEBRTC_STATUS);
        },
        enumerable: false,
        configurable: true
    });
    class_1.prototype.setWebrtcStatus = function (status, errorCode) {
        if (errorCode === void 0) { errorCode = null; }
        if (status === this.webrtcStatusList.active) {
            _useCopyright__WEBPACK_IMPORTED_MODULE_1__["default"].start();
        }
        else {
            _useCopyright__WEBPACK_IMPORTED_MODULE_1__["default"].stop();
        }
        switch (errorCode) {
            case 1005:
                status = this.webrtcStatusList.stopped;
                break;
            case 1006:
                status = this.webrtcStatusList.error;
                break;
        }
        this.webrtcStatus.dispatch({ status: status, errorCode: errorCode });
    };
    Object.defineProperty(class_1.prototype, "webrtcStatusList", {
        get: function () {
            return {
                initializing: 'initializing',
                initialized_no_autoplay: 'initialized_no_autoplay',
                initialized: 'initialized',
                active: 'active',
                activation: 'activation',
                disconnected: 'disconnected',
                stopped: 'stopped',
                error: 'error',
            };
        },
        enumerable: false,
        configurable: true
    });
    return class_1;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventsClass);


/***/ }),

/***/ "./src/Custom/index.ts":
/*!*****************************!*\
  !*** ./src/Custom/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EmitClass": () => (/* reexport safe */ _EmitClass__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "EventsClass": () => (/* reexport safe */ _EventsClass__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _EventsClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventsClass */ "./src/Custom/EventsClass.ts");
/* harmony import */ var _EmitClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EmitClass */ "./src/Custom/EmitClass.ts");





/***/ }),

/***/ "./src/Custom/useCopyright.ts":
/*!************************************!*\
  !*** ./src/Custom/useCopyright.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./src/Custom/config.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_config__WEBPACK_IMPORTED_MODULE_0__);

var refCopyrightInterval = null;
var useCopyright = new /** @class */ (function () {
    function class_1() {
    }
    class_1.prototype.start = function () {
        var _this = this;
        clearInterval(refCopyrightInterval);
        refCopyrightInterval = setInterval(function () {
            _this.injector();
        }, 1000);
    };
    class_1.prototype.stop = function () {
        clearInterval(refCopyrightInterval);
    };
    class_1.prototype.injector = function () {
        var xpath = "//div[text()='".concat((_config__WEBPACK_IMPORTED_MODULE_0___default().systemName), "']");
        var matchingElement = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (!matchingElement) {
            var dc_1 = document.createElement("div");
            dc_1.addEventListener('mouseover', function () {
                dc_1.style.backgroundColor = "rgba(0, 0, 0, .5)";
            });
            dc_1.addEventListener('mouseleave', function () {
                dc_1.style.backgroundColor = "rgba(0, 0, 0, .2)";
            });
            dc_1.innerText = (_config__WEBPACK_IMPORTED_MODULE_0___default().systemName);
            dc_1.onclick = function (event) {
                event.preventDefault();
                event.stopPropagation();
                window.open((_config__WEBPACK_IMPORTED_MODULE_0___default().websiteUrl));
            };
            dc_1.setAttribute('style', "\n          opacity: 1 !important;\n          display: block !important;\n          visibility: visible !important;\n          position: fixed !important;\n          left: 20px !important;\n          top: 20px !important;\n          z-index: 999999999999999999 !important;\n          background-color: rgba(0, 0, 0, .2);\n          border: solid 1px rgba(255,255,255, .1) !important;\n          color: #fff !important;\n          padding: 4px 10px !important;\n          border-radius: 100px !important;\n          font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n          font-size: .8rem !important;\n          line-height: 100% !important;\n          cursor: pointer !important;\n          transition: background-color 300ms linear;\n          user-select: none !important;\n        ");
            document.body.appendChild(dc_1);
        }
    };
    return class_1;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useCopyright);


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataChannelController": () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataChannelReceiveMessageType */ "./src/DataChannel/DataChannelReceiveMessageType.ts");
/* harmony import */ var _InitialSettings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _Custom___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Custom/ */ "./src/Custom/index.ts");




// ::START

// ::END
/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
var DataChannelController = /** @class */ (function () {
    function DataChannelController() {
        this.isReceivingFreezeFrame = false;
    }
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    DataChannelController.prototype.createDataChannel = function (peerConnection, label, datachannelOptions) {
        this.logging = false;
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = "arraybuffer";
        this.dataChannel.onopen = this.handleOnOpen.bind(this);
        this.dataChannel.onclose = this.handleOnClose.bind(this);
        this.dataChannel.onmessage = this.handleOnMessage.bind(this);
    };
    /**
     * Handles when the Data Channel is opened
     */
    DataChannelController.prototype.handleOnOpen = function () {
        console.debug("Data Channel: " + this.label + " is opened.");
    };
    /**
     * Handles when the Data Channel is closed
     */
    DataChannelController.prototype.handleOnClose = function () {
        console.debug("Data Channel: " + this.label + " is closed.");
    };
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    DataChannelController.prototype.handleOnMessage = function (event) {
        var message = new Uint8Array(event.data);
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Message incoming");
        }
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Message:" + message);
        }
        //there is logic for when a freeze frame is sent;
        // if (this.isReceivingFreezeFrame) {
        //     this.onReceivingFreezeFrame(message);
        // }
        switch (message[0]) {
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.QualityControlOwnership: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.QualityControlOwnership");
                var QualityOwnership = new Boolean(message[1]).valueOf();
                this.onQualityControlOwnership(QualityOwnership);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Response: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Response");
                this.onResponse(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Command: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Command");
                this.onCommand(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.FreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.FreezeFrame");
                this.processFreezeFrameMessage(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.UnfreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.UnfreezeFrame");
                this.isReceivingFreezeFrame = false;
                this.onUnFreezeFrame();
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.VideoEncoderAvgQP: {
                if (this.logging) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.VideoEncoderAvgQP");
                }
                var AvgQP = Number(new TextDecoder("utf-16").decode(message.slice(1)));
                this.onVideoEncoderAvgQP(AvgQP);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.latencyTest: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.latencyTest");
                var latencyAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iLatencyTestResults = JSON.parse(latencyAsString);
                var latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__.LatencyTestResults();
                Object.assign(latencyTestResults, iLatencyTestResults);
                latencyTestResults.processFields();
                this.onLatencyTestResult(latencyTestResults);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.InitialSettings: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.InitialSettings");
                var payloadAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iInitialSettings = JSON.parse(payloadAsString);
                var initialSettings = new _InitialSettings__WEBPACK_IMPORTED_MODULE_2__.InitialSettings();
                Object.assign(initialSettings, iInitialSettings);
                initialSettings.ueCompatible();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog(payloadAsString);
                this.OnInitialSettings(initialSettings);
                break;
            }
            default: {
                console.error("unknown message sent on the Data channel");
                break;
            }
        }
    };
    /**
     * Fired when a Response message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onResponse = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Response");
        var responses = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog(responses);
        //add to response handlers 
        // ::START
        _Custom___WEBPACK_IMPORTED_MODULE_4__.EventsClass.callbacks.dispatch(responses);
        // ::END
    };
    /**
     * Fired when a Command message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onCommand = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("DataChannelReceiveMessageType.Command");
        var commandAsString = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Data Channel Command: " + commandAsString);
        var command = JSON.parse(commandAsString);
        if (command.command === "onScreenKeyboard") {
            //show on screen Keyboard;
        }
        // ::START
        _Custom___WEBPACK_IMPORTED_MODULE_4__.EventsClass.commands.dispatch(command);
        // ::END
    };
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    DataChannelController.prototype.sendData = function (data) {
        // reset the afk inactivity
        this.resetAfkWarningTimerOnDataSend();
        if (this.dataChannel && this.dataChannel.readyState == "open") {
            this.dataChannel.send(data);
        }
        else {
            console.error("Message Failed: " + new Uint8Array(data));
        }
    };
    /**
     * Fired when the UE Instance updates who has Quality Ownership
     * @param hasQualityOwnership - Does the client have Quality Ownership
     */
    DataChannelController.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    /**
     * Fired when the UE Instance sends freeze frame data
     * @param message - Freeze Frame Data
     */
    DataChannelController.prototype.processFreezeFrameMessage = function (message) { };
    /**
     * Fired when the UE Instance sends a un Freeze Frame
     */
    DataChannelController.prototype.onUnFreezeFrame = function () { };
    /**
     * Fired when the UE Instance sends the Video Encoder Avg QP
     * @param AvgQP - Avg QP
     */
    DataChannelController.prototype.onVideoEncoderAvgQP = function (AvgQP) { };
    /**
     * Fired when the UE Instance sends Latency test Results
     * @param latencyTestResults - Latency Test Results
     */
    DataChannelController.prototype.onLatencyTestResult = function (latencyTestResults) { };
    /**
     * Fired when the UE Instance sends Initial Settings
     * @param InitialSettings - Initial Settings
     */
    DataChannelController.prototype.OnInitialSettings = function (InitialSettings) { };
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    DataChannelController.prototype.resetAfkWarningTimerOnDataSend = function () { };
    return DataChannelController;
}());



/***/ }),

/***/ "./src/DataChannel/DataChannelReceiveMessageType.ts":
/*!**********************************************************!*\
  !*** ./src/DataChannel/DataChannelReceiveMessageType.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataChannelReceiveMessageType": () => (/* binding */ DataChannelReceiveMessageType)
/* harmony export */ });
/**
 * Data Channel Receives Message Type
 */
var DataChannelReceiveMessageType;
(function (DataChannelReceiveMessageType) {
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["QualityControlOwnership"] = 0] = "QualityControlOwnership";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Response"] = 1] = "Response";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Command"] = 2] = "Command";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["FreezeFrame"] = 3] = "FreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["UnfreezeFrame"] = 4] = "UnfreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["VideoEncoderAvgQP"] = 5] = "VideoEncoderAvgQP";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["latencyTest"] = 6] = "latencyTest";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["InitialSettings"] = 7] = "InitialSettings";
})(DataChannelReceiveMessageType || (DataChannelReceiveMessageType = {}));


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Encoder": () => (/* binding */ Encoder),
/* harmony export */   "InitialSettings": () => (/* binding */ InitialSettings),
/* harmony export */   "PixelStreaming": () => (/* binding */ PixelStreaming),
/* harmony export */   "WebRTC": () => (/* binding */ WebRTC)
/* harmony export */ });
/**
 * Latency Test Results Data
 */
var InitialSettings = /** @class */ (function () {
    function InitialSettings() {
        this.PixelStreaming = new PixelStreaming();
        this.Encoder = new Encoder();
        this.WebRTC = new WebRTC();
    }
    InitialSettings.prototype.ueCompatible = function () {
        if (this.WebRTC.MaxFPS != null) {
            this.WebRTC.FPS = this.WebRTC.MaxFPS;
        }
    };
    return InitialSettings;
}());

var PixelStreaming = /** @class */ (function () {
    function PixelStreaming() {
    }
    return PixelStreaming;
}());

var Encoder = /** @class */ (function () {
    function Encoder() {
    }
    return Encoder;
}());

var WebRTC = /** @class */ (function () {
    function WebRTC() {
    }
    return WebRTC;
}());



/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatencyTestResults": () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/**
 * Latency Test Results Data
 */
var LatencyTestResults = /** @class */ (function () {
    function LatencyTestResults() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    LatencyTestResults.prototype.setFrameDisplayDeltaTime = function (DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    };
    LatencyTestResults.prototype.processFields = function () {
        if (this.EncodeMs == null && (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            console.log("Setting Encode Ms");
            console.log(this.PostEncodeTimeMs);
            console.log(this.PreEncodeTimeMs);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null && (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            console.log("Setting CaptureToSendMs Ms");
            console.log(this.PostCaptureTimeMs);
            console.log(this.PreCaptureTimeMs);
            this.CaptureToSendMs = this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    };
    return LatencyTestResults;
}());



/***/ }),

/***/ "./src/Delegate/DelegateBase.ts":
/*!**************************************!*\
  !*** ./src/Delegate/DelegateBase.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DelegateBase": () => (/* binding */ DelegateBase)
/* harmony export */ });
/* harmony import */ var _Custom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Custom */ "./src/Custom/index.ts");
// ::START

// ::END
/**
 * Provides common base functionality for delegates that implement the IDelegate interface
*/
var DelegateBase = /** @class */ (function () {
    /**
     * @param config - A newly instantiated config object
     * returns the base delegate object with the config inside it along with a new instance of the Overlay controller class
     */
    function DelegateBase(config) {
        this.shouldShowPlayOverlay = true;
        this.config = config;
    }
    /**
     * Hides the current overlay
     */
    DelegateBase.prototype.hideCurrentOverlay = function () {
        if (this.currentOverlay != null) {
            this.currentOverlay.hide();
            this.currentOverlay = null;
        }
    };
    ;
    /**
     * Shows the connect overlay
     */
    DelegateBase.prototype.showConnectOverlay = function () {
        this.hideCurrentOverlay();
        this.connectOverlay.show();
        this.currentOverlay = this.connectOverlay;
    };
    ;
    /**
     * Shows the play overlay
     */
    DelegateBase.prototype.showPlayOverlay = function () {
        this.hideCurrentOverlay();
        this.playOverlay.show();
        this.currentOverlay = this.playOverlay;
    };
    ;
    /**
     * Shows the text overlay
     */
    DelegateBase.prototype.showTextOverlay = function (text) {
        this.hideCurrentOverlay();
        this.infoOverlay.update(text);
        this.infoOverlay.show();
        this.currentOverlay = this.infoOverlay;
    };
    ;
    /**
     * Shows the error overlay
     */
    DelegateBase.prototype.showErrorOverlay = function (text) {
        this.hideCurrentOverlay();
        this.errorOverlay.update(text);
        this.errorOverlay.show();
        this.currentOverlay = this.errorOverlay;
    };
    ;
    /**
     * Activates the connect overlays action
     */
    DelegateBase.prototype.onConnectAction = function () {
        this.connectOverlay.activate();
    };
    ;
    /**
     * Activates the play overlays action
     */
    DelegateBase.prototype.onPlayAction = function () {
        this.playOverlay.activate();
    };
    ;
    /**
     * Shows the afk overlay
     * @param countDown the countdown number for the afk countdown
     */
    DelegateBase.prototype.showAfkOverlay = function (countDown) {
        this.hideCurrentOverlay();
        this.updateAfkOverlay(countDown);
        this.afkOverlay.show();
        this.currentOverlay = this.afkOverlay;
    };
    ;
    /**
     * Update the afk overlays countdown number
     * @param countDown the new countdown number
     */
    DelegateBase.prototype.updateAfkOverlay = function (countDown) {
        this.afkOverlay.update(countDown);
    };
    ;
    /**
     * Activates the afk overlays action
     */
    DelegateBase.prototype.onAfkAction = function () {
        this.afkOverlay.activate();
    };
    ;
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param iWebRtcPlayerController
     */
    DelegateBase.prototype.setIWebRtcPlayerController = function (iWebRtcPlayerController) {
        var _this = this;
        this.iWebRtcController = iWebRtcPlayerController;
        this.iWebRtcController.resizePlayerStyle();
        // update the freeze frame object in the webRtc player controller with the new overlay  
        //this.iWebRtcController.freezeFrame.setFreezeFrameOverlay(//this.freezeFrameOverlay);
        // set up the connect overlays action
        this.setWebRtcConnectOverlay();
        // set up the afk overlays action 
        this.afkOverlay.onAction(function () { return _this.iWebRtcController.onAfkClick(); });
        // set up the play overlays action 
        this.playOverlay.onAction(function () { return _this.iWebRtcController.playStream(); });
    };
    /**
     * Create the webRtc connect overlay based on the autoplay option. This should be done after iWebRtcController has been instantiated
     */
    DelegateBase.prototype.setWebRtcConnectOverlay = function () {
        var _this = this;
        // set up if the auto play will be used or regular click to start
        if (!this.config.enableSpsAutoplay) {
            // Build the webRtc connect overlay Event Listener and show the connect overlay
            this.connectOverlay.onAction(function () { return _this.iWebRtcController.connectToSignallingSever(); });
            this.showConnectOverlay();
        }
        else {
            // if autoplaying show an info overlay while while waiting for the connection to begin 
            this.showTextOverlay("Auto Connecting Now");
            this.iWebRtcController.connectToSignallingSever();
        }
    };
    /**
     * Set up functionality to happen when an instance state change occurs
     * @param instanceState - the message instance state
     */
    DelegateBase.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Set up functionality to happen when receiving an auth response
     * @param authResponse - the auth response message type
     */
    DelegateBase.prototype.onAuthenticationResponse = function (authResponse) { };
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    DelegateBase.prototype.onWebRtcAnswer = function () {
        this.showTextOverlay("RTC Answer");
    };
    /**
     * Creates the play overlay for playing the video stream
     */
    DelegateBase.prototype.onShowPlayOverlay = function () {
        // set shouldShowPlayOverlay to false in this class and also in the freeze
        this.shouldShowPlayOverlay = false;
        //this.iWebRtcController.freezeFrame.setShouldShowPlayOverlay(this.shouldShowPlayOverlay);
    };
    /**
     * Event fired when the video is disconnected
     */
    DelegateBase.prototype.onDisconnect = function (event) {
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_0__.EventsClass.setWebrtcStatus(_Custom__WEBPACK_IMPORTED_MODULE_0__.EventsClass.webrtcStatusList.disconnected, event.code);
        // ::END
        this.showErrorOverlay("Disconnected: ".concat(event.code, " -  ").concat(event.reason));
    };
    /**
     * Handles when Web Rtc is connecting
     */
    DelegateBase.prototype.onWebRtcConnecting = function () {
        this.showTextOverlay("Starting connection to server, please wait");
    };
    /**
     * Handles when Web Rtc has connected
     */
    DelegateBase.prototype.onWebRtcConnected = function () {
        this.showTextOverlay("WebRTC connected, waiting for video");
    };
    /**
     * Handles when Web Rtc fails to connect
     */
    DelegateBase.prototype.onWebRtcFailed = function () {
        this.showErrorOverlay("Unable to setup video");
    };
    /**
     * Set up methods and functions to run when the video is initialised
     */
    DelegateBase.prototype.onVideoInitialised = function () { };
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    DelegateBase.prototype.onLatencyTestResult = function (latency) { };
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    DelegateBase.prototype.onVideoStats = function (videoStats) { };
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    DelegateBase.prototype.onVideoEncoderAvgQP = function (QP) { };
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    DelegateBase.prototype.onInitialSettings = function (settings) { };
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    DelegateBase.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    return DelegateBase;
}());



/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FakeTouchController": () => (/* binding */ FakeTouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");


/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoPlayerElement - The video player DOM element
 */
var FakeTouchController = /** @class */ (function () {
    function FakeTouchController(dataChannelController, videoPlayerElement) {
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoPlayerElement = videoPlayerElement;
        document.ontouchstart = this.onTouchStart.bind(this);
        document.ontouchend = this.onTouchEnd.bind(this);
        document.ontouchmove = this.onTouchMove.bind(this);
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    FakeTouchController.prototype.onTouchStart = function (touch) {
        if (this.finger == null) {
            var first_touch = touch.changedTouches[0];
            this.finger = {
                ID: first_touch.identifier,
                X: first_touch.clientX - this.videoPlayerElement.getBoundingClientRect().left,
                Y: first_touch.clientY - this.videoPlayerElement.getBoundingClientRect().top
            };
            var mouseEvent = new MouseEvent(touch.type, first_touch);
            this.videoPlayerElement.onmouseenter(mouseEvent);
            this.ueInputMouseMessage.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, this.finger.X, this.finger.Y);
        }
    };
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchEnd = function (touchEvent) {
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, x, y);
                var mouseEvent = new MouseEvent(touchEvent.type, touch);
                this.videoPlayerElement.onmouseleave(mouseEvent);
                this.finger = null;
            }
        }
    };
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchMove = function (touchEvent) {
        for (var i = 0; i < touchEvent.touches.length; i++) {
            var touch = touchEvent.touches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                // ::START
                x *= 75;
                y *= 75;
                // let _x = x - this.finger.X
                // if (x < this.finger.X) {
                //     console.log('>>left')
                // } else if (x > this.finger.X) {
                //     console.log('>>right')
                // }
                // console.log('@@', this.finger.X, x, x - this.finger.X)
                // ::END
                this.ueInputMouseMessage.sendMouseMove(x, y, x - this.finger.X, y - this.finger.Y);
                this.finger.X = x;
                this.finger.Y = y;
            }
        }
    };
    return FakeTouchController;
}());



/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GamePadController": () => (/* binding */ GamePadController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputGamePadMessage */ "./src/UeInstanceMessage/UeInputGamePadMessage.ts");

/**
 * The class that handles the functionality of gamepads and controllers
 */
var GamePadController = /** @class */ (function () {
    /**
     * @param dataChannelController - the data chanel controller
     */
    function GamePadController(dataChannelController) {
        this.ueInputGamePadMessage = new _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputGamePadMessage(dataChannelController);
        this.logging = true;
        if ("GamepadEvent" in window) {
            window.addEventListener("gamepadconnected", this.gamePadConnectHandler.bind(this));
            window.addEventListener("gamepaddisconnected", this.gamePadDisconnectHandler.bind(this));
        }
        else if ("WebKitGamepadEvent" in window) {
            window.addEventListener("webkitgamepadconnected", this.gamePadConnectHandler.bind(this));
            window.addEventListener("webkitgamepaddisconnected", this.gamePadDisconnectHandler.bind(this));
        }
        this.controllers = [];
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadConnectHandler = function (gamePadEvent) {
        if (this.logging) {
            console.log("Gamepad connect handler");
        }
        var gamepad = gamePadEvent.gamepad;
        var temp = {
            currentState: gamepad,
            prevState: gamepad
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        if (this.logging) {
            console.log("gamepad: " + gamepad.id + " connected");
        }
        window.requestAnimationFrame(this.updateStatus.bind(this));
    };
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadDisconnectHandler = function (gamePadEvent) {
        if (this.logging) {
            console.log("Gamepad disconnect handler");
            console.log("gamepad: " + gamePadEvent.gamepad.id + " disconnected");
        }
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter(function (controller) { return controller !== undefined; });
    };
    /**
     * Scan for connected gamepads
     */
    GamePadController.prototype.scanGamePads = function () {
        var gamepads = ((navigator.getGamepads) ? navigator.getGamepads() : []); //  : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
        for (var i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && (gamepads[i].index in this.controllers)) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    };
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    GamePadController.prototype.updateStatus = function () {
        this.scanGamePads();
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {
            var controller = _a[_i];
            try {
                var currentState = controller.currentState;
                for (var i = 0; i < controller.currentState.buttons.length; i++) {
                    var currentButton = controller.currentState.buttons[i];
                    var previousButton = controller.prevState.buttons[i];
                    // Button 6 is actually the left trigger, send it to UE as an analog axis
                    // Button 7 is actually the right trigger, send it to UE as an analog axis
                    // The rest are normal buttons. Treat as such
                    if (currentButton.pressed && !previousButton.pressed) {
                        // New press
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, false);
                        }
                    }
                    else if (!currentButton.pressed && previousButton.pressed) {
                        // release
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, 0);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, 0);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonReleased(currentState.index, i);
                        }
                    }
                    else if (currentButton.pressed && previousButton.pressed) {
                        // repeat press / hold
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, true);
                        }
                    }
                    // Last case is button isn't currently pressed and wasn't pressed before. This doesn't need an else block
                }
                for (var i = 0; i < currentState.axes.length; i += 2) {
                    var x = parseFloat(currentState.axes[i].toFixed(4));
                    // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                    var y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                    if (i === 0) {
                        // left stick
                        // axis 1 = left horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 1, x);
                        // axis 2 = left vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 2, y);
                    }
                    else if (i === 2) {
                        // right stick
                        // axis 3 = right horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 3, x);
                        // axis 4 = right vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 4, y);
                    }
                }
                this.controllers[currentState.index].prevState = currentState;
            }
            catch (error) {
                console.error("Oh dear the gamepad poll loop has thrown an error");
            }
        }
        window.requestAnimationFrame(this.updateStatus.bind(this));
    };
    return GamePadController;
}());



/***/ }),

/***/ "./src/Inputs/GyroController.ts":
/*!**************************************!*\
  !*** ./src/Inputs/GyroController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GyroController": () => (/* binding */ GyroController)
/* harmony export */ });
/**
 * The Class that handles gyro input
 */
var GyroController = /** @class */ (function () {
    function GyroController(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    return GyroController;
}());



/***/ }),

/***/ "./src/Inputs/InputController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/InputController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputController": () => (/* binding */ InputController)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseLockedEvents */ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseHoverEvents */ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts");
/* harmony import */ var _GyroController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GyroController */ "./src/Inputs/GyroController.ts");









/**
 * Class for handling inputs for mouse and keyboard
 */
var InputController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     */
    function InputController(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    /**
     * registers browser key events
     * @param suppressBrowserKeys - option to suppress browser keys
     */
    InputController.prototype.registerKeyBoard = function (suppressBrowserKeys) {
        console.debug("Register Keyboard Events");
        this.keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.dataChannelController, suppressBrowserKeys);
        this.keyboardController.registerKeyBoardEvents();
    };
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     * @param videoPlayerController - the video player controller
     */
    InputController.prototype.registerMouse = function (controlScheme, videoPlayerController) {
        console.debug("Register Mouse Events");
        this.mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.dataChannelController);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.LockedMouse:
                videoPlayerController.videoInputBindings = new _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__.VideoPlayerMouseLockedEvents(videoPlayerController.videoElement, this.mouseController);
                videoPlayerController.videoElement.onclick = videoPlayerController.handleClick.bind(videoPlayerController);
                document.addEventListener('pointerlockchange', videoPlayerController.handleLockStateChange.bind(videoPlayerController), false);
                document.addEventListener('mozpointerlockchange', videoPlayerController.handleLockStateChange.bind(videoPlayerController), false);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.HoveringMouse:
                videoPlayerController.videoInputBindings = new _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__.VideoPlayerMouseHoverEvents(this.mouseController);
                // set the onclick to null if the input bindings were previously set to pointerlock
                videoPlayerController.videoElement.onclick = null;
                document.onmousemove = videoPlayerController.videoInputBindings.handleMouseMove.bind(videoPlayerController.videoInputBindings);
                document.onwheel = videoPlayerController.videoInputBindings.handleMouseWheel.bind(videoPlayerController.videoInputBindings);
                // ::START
                videoPlayerController.videoElement.oncontextmenu = videoPlayerController.videoInputBindings.handleContextMenu.bind(videoPlayerController.videoInputBindings);
                // ::END
                videoPlayerController.videoElement.onmousedown = videoPlayerController.videoInputBindings.handleMouseDown.bind(videoPlayerController.videoInputBindings);
                videoPlayerController.videoElement.onmouseup = videoPlayerController.videoInputBindings.handleMouseUp.bind(videoPlayerController.videoInputBindings);
                break;
            default:
                console.warn("unknown Control Scheme Type Defaulting to Locked Mouse Events");
                break;
        }
    };
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     * @param playerElement - the player elements DOM
     */
    InputController.prototype.registerTouch = function (fakeMouseTouch, playerElement) {
        console.log("Registering Touch");
        if (fakeMouseTouch) {
            this.touchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__.FakeTouchController(this.dataChannelController, playerElement.getElementsByTagName("video")[0]);
        }
        else {
            this.touchController = new _TouchController__WEBPACK_IMPORTED_MODULE_3__.TouchController(this.dataChannelController, playerElement);
        }
    };
    /**
     * registers a gamepad
     */
    InputController.prototype.registerGamePad = function () {
        console.debug("Register Game Pad");
        this.gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_4__.GamePadController(this.dataChannelController);
    };
    /**
     * registers a gyro device
     */
    InputController.prototype.registerGyro = function () {
        this.gyroController = new _GyroController__WEBPACK_IMPORTED_MODULE_8__.GyroController(this.dataChannelController);
    };
    return InputController;
}());



/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyboardController": () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputKeyboardMessage */ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Keyboard Inputs for the document
 */
var KeyboardController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     * @param suppressBrowserKeys - Suppress Browser Keys
     */
    function KeyboardController(dataChannelController, suppressBrowserKeys) {
        this.ueInputKeyBoardMessage = new _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputKeyboardMessage(dataChannelController);
        this.suppressBrowserKeys = suppressBrowserKeys;
        this.logging = false;
    }
    /**
     * Registers document keyboard events with the controller
     */
    KeyboardController.prototype.registerKeyBoardEvents = function () {
        document.onkeydown = this.handleOnKeyDown.bind(this);
        document.onkeyup = this.handleOnKeyUp.bind(this);
        //This has been deprecated as at Jun 13 2021
        document.onkeypress = this.handleOnKeyPress.bind(this);
    };
    /**
     * Disable escape for prevent event to signal server
     */
    // ::START
    KeyboardController.prototype.allowKeycode = function (keyboard) {
        if (keyboard.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.escape) {
            return;
        }
        return true;
    };
    // ::END
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyDown = function (keyboardEvent) {
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("handleOnKeyDown");
        }
        // ::START
        if (!this.allowKeycode(keyboardEvent))
            return;
        // ::END
        this.ueInputKeyBoardMessage.sendKeyDown(this.getKeycode(keyboardEvent), keyboardEvent.repeat);
        /* this needs to be tested but it is believed that this is not needed*/
        // backSpace is not considered a keypress in JavaScript but we need it
        // to be so characters may be deleted in a UE4 text entry field.
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.backSpace) {
            //let temp: KeyboardEvent = {charCode: SpecialKeyCodes.backSpace};
            //document.onkeypress({ charCode: SpecialKeyCodes.backSpace });
        }
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyUp = function (keyboardEvent) {
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("handleOnKeyUp");
        }
        // ::START
        if (!this.allowKeycode(keyboardEvent))
            return;
        // ::END
        this.ueInputKeyBoardMessage.sendKeyUp(this.getKeycode(keyboardEvent));
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    KeyboardController.prototype.handleOnKeyPress = function (keyboardEvent) {
        if (this.logging) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("handleOnkeypress");
        }
        // ::START
        if (!this.allowKeycode(keyboardEvent))
            return;
        // ::END
        this.ueInputKeyBoardMessage.sendKeyPress(keyboardEvent.charCode);
    };
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns the key code of the Key
     */
    KeyboardController.prototype.getKeycode = function (keyboardEvent) {
        //Need to move this to a newer version using keyboard event location. as keyboardEvent.keycode is deprecated
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.shift && keyboardEvent.code === 'ShiftRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightShift;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.control && keyboardEvent.code === 'ControlRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightControl;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.alt && keyboardEvent.code === 'AltRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightAlt;
        else
            return keyboardEvent.keyCode;
    };
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     */
    KeyboardController.prototype.isKeyCodeBrowserKey = function (keyCode) {
        // Function keys or tab key.
        return keyCode >= 112 && keyCode <= 123 || keyCode === 9;
    };
    return KeyboardController;
}());

/* 5457524f4d4d */ 


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseButton": () => (/* binding */ MouseButton),
/* harmony export */   "MouseButtonsMask": () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
var MouseButton = /** @class */ (function () {
    function MouseButton() {
    }
    MouseButton.mainButton = 0; // Left button.
    MouseButton.auxiliaryButton = 1; // Wheel button.
    MouseButton.secondaryButton = 2; // Right button.
    MouseButton.fourthButton = 3; // Browser Back button.
    MouseButton.fifthButton = 4; // Browser Forward button.
    return MouseButton;
}());

/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
var MouseButtonsMask = /** @class */ (function () {
    function MouseButtonsMask() {
    }
    MouseButtonsMask.primaryButton = 1; // Left button.
    MouseButtonsMask.secondaryButton = 2; // Right button.
    MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
    MouseButtonsMask.fourthButton = 8; // Browser Back button.
    MouseButtonsMask.fifthButton = 16; // Browser Forward button.
    return MouseButtonsMask;
}());



/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseController": () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Mouse Inputs for the document
 */
var MouseController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function MouseController(dataChannelController) {
        this.unsignedOutOfRange = 65535;
        this.signedOutOfRange = 32767;
        this.printInputs = false;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.releaseMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.pressMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse is moved
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     * @param deltaX - Mouse Delta X Coordinate
     * @param deltaY - Mouse Delta Y Coordinate
     */
    MouseController.prototype.sendMouseMove = function (X, Y, deltaX, deltaY) {
        if (this.printInputs) {
            console.debug("x: ".concat(X, ", y:").concat(Y, ", dX: ").concat(deltaX, ", dY: ").concat(deltaY));
        }
        var mouseCord = this.normaliseAndQuantiseUnsigned(X, Y);
        var deltaCode = this.normaliseAndQuantiseSigned(deltaX, deltaY);
        this.ueInputMouseMessage.sendMouseMove(mouseCord.x, mouseCord.y, deltaCode.x, deltaCode.y);
    };
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseDown = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("mouse button ".concat(button, " down at (").concat(X, ", ").concat(Y, ")"));
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseDown(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseUp = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("mouse button ".concat(button, " up at (").concat(X, ", ").concat(Y, ")"));
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseUp(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse wheel event
     * @param deltaY - Mouse Wheel data
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseWheel = function (deltaY, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog("mouse wheel with delta ".concat(deltaY, " at (").concat(X, ", ").concat(Y, ")"));
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseWheel(deltaY, coord.x, coord.y);
    };
    /**
     * Handles mouse enter
     */
    MouseController.prototype.sendMouseEnter = function () {
        this.ueInputMouseMessage.sendMouseEnter();
    };
    /**
     * Handles mouse Leave
     */
    MouseController.prototype.sendMouseLeave = function () {
        this.ueInputMouseMessage.sendMouseLeave();
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Unsigned Data Type
     */
    MouseController.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio');
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / playerElement.clientWidth;
                var normalizedY = ratio * (y / playerElement.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = ratio * (x / playerElement.clientWidth - 0.5) + 0.5;
                var normalizedY = y / playerElement.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    /**
     * Denormalises and unquantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - unquantise and Denormalize Unsigned Data Type
     */
    MouseController.prototype.unquantiseAndDenormaliseUnsigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio');
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (this.unsignedOutOfRange + 1);
                var normalizedY = (y / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                return {
                    x: normalizedX * playerElement.clientWidth,
                    y: normalizedY * playerElement.clientHeight
                };
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = (x / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                var normalizedY = y / (this.unsignedOutOfRange + 1);
                return {
                    x: normalizedX * playerElement.clientWidth,
                    y: normalizedY * playerElement.clientHeight
                };
            }
        }
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Signed Data Type
     */
    MouseController.prototype.normaliseAndQuantiseSigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio');
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (0.5 * playerElement.clientWidth);
                var normalizedY = (ratio * y) / (0.5 * playerElement.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Signed.
                var normalizedX = (ratio * x) / (0.5 * playerElement.clientWidth);
                var normalizedY = y / (0.5 * playerElement.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
        }
    };
    return MouseController;
}());



/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpecialKeyCodes": () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
var SpecialKeyCodes = /** @class */ (function () {
    function SpecialKeyCodes() {
    }
    SpecialKeyCodes.backSpace = 8;
    SpecialKeyCodes.shift = 16;
    SpecialKeyCodes.control = 17;
    SpecialKeyCodes.alt = 18;
    SpecialKeyCodes.rightShift = 253;
    SpecialKeyCodes.rightControl = 254;
    SpecialKeyCodes.rightAlt = 255;
    SpecialKeyCodes.escape = 27;
    return SpecialKeyCodes;
}());



/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchController": () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputTouchMessage */ "./src/UeInstanceMessage/UeInputTouchMessage.ts");

/**
 * Handles the Touch input Events
 */
var TouchController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     * @param playerElement - the player element DOM
     */
    function TouchController(dataChannelController, playerElement) {
        this.ueInputTouchMessage = new _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputTouchMessage(dataChannelController);
        this.playerElement = playerElement;
        document.ontouchstart = this.onTouchStart.bind(this);
        document.ontouchend = this.onTouchEnd.bind(this);
        document.ontouchmove = this.onTouchMove.bind(this);
        console.log("Touch Events Registered");
        this.logging = false;
    }
    /**
     * When a touch event starts
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchStart = function (event) {
        if (this.logging) {
            console.log("on Touch Start");
        }
        for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            var finger = this.ueInputTouchMessage.fingers.pop();
            if (finger === undefined) {
                if (this.logging) {
                    console.log("who has more then 10 fingers");
                }
            }
            this.ueInputTouchMessage.fingersIds[touch.identifier] = finger;
            if (this.logging) {
                console.log("touch.identifier: " + touch.identifier);
            }
            if (this.logging) {
                console.log("finger: " + finger);
            }
        }
        this.ueInputTouchMessage.sendTouchStart(event.changedTouches);
    };
    /**
     * When a touch event ends
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchEnd = function (event) {
        if (this.logging) {
            console.log("on Touch END");
        }
        for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            if (this.logging) {
                console.log("on Forget Touch");
                console.log("touch id: " + touch.identifier);
                console.log("Fingers id Touch id: " + this.ueInputTouchMessage.fingersIds[touch.identifier]);
            }
            this.ueInputTouchMessage.fingers.push(this.ueInputTouchMessage.fingersIds[touch.identifier]);
            delete this.ueInputTouchMessage.fingersIds[touch.identifier];
            if (this.logging) {
                console.log("touch.identifier: " + touch.identifier);
            }
        }
        this.ueInputTouchMessage.sendTouchEnd(event.changedTouches);
    };
    /**
     * when a moving touch event occurs
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchMove = function (event) {
        for (var i = 0; i < event.touches.length; i++) {
            var touch = event.touches[i];
            if (this.logging) {
                console.log("X: " + touch.clientX + " Y: " + touch.clientY);
            }
        }
        this.ueInputTouchMessage.sendTouchMove(event.touches);
    };
    return TouchController;
}());



/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");

/**
 * The current logger for the frontend
 */
var Logger = /** @class */ (function () {
    function Logger() {
    }
    /**
     * The standard logging output
     * @param text - the string to be logged
     */
    Logger.infoLog = function (text) {
        console.log(text);
    };
    /**
     * The verbose logging output
     * @param text - the string to be logged
     */
    Logger.verboseLog = function (text) {
        if (_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Config._enableVerboseLogging === true) {
            console.log(text);
        }
    };
    return Logger;
}());



/***/ }),

/***/ "./src/MicPlayer/MicController.ts":
/*!****************************************!*\
  !*** ./src/MicPlayer/MicController.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MicController": () => (/* binding */ MicController)
/* harmony export */ });
var MicController = /** @class */ (function () {
    function MicController(urlParams) {
        // get the mic status from the url 
        this.useMic = urlParams.has('useMic');
        if (this.useMic) {
            console.info("Microphone access is enabled IT IS EXPERIMENTAL AND IS NOT PROPERLY SUPPORTED ACROSS UE. IF IT DOES NOT WORK ITS YOUR OWN FAULT! YOU HAVE BEEN TOLD.");
        }
        // if (!this.useMic) {
        //     console.log("Microphone access is not enabled. Pass ?useMic in the url to enable it.");
        // }
        // check if the connection is not local and is https or mic will not work 
        this.isLocalhostConnection = location.hostname === "localhost" || location.hostname === "127.0.0.1";
        this.isHttpsConnection = location.protocol === 'https:';
        if (this.useMic && !this.isLocalhostConnection && !this.isHttpsConnection) {
            this.useMic = false;
            console.error("Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.");
            console.error("For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
        }
    }
    return MicController;
}());



/***/ }),

/***/ "./src/Overlay/ActionOverlay.ts":
/*!**************************************!*\
  !*** ./src/Overlay/ActionOverlay.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionOverlay": () => (/* binding */ ActionOverlay)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);

/**
 * The abstract class for action overlays
 */
var ActionOverlay = /** @class */ (function () {
    function ActionOverlay() {
        this.eventEmitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    }
    /**
     * Set a method as an event emitter callback
     * @param callBack the method that is to be called when the event is emitted
     */
    ActionOverlay.prototype.onAction = function (callBack) {
        this.eventEmitter.on("action", callBack);
    };
    /**
     * Activate an event that is attached to the event emitter
     */
    ActionOverlay.prototype.activate = function () {
        this.eventEmitter.emit("action");
    };
    return ActionOverlay;
}());



/***/ }),

/***/ "./src/Overlay/AfkOverlay.ts":
/*!***********************************!*\
  !*** ./src/Overlay/AfkOverlay.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkOverlay": () => (/* binding */ AfkOverlay)
/* harmony export */ });
/* harmony import */ var _ActionOverlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ActionOverlay */ "./src/Overlay/ActionOverlay.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The abstract class for the Afk overlay
 */
var AfkOverlay = /** @class */ (function (_super) {
    __extends(AfkOverlay, _super);
    function AfkOverlay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AfkOverlay;
}(_ActionOverlay__WEBPACK_IMPORTED_MODULE_0__.ActionOverlay));



/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AggregatedStats": () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InboundAudioStats */ "./src/PeerConnectionController/InboundAudioStats.ts");
/* harmony import */ var _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InboundVideoStats */ "./src/PeerConnectionController/InboundVideoStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OutBoundVideoStats */ "./src/PeerConnectionController/OutBoundVideoStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};







var AggregatedStats = /** @class */ (function () {
    function AggregatedStats() {
        this.inboundVideoStats = new _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__.inboundVideoStats();
        this.inboundAudioStats = new _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__.inboundAudioStats();
        this.candidatePair = new _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__.CandidatePairStats();
        this.dataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__.dataChannelStats();
        this.outBoundVideoStats = new _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__.OutBoundVideoStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_6__.StreamStats();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    AggregatedStats.prototype.processStats = function (rtcStatsReport) {
        var _this = this;
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        rtcStatsReport.forEach(function (stat) {
            var type = stat.type;
            switch (type) {
                case "candidate-pair":
                    _this.handleCandidatePair(stat);
                    break;
                case "certificate":
                    break;
                case "codec":
                    break;
                case "csrc":
                    break;
                case "data-channel":
                    _this.handleDataChannel(stat);
                    break;
                case "inbound-rtp":
                    _this.handleInBoundRTP(stat);
                    break;
                case "local-candidate":
                    _this.handleLocalCandidate(stat);
                    break;
                case "media-source":
                    break;
                case "outbound-rtp":
                    break;
                case "peer-connection":
                    break;
                case "remote-candidate":
                    _this.handleRemoteCandidate(stat);
                    break;
                case "remote-inbound-rtp":
                    break;
                case "remote-outbound-rtp":
                    _this.handleRemoteOutBound(stat);
                    break;
                case "track":
                    _this.handleTrack(stat);
                    break;
                case "transport":
                    break;
                case "stream":
                    _this.handleStream(stat);
                    break;
                default:
                    console.error("un handled Stat Type");
                    console.dir(stat);
                    break;
            }
        });
    };
    /**
     * Process stream stats data from webrtc
     *
     * @param stat the stats coming in from webrtc
     */
    AggregatedStats.prototype.handleStream = function (stat) {
        this.streamStats = stat;
    };
    /**
     * Process the Ice Candidate Pair Data
     */
    AggregatedStats.prototype.handleCandidatePair = function (stat) {
        this.candidatePair.bytesReceived = stat.bytesReceived;
        this.candidatePair.bytesSent = stat.bytesSent;
        this.candidatePair.localCandidateId = stat.localCandidateId;
        this.candidatePair.remoteCandidateId = stat.remoteCandidateId;
        this.candidatePair.nominated = stat.nominated;
        this.candidatePair.readable = stat.readable;
        this.candidatePair.selected = stat.selected;
        this.candidatePair.writable = stat.writable;
        this.candidatePair.state = stat.state;
        this.candidatePair.currentRoundTripTime = stat.currentRoundTripTime;
    };
    /**
     * Process the Data Channel Data
     */
    AggregatedStats.prototype.handleDataChannel = function (stat) {
        this.dataChannelStats.bytesReceived = stat.dataytesReceived;
        this.dataChannelStats.bytesSent = stat.bytesSent;
        this.dataChannelStats.dataChannelIdentifier = stat.dataChannelIdentifier;
        this.dataChannelStats.id = stat.id;
        this.dataChannelStats.label = stat.label;
        this.dataChannelStats.messagesReceived = stat.messagesReceived;
        this.dataChannelStats.messagesSent = stat.messagesSent;
        this.dataChannelStats.protocol = stat.protocol;
        this.dataChannelStats.state = stat.state;
        this.dataChannelStats.timestamp = stat.timestamp;
    };
    /**
     * Process the Local Ice Candidate Data
     */
    AggregatedStats.prototype.handleLocalCandidate = function (stat) {
        var localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        localCandidate.label = "local-candidate";
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        this.localCandidates.push(localCandidate);
    };
    /**
     * Process the Remote Ice Candidate Data
     */
    AggregatedStats.prototype.handleRemoteCandidate = function (stat) {
        var RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        RemoteCandidate.label = "local-candidate";
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        this.remoteCandidates.push(RemoteCandidate);
    };
    /**
     * Process the Inbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleInBoundRTP = function (stat) {
        switch (stat.kind) {
            case "video":
                this.inboundVideoStats.timestamp = stat.timestamp;
                this.inboundVideoStats.bytesReceived = stat.bytesReceived;
                this.inboundVideoStats.framesDecoded = stat.framesDecoded;
                this.inboundVideoStats.packetsLost = stat.packetsLost;
                this.inboundVideoStats.jitter = stat.jitter;
                this.inboundVideoStats.bytesReceivedStart = (this.inboundVideoStats.bytesReceivedStart == null) ? stat.bytesReceived : this.inboundVideoStats.bytesReceivedStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                this.inboundVideoStats.timestampStart = (this.inboundVideoStats.timestampStart == null) ? stat.timestamp : this.inboundVideoStats.timestampStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate = 8 * (stat.bytesReceived - this.lastVideoStats.bytesReceived) / (stat.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.lowBitrate == undefined || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.bitrate < this.inboundVideoStats.lowBitrate || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.highBitrate == undefined || Number.isNaN(this.inboundVideoStats.highBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.bitrate > this.inboundVideoStats.highBitrate) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.avgBitrate = 8 * (this.inboundVideoStats.bytesReceived - this.lastVideoStats.bytesReceived) / (this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.avgBitrate = Math.floor(this.inboundVideoStats.avgBitrate);
                    this.inboundVideoStats.framerate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecoded) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp) / 1000);
                    this.inboundVideoStats.framerate = Math.floor(this.inboundVideoStats.framerate);
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.lowFramerate == undefined || Number.isNaN(this.inboundVideoStats.lowFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.lowFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.highFramerate == undefined || Number.isNaN(this.inboundVideoStats.highFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.highFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.averageFrameRate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecodedStart) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestampStart) / 1000);
                    this.inboundVideoStats.averageFrameRate = Math.floor(this.inboundVideoStats.averageFrameRate);
                }
                this.lastVideoStats = __assign({}, this.inboundVideoStats);
                break;
            case "audio":
                this.inboundAudioStats.bytesReceived = stat.bytesReceived;
                this.inboundAudioStats.jitter = stat.jitter;
                this.inboundAudioStats.packetsLost = stat.packetslost;
                this.inboundAudioStats.timestamp = stat.timestamp;
                break;
            default:
                console.log("Kind is not handled");
                break;
        }
    };
    /**
     * Process the outbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleRemoteOutBound = function (stat) {
        switch (stat.kind) {
            case "video":
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case "audio":
                break;
            default:
                break;
        }
    };
    /**
     * Process the Inbound Video Track Data
     */
    AggregatedStats.prototype.handleTrack = function (stat) {
        this.inboundVideoStats.framesDropped = stat.framesDropped;
        this.inboundVideoStats.framesReceived = stat.framesReceived;
        this.inboundVideoStats.framesDroppedPercentage = stat.framesDropped / stat.framesReceived * 100;
        this.inboundVideoStats.frameHeight = stat.frameHeight;
        this.inboundVideoStats.frameWidth = stat.frameWidth;
        this.inboundVideoStats.frameHeightStart = (this.inboundVideoStats.frameHeightStart == null) ? stat.frameHeight : this.inboundVideoStats.frameHeightStart;
        this.inboundVideoStats.frameWidthStart = (this.inboundVideoStats.frameWidthStart == null) ? stat.frameWidth : this.inboundVideoStats.frameWidthStart;
    };
    return AggregatedStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CandidatePairStats": () => (/* binding */ CandidatePairStats)
/* harmony export */ });
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
var CandidatePairStats = /** @class */ (function () {
    function CandidatePairStats() {
    }
    return CandidatePairStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CandidateStat": () => (/* binding */ CandidateStat)
/* harmony export */ });
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
var CandidateStat = /** @class */ (function () {
    function CandidateStat() {
    }
    return CandidateStat;
}());



/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dataChannelStats": () => (/* binding */ dataChannelStats)
/* harmony export */ });
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
var dataChannelStats = /** @class */ (function () {
    function dataChannelStats() {
    }
    return dataChannelStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundAudioStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundAudioStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inboundAudioStats": () => (/* binding */ inboundAudioStats)
/* harmony export */ });
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
var inboundAudioStats = /** @class */ (function () {
    function inboundAudioStats() {
    }
    return inboundAudioStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundVideoStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundVideoStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inboundVideoStats": () => (/* binding */ inboundVideoStats)
/* harmony export */ });
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
var inboundVideoStats = /** @class */ (function () {
    function inboundVideoStats() {
        this.receiveToCompositeMs = 0;
        this.timestamp = 0;
        this.bytesReceived = 0;
        this.framesDecoded = 0;
        this.packetsLost = 0;
        this.bytesReceivedStart = 0;
        this.framesDecodedStart = 0;
        this.timestampStart = 0;
        this.bitrate = 0;
        this.lowBitrate = 0;
        this.highBitrate = 0;
        this.avgBitrate = 0;
        this.framerate = 0;
        this.lowFramerate = 0;
        this.highFramerate = 0;
        this.averageFrameRate = 0;
        this.framesDropped = 0;
        this.framesReceived = 0;
        this.framesDroppedPercentage = 0;
        this.frameHeight = 0;
        this.frameWidth = 0;
        this.frameHeightStart = 0;
        this.frameWidthStart = 0;
        this.jitter = 0;
    }
    return inboundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/OutBoundVideoStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundVideoStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
var OutBoundVideoStats = /** @class */ (function () {
    function OutBoundVideoStats() {
    }
    return OutBoundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PeerConnectionController": () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


/**
 * Handles the Peer Connection
 */
var PeerConnectionController = /** @class */ (function () {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     */
    function PeerConnectionController(options, urlParams) {
        // set the turn status 
        this.forceTurn = urlParams.has('ForceTURN');
        // if using TURN set the ice transport policy to relay for the options
        if (this.forceTurn) {
            console.log("Forcing TURN usage by setting ICE Transport Policy in peer connection config.");
            options.iceTransportPolicy = "relay";
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = this.handleSignalStateChange.bind(this);
        this.peerConnection.oniceconnectionstatechange = this.handleIceConnectionStateChange.bind(this);
        this.peerConnection.onicegatheringstatechange = this.handleIceGatheringStateChange.bind(this);
        this.peerConnection.ontrack = this.handleOnTrack.bind(this);
        this.peerConnection.onicecandidate = this.handelIceCandidate.bind(this);
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__.AggregatedStats();
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    PeerConnectionController.prototype.createOffer = function (offerOptions, useMic) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Create Offer");
        this.setupTracksToSendAsync(useMic).finally(function () { });
        this.peerConnection.createOffer(offerOptions).then(function (offer) {
            _this.showTextOverlayConnecting();
            offer.sdp = _this.mungeOffer(offer.sdp, useMic);
            _this.peerConnection.setLocalDescription(offer);
            _this.onSendWebRTCOffer(offer);
        }).catch(function (onRejectedReason) {
            _this.showTextOverlaySetupFailure();
        });
    };
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    PeerConnectionController.prototype.generateStats = function () {
        var _this = this;
        this.peerConnection.getStats(null).then(function (StatsData) {
            _this.aggregatedStats.processStats(StatsData);
            _this.onVideoStats(_this.aggregatedStats);
        });
    };
    /**
     * Close The Peer Connection
     */
    PeerConnectionController.prototype.close = function () {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    };
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    PeerConnectionController.prototype.mungeOffer = function (sdp, useMic) {
        var temp = sdp;
        temp.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, "$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n");
        temp.replace('useinbandfec=1', 'useinbandfec=1;stereo=1;sprop-maxcapturerate=48000');
        // Increase the capture rate of audio so we can have higher quality audio over mic
        if (useMic) {
            temp = temp.replace('useinbandfec=1', 'useinbandfec=1;sprop-maxcapturerate=48000;maxaveragebitrate=510000');
        }
        return temp;
    };
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param sdpAnswer - RTC Session Descriptor from the Signaling Server
     */
    PeerConnectionController.prototype.handleAnswer = function (sdpAnswer) {
        this.peerConnection.setRemoteDescription(sdpAnswer);
    };
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    PeerConnectionController.prototype.handleOnIce = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("peerconnection handleOnIce");
        // // if forcing TURN, reject any candidates not relay
        if (this.forceTurn) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf("relay") < 0) {
                console.warn("Dropping candidate because it was not TURN relay.", "| Type=", iceCandidate.type, "| Protocol=", iceCandidate.protocol, "| Address=", iceCandidate.address, "| Port=", iceCandidate.port, "|");
                return;
            }
        }
        this.peerConnection.addIceCandidate(iceCandidate);
    };
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    PeerConnectionController.prototype.handleSignalStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('signaling state change: ' + state);
    };
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    PeerConnectionController.prototype.handleIceConnectionStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('ice connection state change: ' + state);
    };
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    PeerConnectionController.prototype.handleIceGatheringStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('ice gathering state change: ' + JSON.stringify(state));
    };
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    PeerConnectionController.prototype.handleOnTrack = function (event) {
        this.onTrack(event);
    };
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    PeerConnectionController.prototype.handelIceCandidate = function (event) {
        this.onPeerIceCandidate(event);
    };
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    PeerConnectionController.prototype.onTrack = function (trackEvent) { };
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    PeerConnectionController.prototype.onPeerIceCandidate = function (peerConnectionIceEvent) { };
    /**
     * Setup tracks on the RTC Peer Connection
     */
    PeerConnectionController.prototype.setupTracksToSendAsync = function (useMic) {
        return __awaiter(this, void 0, void 0, function () {
            var hasTransceivers, audioOptions, mediaSendOptions, stream, _i, _a, transceiver, _b, _c, track, _d, _e, track;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        hasTransceivers = this.peerConnection.getTransceivers().length > 0;
                        // Setup a transceiver for getting UE video
                        this.peerConnection.addTransceiver("video", { direction: "recvonly" });
                        if (!!useMic) return [3 /*break*/, 1];
                        this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        return [3 /*break*/, 3];
                    case 1:
                        audioOptions = useMic ?
                            {
                                autoGainControl: false,
                                channelCount: 1,
                                echoCancellation: false,
                                latency: 0,
                                noiseSuppression: false,
                                sampleRate: 48000,
                                sampleSize: 16,
                                volume: 1.0
                            } : false;
                        mediaSendOptions = {
                            video: false,
                            audio: audioOptions,
                        };
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(mediaSendOptions)];
                    case 2:
                        stream = _f.sent();
                        if (stream) {
                            if (hasTransceivers) {
                                for (_i = 0, _a = this.peerConnection.getTransceivers(); _i < _a.length; _i++) {
                                    transceiver = _a[_i];
                                    if (transceiver && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === "audio") {
                                        for (_b = 0, _c = stream.getTracks(); _b < _c.length; _b++) {
                                            track = _c[_b];
                                            if (track.kind && track.kind == "audio") {
                                                transceiver.sender.replaceTrack(track);
                                                transceiver.direction = "sendrecv";
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                for (_d = 0, _e = stream.getTracks(); _d < _e.length; _d++) {
                                    track = _e[_d];
                                    if (track.kind && track.kind == "audio") {
                                        this.peerConnection.addTransceiver(track, { direction: "sendrecv" });
                                    }
                                }
                            }
                        }
                        else {
                            this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        }
                        _f.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    PeerConnectionController.prototype.onVideoStats = function (event) { };
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    PeerConnectionController.prototype.onSendWebRTCOffer = function (offer) { };
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    PeerConnectionController.prototype.showTextOverlayConnecting = function () { };
    /**
     * An override for showing the Peer connection Failed overlay
     */
    PeerConnectionController.prototype.showTextOverlaySetupFailure = function () { };
    return PeerConnectionController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamStats": () => (/* binding */ StreamStats)
/* harmony export */ });
/**
 * Class to hold the stream stats data coming in from webRtc
 */
var StreamStats = /** @class */ (function () {
    function StreamStats() {
    }
    return StreamStats;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeControlMessage.ts":
/*!***************************************************!*\
  !*** ./src/UeInstanceMessage/UeControlMessage.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeControlMessage": () => (/* binding */ UeControlMessage)
/* harmony export */ });
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles Sending control messages to the UE Instance
 */
var UeControlMessage = /** @class */ (function (_super) {
    __extends(UeControlMessage, _super);
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeControlMessage(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send IFrame Request to the UE Instance
     */
    UeControlMessage.prototype.SendIFrameRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.iFrameRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    UeControlMessage.prototype.SendRequestQualityControl = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestQualityControl]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Max FPS Request to the UE Instance
     */
    UeControlMessage.prototype.SendMaxFpsRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.maxFpsRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    UeControlMessage.prototype.SendAverageBitrateRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.averageBitrateRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStartStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.startStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStopStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.stopStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Latency Test to the UE Instance
     * @param StartTimeMs - Start Time of the Latency test
     */
    UeControlMessage.prototype.sendLatencyTest = function (StartTimeMs) {
        var payload = {
            StartTime: StartTimeMs,
        };
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.latencyTest, JSON.stringify(payload));
    };
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    UeControlMessage.prototype.SendRequestInitialSettings = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestInitialSettings]);
        this.sendData(payload.buffer);
    };
    return UeControlMessage;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_1__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDataMessage.ts":
/*!************************************************!*\
  !*** ./src/UeInstanceMessage/UeDataMessage.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDataMessage": () => (/* binding */ UeDataMessage)
/* harmony export */ });
/**
 * Handles sending a message to the UE Instance
 */
var UeDataMessage = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeDataMessage(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    /**
     * Send an Array Buffer to the UE Instance
     * @param buffer - Message Buffer Array
     */
    UeDataMessage.prototype.sendData = function (buffer) {
        this.dataChannelController.sendData(buffer);
    };
    return UeDataMessage;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptor.ts":
/*!***********************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptor.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptor": () => (/* binding */ UeDescriptor)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending a Descriptor to the UE Instance
 */
var UeDescriptor = /** @class */ (function (_super) {
    __extends(UeDescriptor, _super);
    /**
    * @param datachannelController - Data Channel Controller
    */
    function UeDescriptor(datachannelController) {
        var _this = _super.call(this, datachannelController) || this;
        _this.logging = false;
        return _this;
    }
    /**
     * Send a Descriptor to the UE Instances
     * @param messageType - UE Message Type
     * @param JSODescriptor - Descriptor Message as JSON
     */
    UeDescriptor.prototype.sendDescriptor = function (messageType, JSODescriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Sending: " + JSODescriptor);
        // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
        // a time.
        var data = new DataView(new ArrayBuffer(1 + 2 + 2 * JSODescriptor.length));
        var byteIdx = 0;
        data.setUint8(byteIdx, messageType);
        byteIdx++;
        data.setUint16(byteIdx, JSODescriptor.length, true);
        byteIdx += 2;
        for (var i = 0; i < JSODescriptor.length; i++) {
            data.setUint16(byteIdx, JSODescriptor.charCodeAt(i), true);
            byteIdx += 2;
        }
        this.sendData(data.buffer);
    };
    return UeDescriptor;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptorUi.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptorUi.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptorUi": () => (/* binding */ UeDescriptorUi)
/* harmony export */ });
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
/* harmony import */ var _Custom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Custom */ "./src/Custom/index.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// import { UeDescriptor } from "./UeDescriptor";

// ::START

// ::END
/**
 * Handles the Sending of a UI Descriptor to the UE Instance
 */
// ::START
var UeDescriptorUi = /** @class */ (function (_super) {
    __extends(UeDescriptorUi, _super);
    // export class UeDescriptorUi extends UeDescriptor {
    // ::END
    /**
     * @param dataChannelController - Data Channel Controller
     */
    function UeDescriptorUi(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send a set res UI Descriptor to UE Instance
     * @param width - Width of res
     * @param height - Height of res
     */
    UeDescriptorUi.prototype.sendUpdateVideoStreamSize = function (width, height) {
        this.sendUiConsoleInteraction("setres " + width + "x" + height);
    };
    /**
     * Send a stat fps UI Descriptor to UE Instance
     */
    UeDescriptorUi.prototype.sendShowFps = function () {
        this.sendUiConsoleInteraction("stat fps");
    };
    /**
     * Send a Encoder Rate Control to UE Instance
     * @param rateControl - Rate Control "CBR" | "VBR" | "ConstQP"
     */
    UeDescriptorUi.prototype.sendEncoderRateControl = function (rateControl) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.RateControl " + rateControl);
    };
    /**
     * Send Encoder Target Bit Rate to the UE Instance
     * @param targetBitRate - Send a Target Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderTargetBitRate = function (targetBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.TargetBitrate " + (targetBitRate > 0 ? targetBitRate : -1));
    };
    /**
     * Send Encoder Max Bit Rate VBR to UE Instance
     * @param maxBitRate - Send A Max Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderMaxBitrateVbr = function (maxBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxBitrateVBR " + (maxBitRate > 0 ? maxBitRate : 1));
    };
    /**
     * Send the Minimum Quantization Parameter to the UE Instance
     * @param minQP - Minimum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMinQP = function (minQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MinQP " + minQP);
    };
    /**
     * Send the Maximum Quantization Parameter to the UE Instance
     * @param maxQP - Maximum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMaxQP = function (maxQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxQP " + maxQP);
    };
    /**
     * Send Enable Filler Data to the UE Instance
     * @param enable - True
     */
    UeDescriptorUi.prototype.sendEncoderEnableFillerData = function (enable) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.EnableFillerData " + Number(enable).valueOf());
    };
    /**
     * Send Encoder MultiPass to UE Instance
     * @param multiPass - MultiPass "DISABLED" | "QUARTER" | "FULL"
     */
    UeDescriptorUi.prototype.sendEncoderMultiPass = function (multiPass) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.Multipass " + multiPass);
    };
    /**
     * Send a Web RTC Degradation Preference to UE Instance
     * @param DegradationPreference - Degradation Preference "BALANCED" | "MAINTAIN_FRAMERATE" | "MAINTAIN_RESOLUTION"
     */
    UeDescriptorUi.prototype.sendWebRtcDegradationPreference = function (DegradationPreference) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.DegradationPreference " + DegradationPreference);
    };
    /**
     * Sends the Max FPS to the UE Instance
     * @param MaxFps - Web RTC Max Frames Per Second
     */
    UeDescriptorUi.prototype.sendWebRtcMaxFps = function (MaxFps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxFps " + MaxFps);
    };
    /**
    * Sends the FPS to the UE Instance used un UE 5.0
    * @param Fps - Web RTC Frames Per Second
    */
    UeDescriptorUi.prototype.sendWebRtcFps = function (Fps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.Fps " + Fps);
    };
    /**
     * Sends the Minimum bit rate to the UE Instance
     * @param MinBitrate - Web RTC Minimum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMinBitrate = function (MinBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MinBitrate " + MinBitrate);
    };
    /**
     * Sends the Maximum bit rate to the UE Instance
     * @param MaxBitrate - Web RTC Maximum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMaxBitrate = function (MaxBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxBitrate " + MaxBitrate);
    };
    /**
     * Sends the Low Quantization Parameter Threshold level to the UE Instance
     * @param LowQpThreshold - Low Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcLowQpThreshold = function (LowQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.LowQpThreshold " + LowQpThreshold);
    };
    /**
     * Sends the High Quantization Parameter Threshold level to the UE Instance
     * @param HighQpThreshold - High Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcHighQpThreshold = function (HighQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.HighQpThreshold " + HighQpThreshold);
    };
    /**
     * Sends a descriptor string to the UE Interaction Instance
     * @param descriptor - the String descriptor to send
     */
    UeDescriptorUi.prototype.sendUiInteraction = function (descriptor) {
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.uiInteraction, descriptor);
    };
    /**
     * Sends a console descriptor
     * @param descriptor - The string descriptor to send
     */
    UeDescriptorUi.prototype.sendUiConsoleInteraction = function (descriptor) {
        var payload = {
            Console: descriptor
        };
        this.sendUiInteraction(JSON.stringify(payload));
    };
    return UeDescriptorUi;
}(_Custom__WEBPACK_IMPORTED_MODULE_1__.EmitClass));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputGamePadMessage.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputGamePadMessage.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputGamePadMessage": () => (/* binding */ UeInputGamePadMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * The class for handling UE Input GamePad Messages. It implements the UeDataMessage class
 */
var UeInputGamePadMessage = /** @class */ (function (_super) {
    __extends(UeInputGamePadMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputGamePadMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send the controller button press data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex - the button index number
     * @param isRepeat - is this a repeat press
     */
    UeInputGamePadMessage.prototype.sendControllerButtonPressed = function (controllerIndex, buttonIndex, isRepeat) {
        var Data = new DataView(new ArrayBuffer(4));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonPressed);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        Data.setUint8(3, Number(isRepeat).valueOf());
    };
    /**
     * Send the controller button release data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex  - the button index number
     */
    UeInputGamePadMessage.prototype.sendControllerButtonReleased = function (controllerIndex, buttonIndex) {
        var Data = new DataView(new ArrayBuffer(3));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonReleased);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
    };
    /**
     * Send controller axis data through the data channel
     * @param controllerIndex - the controller index number
     * @param axisIndex - the axis index number
     * @param analogValue - the analogue value number
     */
    UeInputGamePadMessage.prototype.sendControllerAxisMove = function (controllerIndex, axisIndex, analogValue) {
        var Data = new DataView(new ArrayBuffer(11));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadAnalog);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, axisIndex);
        Data.setFloat64(3, analogValue, true);
        this.sendData(Data.buffer);
    };
    return UeInputGamePadMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts":
/*!*********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputKeyboardMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputKeyboardMessage": () => (/* binding */ UeInputKeyboardMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Keyboard Messages to the UE Instance
 */
var UeInputKeyboardMessage = /** @class */ (function (_super) {
    __extends(UeInputKeyboardMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputKeyboardMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Sends the key down to the UE Instance
     * @param keyCode - Key code
     * @param isRepeat - Is the key repeating
     */
    UeInputKeyboardMessage.prototype.sendKeyDown = function (keyCode, isRepeat) {
        var Payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyDown, keyCode, Number(isRepeat).valueOf()]);
        this.sendData(Payload.buffer);
    };
    /**
     * Sends the Key Up to the UE Instance
     * @param keyCode - Key code
     */
    UeInputKeyboardMessage.prototype.sendKeyUp = function (keyCode) {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyUp, keyCode]);
        this.sendData(payload.buffer);
    };
    /**
     * Sends the key press to the UE Instance
     * @param CharCode - character code of a key pressed
     */
    UeInputKeyboardMessage.prototype.sendKeyPress = function (CharCode) {
        var data = new DataView(new ArrayBuffer(3));
        data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyPress);
        data.setUint16(1, CharCode, true);
        this.sendData(data.buffer);
    };
    return UeInputKeyboardMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputMouseMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputMouseMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputMouseMessage": () => (/* binding */ UeInputMouseMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Mouse Messages to the UE Instance
 */
var UeInputMouseMessage = /** @class */ (function (_super) {
    __extends(UeInputMouseMessage, _super);
    /**
    * @param datachannelController - Data channel Controller
    */
    function UeInputMouseMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send Mouse Enter to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseEnter = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseEnter);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Leave to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseLeave = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseLeave);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Down to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseDown = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseDown);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Up to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseUp = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseUp);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Move to the UE Instance
     * @param mouseCordX - X Mouse Coordinate
     * @param mouseCordY - Y Mouse Coordinate
     * @param deltaX - X Mouse Delta Coordinate
     * @param deltaY - Y Mouse Delta Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseMove = function (mouseCordX, mouseCordY, deltaX, deltaY) {
        var Data = new DataView(new ArrayBuffer(9));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseMove);
        Data.setUint16(1, mouseCordX, true);
        Data.setUint16(3, mouseCordY, true);
        Data.setInt16(5, deltaX, true);
        Data.setInt16(7, deltaY, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse wheel event to the UE Instance
     * @param deltaY - Mouse Wheel delta Y
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseWheel = function (deltaY, X, Y) {
        var Data = new DataView(new ArrayBuffer(7));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseWheel);
        Data.setInt16(1, deltaY, true);
        Data.setUint16(3, X, true);
        Data.setUint16(5, Y, true);
        this.sendData(Data.buffer);
    };
    return UeInputMouseMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputTouchMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputTouchMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputTouchMessage": () => (/* binding */ UeInputTouchMessage)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Handles Sending Touch messages to the UE Instance
 */
var UeInputTouchMessage = /** @class */ (function (_super) {
    __extends(UeInputTouchMessage, _super);
    /**
     * @param datachannelController - Data channel Controller
     */
    function UeInputTouchMessage(datachannelController) {
        var _this = _super.call(this, datachannelController) || this;
        _this.unsignedOutOfRange = 65535;
        _this.signedOutOfRange = 32767;
        _this.fingersIds = {};
        _this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        _this.printInputs = false;
        return _this;
    }
    /**
     * Handles Touch event Start
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchStart = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchStart, touches);
    };
    /**
     * Handles Touch event End
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchEnd = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchEnd, touches);
    };
    /**
     * Handles Touch event Move
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchMove = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchMove, touches);
    };
    /**
     * Handles Sending the Touch Event to the UE Instance via the Data channel
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouch = function (touchType, touches) {
        var data = new DataView(new ArrayBuffer(2 + 7 * touches.length));
        data.setUint8(0, touchType);
        data.setUint8(1, touches.length);
        var byte = 2;
        for (var t = 0; t < touches.length; t++) {
            var touch = touches[t];
            var x = touch.clientX; //- offsetLeft;
            var y = touch.clientY; //- offsetTop;
            var coord = this.normaliseAndQuantiseUnsigned(x, y);
            //      byte =  2
            data.setUint16(byte, coord.x, true);
            byte += 2;
            //      byte =  4
            data.setUint16(byte, coord.y, true);
            byte += 2;
            //      byte =  6
            data.setUint8(byte, this.fingersIds[touch.identifier]);
            byte += 1;
            //      byte =  7
            data.setUint8(byte, 255 * touch.force); // force is between 0.0 and 1.0 so quantize into byte.
            byte += 1;
            //      byte =  8
            data.setUint8(byte, coord.inRange ? 1 : 0); // mark the touch as in the player or not
            byte += 1;
        }
        this.sendData(data.buffer);
    };
    /**
     * TO DO
     * @param x - X Coordinate
     * @param y - Y Coordinate
     * @returns - Normalised and Quantised Unsigned values
     */
    UeInputTouchMessage.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var playerElement = document.getElementById('player');
        var videoElement = playerElement.getElementsByTagName("video");
        if (playerElement && videoElement.length > 0) {
            var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
            var videoAspectRatio = videoElement[0].videoHeight / videoElement[0].videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / playerElement.clientWidth;
                var normalizedY = ratio * (y / playerElement.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio');
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned. 
                var normalizedX = ratio * (x / playerElement.clientWidth - 0.5) + 0.5;
                var normalizedY = y / playerElement.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    return UeInputTouchMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeMessageTypes.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeMessageTypes.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeMessageType": () => (/* binding */ UeMessageType)
/* harmony export */ });
/**
 * The Type of message sent to the UE instance over the data channel
 * Must be kept in sync with PixelStreamingProtocol::EToUE4Msg C++ enum.
 * {@link https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Plugins/Media/PixelStreaming/Source/PixelStreaming/Private/ProtocolDefs.h} Requires Login
 */
var UeMessageType = /** @class */ (function () {
    function UeMessageType() {
    }
    /**********************************************************************/
    /*
     * Control Messages. Range = 0..49.
     */
    UeMessageType.iFrameRequest = 0;
    UeMessageType.requestQualityControl = 1;
    UeMessageType.maxFpsRequest = 2;
    UeMessageType.averageBitrateRequest = 3;
    UeMessageType.startStreaming = 4;
    UeMessageType.stopStreaming = 5;
    UeMessageType.latencyTest = 6;
    UeMessageType.requestInitialSettings = 7;
    /**********************************************************************/
    /*
     * Input Messages. Range = 50..89.
     */
    // Generic Input Messages. Range = 50..59.
    UeMessageType.uiInteraction = 50;
    UeMessageType.command = 51;
    // Keyboard Input Message. Range = 60..69.
    UeMessageType.keyDown = 60;
    UeMessageType.keyUp = 61;
    UeMessageType.keyPress = 62;
    // Mouse Input Messages. Range = 70..79.
    UeMessageType.mouseEnter = 70;
    UeMessageType.mouseLeave = 71;
    UeMessageType.mouseDown = 72;
    UeMessageType.mouseUp = 73;
    UeMessageType.mouseMove = 74;
    UeMessageType.mouseWheel = 75;
    // Touch Input Messages. Range = 80..89.
    UeMessageType.touchStart = 80;
    UeMessageType.touchEnd = 81;
    UeMessageType.touchMove = 82;
    // Gamepad Input Messages. Range = 90..99
    UeMessageType.gamepadButtonPressed = 90;
    UeMessageType.gamepadButtonReleased = 91;
    UeMessageType.gamepadAnalog = 92;
    return UeMessageType;
}());



/***/ }),

/***/ "./src/Ui/UiController.ts":
/*!********************************!*\
  !*** ./src/Ui/UiController.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UiController": () => (/* binding */ UiController),
/* harmony export */   "playerStyleAttributes": () => (/* binding */ playerStyleAttributes)
/* harmony export */ });
/**
 * The Ui Controller class handles all methods that interact with the UI
 */
var UiController = /** @class */ (function () {
    function UiController() {
        this.lastTimeResized = new Date().getTime();
        this.playerStyleAttributes = new playerStyleAttributes();
    }
    /**
     * Resizes the player element to fill the window
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToFillWindow = function (playerElement) {
        var videoElement = playerElement.getElementsByTagName("VIDEO")[0];
        // Fill the player display in window, keeping picture's aspect ratio.
        var windowAspectRatio = window.innerHeight / window.innerWidth;
        var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
        // We want to keep the video ratio correct for the video stream
        var videoWidth;
        var videoHeight;
        if (!videoElement === undefined) {
            videoWidth = parseInt(videoElement.getAttribute("videoWidth"));
            videoHeight = parseInt(videoElement.getAttribute("videoHeight"));
        }
        var videoAspectRatio = videoHeight / videoWidth;
        if (isNaN(videoAspectRatio)) {
            //Video is not initialised yet so set playerElement to size of window
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
        else if (windowAspectRatio < playerAspectRatio) {
            // Window height is the constraining factor so to keep aspect ratio change width appropriately
            this.playerStyleAttributes.styleWidth = Math.floor(window.innerHeight / videoAspectRatio);
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            //Video is now 100% of the playerElement, so set the playerElement style
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
        else {
            // Window width is the constraining factor so to keep aspect ratio change height appropriately
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = Math.floor(window.innerWidth * videoAspectRatio);
            this.playerStyleAttributes.styleTop = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            this.playerStyleAttributes.styleLeft = 0;
            //Video is now 100% of the playerElement, so set the playerElement style
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
    };
    /**
     * Resizes the player element to fit the actual size of the stream
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToActualSize = function (playerElement) {
        var videoElement = playerElement.getElementsByTagName("VIDEO")[0];
        var videoElementLength;
        if (!videoElement === undefined) {
            videoElementLength = parseInt(videoElement.getAttribute("length"));
        }
        if (videoElementLength > 0) {
            // Display image in its actual size
            this.playerStyleAttributes.styleWidth = videoElement.videoWidth;
            this.playerStyleAttributes.styleHeight = videoElement.videoHeight;
            var Top = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            var Left = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            this.playerStyleAttributes.styleTop = (Top > 0) ? Top : 0;
            this.playerStyleAttributes.styleLeft = (Left > 0) ? Left : 0;
            //Video is now 100% of the playerElement, so set the playerElement style
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
            //playerElement.style = "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
        }
    };
    /**
     * Resizes the player element to fit an arbitrary size
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToArbitrarySize = function (playerElement) {
        var videoElement = playerElement.getElementsByTagName("VIDEO")[0];
        //Video is now 100% of the playerElement, so set the playerElement style
        playerElement.setAttribute('style', "top: 0px; left: 0px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        //playerElement.style = "top: 0px; left: 0px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional;
    };
    /**
     * An override for setting up the mouse and freezeFrame
     * @param element - the player DOM element
     */
    UiController.prototype.setUpMouseAndFreezeFrame = function (element) { };
    /**
     * An override for updating the video stream size
     */
    UiController.prototype.updateVideoStreamSize = function () { };
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    UiController.prototype.resizePlayerStyle = function () {
        var playerElement = document.getElementById('player');
        if (!playerElement) {
            return;
        }
        this.updateVideoStreamSize();
        if (playerElement.classList.contains('fixed-size')) {
            this.setUpMouseAndFreezeFrame(playerElement);
            return;
        }
        var checkBox = document.getElementById('enlarge-display-to-fill-window-tgl');
        var videoWidth = parseInt(playerElement.getAttribute("videoWidth"));
        var videoHeight = parseInt(playerElement.getAttribute("videoHeight"));
        var windowSmallerThanPlayer = window.innerWidth < videoWidth || window.innerHeight < videoHeight;
        if (checkBox !== null) {
            if (checkBox.checked || windowSmallerThanPlayer) {
                this.resizePlayerStyleToFillWindow(playerElement);
            }
            else {
                this.resizePlayerStyleToActualSize(playerElement);
            }
        }
        else {
            this.resizePlayerStyleToArbitrarySize(playerElement);
        }
        this.setUpMouseAndFreezeFrame(playerElement);
    };
    /**
     * Registers the the resize windows tick box event
     */
    UiController.prototype.registerResizeTickBoxEvent = function () {
        window.addEventListener('resize', this.resizePlayerStyle.bind(this), true);
        window.addEventListener('orientationchange', this.onOrientationChange);
        var resizeCheckBox = document.getElementById('enlarge-display-to-fill-window-tgl');
        if (resizeCheckBox !== null) {
            resizeCheckBox.onchange = function () {
                this.resizePlayerStyle();
            }.bind(this);
        }
    };
    /**
     * On the orientation change of a window clear the timeout
     */
    UiController.prototype.onOrientationChange = function () {
        var _this = this;
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = setTimeout(function () { _this.resizePlayerStyle(); }, 500);
    };
    return UiController;
}());

/**
 * Handles the player style attributes so they can be instantiated
 */
var playerStyleAttributes = /** @class */ (function () {
    function playerStyleAttributes() {
        this.styleCursor = 'default';
    }
    return playerStyleAttributes;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerController.ts":
/*!**************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerController": () => (/* binding */ VideoPlayerController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
var VideoPlayerController = /** @class */ (function () {
    function VideoPlayerController(htmlDivElement, startVideoMuted) {
        // set the audio defaults
        this.startVideoMuted = startVideoMuted;
        // the video element needs to exist before creating the player so assign the div and make the element
        this.videoPlayerDiv = htmlDivElement;
        this.videoElement = document.createElement("video");
        this.audioElement = document.createElement("Audio");
    }
    /**
     * Create the video Element
     */
    VideoPlayerController.prototype.createVideoPlayer = function () {
        this.videoElement.id = "streamingVideo";
        this.videoElement.muted = this.startVideoMuted;
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = "100%";
        this.videoElement.style.height = "100%";
        this.videoElement.onmouseenter = this.handleMouseEnter.bind(this);
        this.videoElement.onmouseleave = this.handleMouseLeave.bind(this);
        this.videoPlayerDiv.appendChild(this.videoElement);
    };
    /**
     * Handle when the locked state Changed
     */
    VideoPlayerController.prototype.handleLockStateChange = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Lock state has changed");
        if (document.pointerLockElement === this.videoElement /*document.mozPointerLockElement === playerElement*/) {
            document.onmousemove = this.videoInputBindings.handleMouseMove.bind(this.videoInputBindings);
            document.onwheel = this.videoInputBindings.handleMouseWheel.bind(this.videoInputBindings);
            this.videoElement.onmousedown = this.videoInputBindings.handleMouseDown.bind(this.videoInputBindings);
            this.videoElement.onmouseup = this.videoInputBindings.handleMouseUp.bind(this.videoInputBindings);
        }
        else {
            document.onmousemove = null;
            this.videoElement.onmousedown = null;
            this.videoElement.onmouseup = null;
            this.videoElement.onwheel = null;
        }
    };
    /**
     * Handle when the Element is mouse clicked
     * @param event - Mouse Event
     */
    VideoPlayerController.prototype.handleClick = function (event) {
        if (this.videoElement.paused) {
            this.videoElement.play();
        }
        this.videoElement.requestPointerLock();
    };
    /**
     * Handle when the Mouse has entered the element
     * @param event - Mouse Event
     */
    VideoPlayerController.prototype.handleMouseEnter = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Mouse Entered");
        this.mouseController.sendMouseEnter();
    };
    /**
     * Handles when the mouse has left the element
     * @param event - Mouse event
     */
    VideoPlayerController.prototype.handleMouseLeave = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Mouse Left");
        this.mouseController.sendMouseLeave();
    };
    /**
     * Handles the Load Meta Data Event
     * @param event - Event Not used
     */
    VideoPlayerController.prototype.handleLoadMetaData = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("showPlayOverlay \n resizePlayerStyle");
    };
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    VideoPlayerController.prototype.handleOnTrack = function (rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("handleOnTrack " + JSON.stringify(rtcTrackEvent.streams));
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog('Got track - ' + rtcTrackEvent.track.kind + ' id=' + rtcTrackEvent.track.id + ' readyState=' + rtcTrackEvent.track.readyState);
        }
        if (rtcTrackEvent.track.kind == "audio") {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == "video" && this.videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            this.videoElement.srcObject = rtcTrackEvent.streams[0];
            console.log('Set video source from video track ontrack.');
            return;
        }
    };
    /**
    * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
    * @param audioMediaStream - Audio Media stream track
    */
    VideoPlayerController.prototype.CreateAudioTrack = function (audioMediaStream) {
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (this.videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (this.videoElement.srcObject && this.videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            console.log('Created new audio element to play separate audio stream.');
        }
    };
    /**
     * Plays the audio from the audio element or sets up an event listener to play it once an interaction has occurred
     */
    VideoPlayerController.prototype.PlayAudioTrack = function () {
        var _this = this;
        // attempt to auto play the audio from the audio element if not then set up a listener 
        this.audioElement.muted = false;
        this.audioElement.play().catch(function (onRejectedReason) {
            console.log(onRejectedReason);
            console.log("Browser does not support autoplaying audio without interaction - to resolve this we are going to run the audio until the video is clicked");
            var clickToPlayAudio = function () {
                _this.audioElement.muted = false;
                _this.audioElement.play();
                _this.videoElement.removeEventListener("click", clickToPlayAudio);
            };
            _this.videoElement.addEventListener("click", clickToPlayAudio);
        });
    };
    /**
     * Set the Video Elements src object tracks to enable
     * @param enabled - Enable Tracks on the Src Object
     */
    VideoPlayerController.prototype.setVideoEnabled = function (enabled) {
        this.videoElement.srcObject.getTracks().forEach(function (track) { return track.enabled = enabled; });
    };
    return VideoPlayerController;
}());

/* 5457524F4D4D */ 


/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts":
/*!********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseHoverEvents": () => (/* binding */ VideoPlayerMouseHoverEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Custom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Custom */ "./src/Custom/index.ts");

// ::START

// ::END
/**
 * Video Player mouse Hover handler
 */
var VideoPlayerMouseHoverEvents = /** @class */ (function () {
    /**
     * @param mouseController - Mouse Controller
     */
    function VideoPlayerMouseHoverEvents(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseMove = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("MouseMove");
        this.mouseController.sendMouseMove(mouseEvent.offsetX, mouseEvent.offsetY, mouseEvent.movementX, mouseEvent.movementY);
        mouseEvent.preventDefault();
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_1__.EventsClass.mouse.move(mouseEvent.offsetX, mouseEvent.offsetY, mouseEvent.movementX, mouseEvent.movementY);
        // ::END
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseDown = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("onMouse Down");
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_1__.EventsClass.mouse.down(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        // ::END
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_1__.EventsClass.mouse.up(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        // ::END
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseWheel = function (wheelEvent) {
        // ::START
        // const wheelDelta2 = wheelEvent.detail * -120
        var wheelDelta = wheelEvent.wheelDelta;
        var offsetX = wheelEvent.offsetX;
        var offsetY = wheelEvent.offsetY;
        // ::END
        // this.mouseController.sendMouseWheel(wheelEvent.detail * -120, wheelEvent.offsetX, wheelEvent.offsetY);
        this.mouseController.sendMouseWheel(wheelDelta, offsetX, offsetY);
        wheelEvent.preventDefault();
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_1__.EventsClass.mouse.wheel(wheelDelta, offsetX, offsetY);
        // ::END
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleContextMenu = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    return VideoPlayerMouseHoverEvents;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts":
/*!*********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseLockedEvents": () => (/* binding */ VideoPlayerMouseLockedEvents)
/* harmony export */ });
/**
 * Handle the mouse locked events
 */
var VideoPlayerMouseLockedEvents = /** @class */ (function () {
    /**
     * @param htmlVideoElement - The HTML Video Element
     * @param mouseController  - Mouse Controller
     */
    function VideoPlayerMouseLockedEvents(htmlVideoElement, mouseController) {
        this.htmlVideoElement = htmlVideoElement;
        this.mouseController = mouseController;
        this.x = this.htmlVideoElement.width / 2;
        this.y = this.htmlVideoElement.height / 2;
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseMove = function (mouseEvent) {
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > this.htmlVideoElement.clientWidth) {
            this.x -= this.htmlVideoElement.clientWidth;
        }
        if (this.y > this.htmlVideoElement.clientHeight) {
            this.y -= this.htmlVideoElement.clientHeight;
        }
        if (this.x < 0) {
            this.x = this.htmlVideoElement.clientWidth + this.x;
        }
        if (this.y < 0) {
            this.y = this.htmlVideoElement.clientHeight - this.y;
        }
        this.mouseController.sendMouseMove(this.x, this.y, mouseEvent.movementX, mouseEvent.movementY);
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseDown = function (mouseEvent) {
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.deltaY, wheelEvent.x, wheelEvent.y);
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleContextMenu = function (mouseEvent) {
        console.info("onContextMenu");
    };
    return VideoPlayerMouseLockedEvents;
}());



/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "webRtcPlayerController": () => (/* binding */ webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerController */ "./src/VideoPlayer/VideoPlayerController.ts");
/* harmony import */ var _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Ui/UiController */ "./src/Ui/UiController.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../UeInstanceMessage/UeDescriptorUi */ "./src/UeInstanceMessage/UeDescriptorUi.ts");
/* harmony import */ var _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../UeInstanceMessage/UeControlMessage */ "./src/UeInstanceMessage/UeControlMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Inputs_InputController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Inputs/InputController */ "./src/Inputs/InputController.ts");
/* harmony import */ var _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../MicPlayer/MicController */ "./src/MicPlayer/MicController.ts");
/* harmony import */ var _Custom__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Custom */ "./src/Custom/index.ts");



//import { FreezeFrameLogic } from "../FreezeFrame/FreezeFrameLogic";








// ::START

// ::END
/**
 * Entry point for the Web RTC Player
 */
var webRtcPlayerController = /** @class */ (function () {
    /**
     *
     * @param config - the frontend config object
     * @param delegate - the delegate interface object
     */
    function webRtcPlayerController(config, delegate) {
        var _this = this;
        this.lastTimeResized = new Date().getTime();
        this.config = config;
        this.delegate = delegate;
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server 
        this.afkLogic = new _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__.AfkLogic(this.config.controlScheme, this.config.afkTimeout);
        this.afkLogic.closeWebSocket = function () { return _this.closeSignalingServer(); };
        this.uiController = new _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__.UiController();
        this.uiController.setUpMouseAndFreezeFrame = this.setUpMouseAndFreezeFrame.bind(this);
        this.uiController.registerResizeTickBoxEvent();
        //this.freezeFrame = new FreezeFrame();
        //this.freezeFrame.freezeFrameOverlay.resizePlayerStyle = this.uiController.resizePlayerStyle.bind(this);
        this.dataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_4__.DataChannelController();
        this.dataChannelController.handleOnOpen = this.handleDataChannelConnected.bind(this);
        this.dataChannelController.onLatencyTestResult = this.handleLatencyTestResult.bind(this);
        this.dataChannelController.onVideoEncoderAvgQP = this.handleVideoEncoderAvgQP.bind(this);
        this.dataChannelController.OnInitialSettings = this.handleInitialSettings.bind(this);
        this.dataChannelController.onQualityControlOwnership = this.handleQualityControlOwnership.bind(this);
        this.dataChannelController.resetAfkWarningTimerOnDataSend = function () { return _this.afkLogic.resetAfkWarningTimer(); };
        this.videoPlayerController = new _VideoPlayer_VideoPlayerController__WEBPACK_IMPORTED_MODULE_1__.VideoPlayerController(this.config.playerElement, this.config.startVideoMuted);
        //this.freezeFrame.setPlayOverlayEvent(this.playOverlayEvent);
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__.WebSocketController(this.config.signallingServerAddress);
        this.webSocketController.onConfig = this.handleOnConfigMessage.bind(this);
        this.webSocketController.onInstanceStateChange = this.handleInstanceStateChange.bind(this);
        this.webSocketController.onAuthenticationResponse = this.handleAuthenticationResponse.bind(this);
        this.webSocketController.onWebSocketOncloseOverlayMessage = this.delegate.onDisconnect.bind(this.delegate);
        // set up the final webRtc player controller methods from within our delegate so a connection can be activated
        this.setUpWebRtcConnectionForActivation();
        // now that the delegate has finished instantiating connect the rest of the afk methods to the afk logic class
        this.afkLogic.showAfkOverlay = function () { return _this.delegate.showAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.updateAfkCountdown = function () { return _this.delegate.updateAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.hideCurrentOverlay = function () { return _this.delegate.hideCurrentOverlay(); };
    }
    /**
     * connect up the onAfkClick action with a method so it can be exposed to the delegate
     */
    webRtcPlayerController.prototype.onAfkClick = function () {
        this.afkLogic.onAfkClick();
    };
    /**
     * Restart the stream automaticity without refreshing the page
     */
    webRtcPlayerController.prototype.restartStreamAutomaticity = function () {
        var _this = this;
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            console.log("The Web Socket Controller does not exist so this will not work right now.");
            return;
        }
        // if a websocket object has not been created connect normally without closing 
        if (!this.webSocketController.webSocket) {
            console.log("A websocket connection has not been made yet please click to start the stream");
        }
        else {
            // close the connection 
            this.webSocketController.close();
            // wait for the connection to close and restart the connection
            setTimeout(function () { _this.setUpWebRtcConnectionForActivation(); }, 3000);
        }
    };
    /**
     * activate the setIWebRtcPlayerController method within our delegate to set up the final webRtc player controller methods so a webRtc connection can be made
     */
    webRtcPlayerController.prototype.setUpWebRtcConnectionForActivation = function () {
        this.delegate.setIWebRtcPlayerController(this);
    };
    /**
     * Plays the stream and sets up other pieces while the stream starts also handles if the video cannot play
     */
    webRtcPlayerController.prototype.playStream = function () {
        var _this = this;
        if (this.videoPlayerController && this.videoPlayerController.videoElement) {
            // handle play() with .then as it is an asynchronous call  
            this.videoPlayerController.videoElement.play().then(function () {
                _this.videoPlayerController.PlayAudioTrack();
                _this.ueControlMessage.SendRequestInitialSettings();
                _this.ueControlMessage.SendRequestQualityControl();
                //this.freezeFrame.freezeFrameOverlay.showFreezeFrameOverlay();
                _this.delegate.hideCurrentOverlay();
                _this.inputController.registerTouch(_this.config.fakeMouseWithTouches, _this.config.playerElement);
                _this.afkLogic.startAfkWarningTimer();
            }).catch(function (onRejectedReason) {
                console.log(onRejectedReason);
                console.log("Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
                _this.delegate.showPlayOverlay();
                // ::START
                _Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.setWebrtcStatus(_Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.webrtcStatusList.initialized_no_autoplay);
                // ::END
            });
        }
        else {
            console.error("Could not player video stream because webRtcPlayerObj.video was not valid.");
        }
    };
    /**
     * Enable the video to play automaticity if enableSpsAutoplay is true
     */
    webRtcPlayerController.prototype.autoPlayVideoOrSetUpPlayOverlay = function () {
        if (this.config.enableSpsAutoplay === true) {
            // set up the auto play on the video element  
            this.videoPlayerController.videoElement.autoplay = true;
            // attempt to play the video
            this.playStream();
        }
        else {
            this.delegate.showPlayOverlay();
        }
    };
    /**
     * Connect to the Signaling server
     */
    webRtcPlayerController.prototype.connectToSignallingSever = function () {
        this.webSocketController.connect();
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.setWebrtcStatus(_Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.webrtcStatusList.activation);
        // ::END
    };
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    webRtcPlayerController.prototype.startSession = function (peerConfig) {
        // set up url params for STUN, Mic and SFU
        this.urlParams = new URLSearchParams(window.location.search);
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_5__.PeerConnectionController(peerConfig, this.urlParams);
        //set up mic controller
        this.micController = new _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_10__.MicController(this.urlParams);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = this.handleVideoStats.bind(this);
        /* When the Peer Connection Wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = this.handleSendWebRTCOffer.bind(this);
        /* When the Peer connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = this.handleSendIceCandidate.bind(this);
        // handel mic connections with promise
        this.dataChannelController.createDataChannel(this.peerConnectionController.peerConnection, "cirrus", this.datachannelOptions);
        // set up webRtc text overlays 
        this.peerConnectionController.showTextOverlayConnecting = this.delegate.onWebRtcConnecting.bind(this.delegate);
        this.peerConnectionController.showTextOverlaySetupFailure = this.delegate.onWebRtcFailed.bind(this.delegate);
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = this.videoPlayerController.handleOnTrack.bind(this.videoPlayerController);
        /* Start the Hand shake process by creating an Offer */
        this.peerConnectionController.createOffer(this.sdpConstraints, this.micController.useMic);
    };
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    webRtcPlayerController.prototype.handleOnConfigMessage = function (messageConfig) {
        /* Tell the WebRtcController to start a session with the peer options sent from the signaling server */
        this.startSession(messageConfig.peerConnectionOptions);
        /* When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message */
        this.webSocketController.onWebRtcAnswer = this.handleWebRtcAnswer.bind(this);
        /* When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message  */
        this.webSocketController.onIceCandidate = this.handleIceCandidate.bind(this);
    };
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer Message from the Signaling server
     */
    webRtcPlayerController.prototype.handleWebRtcAnswer = function (Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("There is an answer");
        var sdpAnswer = {
            sdp: Answer.sdp,
            type: "answer"
        };
        this.peerConnectionController.handleAnswer(sdpAnswer);
        this.delegate.onWebRtcAnswer();
    };
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    webRtcPlayerController.prototype.handleIceCandidate = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("Web RTC Controller: onWebRtcIce");
        var candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    };
    /**
     * Send the ice Candidate to the signaling server via websocket
         * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    webRtcPlayerController.prototype.handleSendIceCandidate = function (iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("OnIceCandidate");
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    };
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    webRtcPlayerController.prototype.handleSendWebRTCOffer = function (offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("Sending the offer to the Server");
        this.webSocketController.sendWebRtcOffer(offer);
    };
    /**
     * registers the mouse for use in IWebRtcPlayerController
     */
    webRtcPlayerController.prototype.activateRegisterMouse = function () {
        this.inputController.registerMouse(this.config.controlScheme, this.videoPlayerController);
    };
    /**
     * Sets up the Data channel Keyboard, Mouse, UE Control Message, UE Descriptor
     */
    webRtcPlayerController.prototype.handleDataChannelConnected = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("Data Channel is open");
        // show the connected overlay 
        this.delegate.onWebRtcConnected();
        this.inputController = new _Inputs_InputController__WEBPACK_IMPORTED_MODULE_9__.InputController(this.dataChannelController);
        this.ueControlMessage = new _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_7__.UeControlMessage(this.dataChannelController);
        this.ueDescriptorUi = new _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_6__.UeDescriptorUi(this.dataChannelController);
        this.videoPlayerController.createVideoPlayer();
        this.activateRegisterMouse();
        this.inputController.registerKeyBoard(this.config.suppressBrowserKeys);
        this.inputController.registerGamePad();
        this.videoPlayerController.mouseController = this.inputController.mouseController;
        this.uiController.resizePlayerStyle();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog("onVideoInitialised");
        //this.dataChannelController.processFreezeFrameMessage = //this.freezeFrame.processFreezeFrameMessage.bind(//this.freezeFrame);
        //this.dataChannelController.onUnFreezeFrame = //this.freezeFrame.freezeFrameOverlay.invalidateFreezeFrameOverlay.bind(//this.freezeFrame);
        setInterval(this.getStats.bind(this), 1000);
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.uiController.resizePlayerStyle();
        //this.freezeFrame.freezeFrameOverlay.checkIfVideoExists = this.checkIfVideoExists.bind(//this.freezeFrame);
        //this.freezeFrame.freezeFrameOverlay.setVideoEnabled = this.videoPlayerController.setVideoEnabled.bind(this.videoPlayerController);
        this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayerController.videoElement.clientWidth, this.videoPlayerController.videoElement.clientHeight);
        this.delegate.onVideoInitialised();
        this.uiController.updateVideoStreamSize = this.updateVideoStreamSize.bind(this);
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.setWebrtcStatus(_Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.webrtcStatusList.initialized);
        // ::END
    };
    /**
     * Handles when the web socket receives an authentication response
     * @param authResponse - Authentication Response
     */
    webRtcPlayerController.prototype.handleAuthenticationResponse = function (authResponse) {
        this.delegate.onAuthenticationResponse(authResponse);
    };
    /**
     * Handles when the stream size changes
     */
    webRtcPlayerController.prototype.updateVideoStreamSize = function () {
        // Call the setter before calling this function
        if (!this.matchViewportResolution) {
            return;
        }
        var now = new Date().getTime();
        if (now - this.lastTimeResized > 1000) {
            var playerElement = document.getElementById('player');
            if (!playerElement) {
                return;
            }
            this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayerController.videoElement.clientWidth, this.videoPlayerController.videoElement.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger.verboseLog('Resizing too often - skipping');
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(this.updateVideoStreamSize, 1000);
        }
    };
    /**
     * Handles when the Instance State Changes
     * @param instanceState  - Instance State
     */
    webRtcPlayerController.prototype.handleInstanceStateChange = function (instanceState) {
        this.delegate.onInstanceStateChange(instanceState);
    };
    /**
     * Checks if the video player div exists
     * @returns - if Video Exists
     */
    webRtcPlayerController.prototype.checkIfVideoExists = function () {
        if (this.videoPlayerController.videoPlayerDiv) {
            return true;
        }
    };
    /**
     * Set the freeze frame overlay to the player div
     * @param playerElement - The div element of the Player
     */
    webRtcPlayerController.prototype.setUpMouseAndFreezeFrame = function (playerElement) {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.playerElementClientRect = playerElement.getBoundingClientRect();
        //this.freezeFrame.freezeFrameOverlay.resizeFreezeFrameOverlay();
    };
    /**
     * Close the Connection to the signaling server
     */
    webRtcPlayerController.prototype.closeSignalingServer = function () {
        this.webSocketController.close();
    };
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    webRtcPlayerController.prototype.getStats = function () {
        this.peerConnectionController.generateStats();
    };
    /**
     * Send a Latency Test Request to the UE Instance
     */
    webRtcPlayerController.prototype.sendLatencyTest = function () {
        this.latencyStartTime = Date.now();
        this.ueControlMessage.sendLatencyTest(this.latencyStartTime);
    };
    /**
     * Send the Encoder Settings to the UE Instance as a UE UI Descriptor.
     * @param encoder - Encoder Settings
     */
    webRtcPlayerController.prototype.sendEncoderSettings = function (encoder) {
        console.log("----   Encoder Settings    ----\n" + JSON.stringify(encoder, undefined, 4) + "\n-------------------------------");
        if (encoder.RateControl != null) {
            this.ueDescriptorUi.sendEncoderRateControl(encoder.RateControl);
        }
        if (encoder.TargetBitrate != null) {
            this.ueDescriptorUi.sendEncoderTargetBitRate(encoder.TargetBitrate);
        }
        if (encoder.MaxBitrate != null) {
            this.ueDescriptorUi.sendEncoderMaxBitrateVbr(encoder.MaxBitrate);
        }
        if (encoder.MinQP != null) {
            this.ueDescriptorUi.sendEncoderMinQP(encoder.MinQP);
        }
        if (encoder.MaxQP != null) {
            this.ueDescriptorUi.sendEncoderMaxQP(encoder.MaxQP);
        }
        if (encoder.FillerData != null) {
            this.ueDescriptorUi.sendEncoderEnableFillerData(encoder.FillerData);
        }
        if (encoder.MultiPass != null) {
            this.ueDescriptorUi.sendEncoderMultiPass(encoder.MultiPass);
        }
    };
    /**
     * Send the WebRTC Settings to the UE Instance as a UE UI Descriptor.
     * @param webRTC - Web RTC Settings
     */
    webRtcPlayerController.prototype.sendWebRtcSettings = function (webRTC) {
        console.log("----   WebRTC Settings    ----\n" + JSON.stringify(webRTC, undefined, 4) + "\n-------------------------------");
        if (webRTC.DegradationPref != null) {
            this.ueDescriptorUi.sendWebRtcDegradationPreference(webRTC.DegradationPref);
        }
        if (webRTC.FPS != null) {
            this.ueDescriptorUi.sendWebRtcFps(webRTC.FPS);
            this.ueDescriptorUi.sendWebRtcMaxFps(webRTC.FPS);
        }
        if (webRTC.MinBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMinBitrate(webRTC.MinBitrate);
        }
        if (webRTC.MaxBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMaxBitrate(webRTC.MaxBitrate);
        }
        if (webRTC.LowQP != null) {
            this.ueDescriptorUi.sendWebRtcLowQpThreshold(webRTC.LowQP);
        }
        if (webRTC.HighQP != null) {
            this.ueDescriptorUi.sendWebRtcHighQpThreshold(webRTC.HighQP);
        }
    };
    /**
     * Send Aggregated Stats to the Signaling Server
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.sendStatsToSignallingServer = function (stats) {
        //console.log("----   Sending Aggregated Stats to Signaling Server   ----\n" + JSON.stringify(stats, undefined, 4) + "\n-----------------------------------------------------------");
        this.webSocketController.sendStats(stats);
    };
    /**
     * Sends a UI Interaction Descriptor to the UE Instance
     * @param message - String to send to the UE Instance
     */
    webRtcPlayerController.prototype.sendUeUiDescriptor = function (message) {
        //console.log("----   UE UI Interaction String   ----\n" + JSON.stringify(message, undefined, 4) + "\n---------------------------------------");
        this.ueDescriptorUi.sendUiInteraction(message);
    };
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    webRtcPlayerController.prototype.sendShowFps = function () {
        //console.log("----   Sending show stat to UE   ----");
        this.ueDescriptorUi.sendShowFps();
    };
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    webRtcPlayerController.prototype.sendRequestQualityControlOwnership = function () {
        //console.log("----   Sending Request to Control Quality  ----");
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param latencyTimings - Latency Test Timings
     */
    webRtcPlayerController.prototype.handleLatencyTestResult = function (latencyTimings) {
        latencyTimings.testStartTimeMs = this.latencyStartTime;
        latencyTimings.browserReceiptTimeMs = Date.now();
        latencyTimings.latencyExcludingDecode = ~~(latencyTimings.browserReceiptTimeMs - latencyTimings.testStartTimeMs);
        latencyTimings.testDuration = ~~(latencyTimings.TransmissionTimeMs - latencyTimings.ReceiptTimeMs);
        latencyTimings.networkLatency = ~~(latencyTimings.latencyExcludingDecode - latencyTimings.testDuration);
        if (latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs) {
            latencyTimings.endToEndLatency = ~~(latencyTimings.frameDisplayDeltaTimeMs + latencyTimings.networkLatency, +latencyTimings.CaptureToSendMs);
        }
        this.delegate.onLatencyTestResult(latencyTimings);
    };
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param settings - Initial Encoder and Web RTC Settings
     */
    webRtcPlayerController.prototype.handleInitialSettings = function (settings) {
        this.delegate.onInitialSettings(settings);
        // ::START
        _Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.ueInitialSettings.dispatch(settings);
        _Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.setWebrtcStatus(_Custom__WEBPACK_IMPORTED_MODULE_11__.EventsClass.webrtcStatusList.active);
        // ::END
    };
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param AvgQP - Encoders Quantization Parameter
     */
    webRtcPlayerController.prototype.handleVideoEncoderAvgQP = function (AvgQP) {
        this.delegate.onVideoEncoderAvgQP(AvgQP);
    };
    /**
     * Flag set if the user has Quality Ownership
     * @param hasQualityOwnership - Does the current client have Quality Ownership
     */
    webRtcPlayerController.prototype.handleQualityControlOwnership = function (hasQualityOwnership) {
        this.delegate.onQualityControlOwnership(hasQualityOwnership);
    };
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.handleVideoStats = function (stats) {
        this.delegate.onVideoStats(stats);
    };
    /**
    * To Resize the Video Player element
    */
    webRtcPlayerController.prototype.resizePlayerStyle = function () {
        this.uiController.resizePlayerStyle();
    };
    return webRtcPlayerController;
}());



/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstanceState": () => (/* binding */ InstanceState),
/* harmony export */   "MessageAnswer": () => (/* binding */ MessageAnswer),
/* harmony export */   "MessageAuthRequired": () => (/* binding */ MessageAuthRequired),
/* harmony export */   "MessageAuthResponse": () => (/* binding */ MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* binding */ MessageAuthResponseOutcomeType),
/* harmony export */   "MessageConfig": () => (/* binding */ MessageConfig),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageInstanceState": () => (/* binding */ MessageInstanceState),
/* harmony export */   "MessagePlayerCount": () => (/* binding */ MessagePlayerCount),
/* harmony export */   "MessageRecv": () => (/* binding */ MessageRecv),
/* harmony export */   "MessageRecvTypes": () => (/* binding */ MessageRecvTypes)
/* harmony export */ });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["AUTHENTICATION_REQUIRED"] = "authenticationRequired";
    MessageRecvTypes["AUTHENTICATION_RESPONSE"] = "authenticationResponse";
    MessageRecvTypes["INSTANCE_STATE"] = "instanceState";
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Types of Authentication reposes
 */
var MessageAuthResponseOutcomeType;
(function (MessageAuthResponseOutcomeType) {
    MessageAuthResponseOutcomeType["REDIRECT"] = "REDIRECT";
    MessageAuthResponseOutcomeType["INVALID_TOKEN"] = "INVALID_TOKEN";
    MessageAuthResponseOutcomeType["AUTHENTICATED"] = "AUTHENTICATED";
    MessageAuthResponseOutcomeType["ERROR"] = "ERROR";
})(MessageAuthResponseOutcomeType || (MessageAuthResponseOutcomeType = {}));
/**
 * States of the UE Instance
 */
var InstanceState;
(function (InstanceState) {
    InstanceState["UNALLOCATED"] = "UNALLOCATED";
    InstanceState["PENDING"] = "PENDING";
    InstanceState["FAILED"] = "FAILED";
    InstanceState["READY"] = "READY";
})(InstanceState || (InstanceState = {}));
/**
 * Concrete Received Message wrapper
 */
var MessageRecv = /** @class */ (function () {
    function MessageRecv() {
    }
    return MessageRecv;
}());

/**
 * Authentication Required Message wrapper
 */
var MessageAuthRequired = /** @class */ (function (_super) {
    __extends(MessageAuthRequired, _super);
    function MessageAuthRequired() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthRequired;
}(MessageRecv));

/**
 * Authentication Response Message wrapper
 */
var MessageAuthResponse = /** @class */ (function (_super) {
    __extends(MessageAuthResponse, _super);
    function MessageAuthResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthResponse;
}(MessageRecv));

/**
 * Instance State Message wrapper
 */
var MessageInstanceState = /** @class */ (function (_super) {
    __extends(MessageInstanceState, _super);
    function MessageInstanceState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageInstanceState;
}(MessageRecv));

/**
 * Config Message Wrapper
 */
var MessageConfig = /** @class */ (function (_super) {
    __extends(MessageConfig, _super);
    function MessageConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageConfig;
}(MessageRecv));

/**
 * Player Count Message wrapper
 */
var MessagePlayerCount = /** @class */ (function (_super) {
    __extends(MessagePlayerCount, _super);
    function MessagePlayerCount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessagePlayerCount;
}(MessageRecv));

/**
 * Web RTC offer Answer Message wrapper
 */
var MessageAnswer = /** @class */ (function (_super) {
    __extends(MessageAnswer, _super);
    function MessageAnswer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAnswer;
}(MessageRecv));

/**
 * Ice Candidate Message wrapper
 */
var MessageIceCandidate = /** @class */ (function (_super) {
    __extends(MessageIceCandidate, _super);
    function MessageIceCandidate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageIceCandidate;
}(MessageRecv));



/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MessageAuthRequest": () => (/* binding */ MessageAuthRequest),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageRequestInstance": () => (/* binding */ MessageRequestInstance),
/* harmony export */   "MessageSend": () => (/* binding */ MessageSend),
/* harmony export */   "MessageSendTypes": () => (/* binding */ MessageSendTypes),
/* harmony export */   "MessageStats": () => (/* binding */ MessageStats),
/* harmony export */   "MessageWebRTCOffer": () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["STATS"] = "stats";
    MessageSendTypes["AUTHENTICATION_REQUEST"] = "authenticationRequest";
    MessageSendTypes["REQUEST_INSTANCE"] = "requestInstance";
    MessageSendTypes["OFFER"] = "offer";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
var MessageSend = /** @class */ (function () {
    function MessageSend() {
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageSend.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Sending => \n" + JSON.stringify(this, undefined, 4));
        return JSON.stringify(this);
    };
    return MessageSend;
}());

/**
 * Auth Request Message Wrapper
 */
var MessageAuthRequest = /** @class */ (function (_super) {
    __extends(MessageAuthRequest, _super);
    /**
     * @param token - Token Provided by the Auth Provider
     * @param provider - Name of the provider that is registered in the auth plugin
     */
    function MessageAuthRequest(token, provider) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.AUTHENTICATION_REQUEST;
        _this.token = token;
        _this.provider = provider;
        return _this;
    }
    return MessageAuthRequest;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessageRequestInstance = /** @class */ (function (_super) {
    __extends(MessageRequestInstance, _super);
    function MessageRequestInstance() {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.REQUEST_INSTANCE;
        return _this;
    }
    return MessageRequestInstance;
}(MessageSend));

/**
 * Aggregated Stats Message Wrapper
 */
var MessageStats = /** @class */ (function (_super) {
    __extends(MessageStats, _super);
    /**
     * @param aggregatedStats - Aggregated Stats
     */
    function MessageStats(aggregatedStats) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.STATS;
        _this.inboundVideoStats = aggregatedStats.inboundVideoStats;
        _this.inboundAudioStats = aggregatedStats.inboundAudioStats;
        _this.candidatePair = aggregatedStats.candidatePair;
        _this.dataChannelStats = aggregatedStats.dataChannelStats;
        _this.localCandidates = aggregatedStats.localCandidates;
        _this.remoteCandidates = aggregatedStats.remoteCandidates;
        _this.outboundVideoStats = aggregatedStats.outBoundVideoStats;
        return _this;
    }
    return MessageStats;
}(MessageSend));

/**
 *  Web RTC Offer message wrapper
 */
var MessageWebRTCOffer = /** @class */ (function (_super) {
    __extends(MessageWebRTCOffer, _super);
    /**
     * @param offer - Generated Web RTC Offer
     */
    function MessageWebRTCOffer(offer) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.OFFER;
        if (offer) {
            _this.type = offer.type;
            _this.sdp = offer.sdp;
        }
        return _this;
    }
    return MessageWebRTCOffer;
}(MessageSend));

/**
 * RTC Ice Candidate Wrapper
 */
var MessageIceCandidate = /** @class */ (function () {
    /**
     * @param candidate - RTC Ice Candidate
     */
    function MessageIceCandidate(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageIceCandidate.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Sending => \n" + JSON.stringify(this, undefined, 4));
        return JSON.stringify(this);
    };
    return MessageIceCandidate;
}());



/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebSocketController": () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");



// ::END
/**
 * The controller for the WebSocket and all associated methods
 */
var WebSocketController = /** @class */ (function () {
    /**
     * @param Address - The Address of the signaling server
     */
    function WebSocketController(Address) {
        this.WS_OPEN_STATE = 1;
        this.address = Address;
    }
    /**
     * Connect to the signaling server
     * @returns - If there is a connection
     */
    WebSocketController.prototype.connect = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog(this.address);
        try {
            this.webSocket = new WebSocket(this.address);
            this.webSocket.onopen = this.handleOnOpen.bind(this);
            this.webSocket.onerror = this.handleOnError.bind(this);
            this.webSocket.onclose = this.handleOnClose.bind(this);
            this.webSocket.onmessage = this.handleOnMessage.bind(this);
            return true;
        }
        catch (error) {
            console.error(error);
            return false;
        }
    };
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    WebSocketController.prototype.handleOnMessage = function (event) {
        var message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("received => \n" + JSON.stringify(JSON.parse(event.data), undefined, 4));
        switch (message.type) {
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_REQUIRED: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("AUTHENTICATION_REQUIRED");
                var authenticationRequired = JSON.parse(event.data);
                var url_string = window.location.href;
                var url = new URL(url_string);
                var authRequest = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageAuthRequest(url.searchParams.get("code"), url.searchParams.get("provider"));
                this.webSocket.send(authRequest.payload());
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_RESPONSE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("AUTHENTICATION_RESPONSE");
                var authenticationResponse = JSON.parse(event.data);
                this.onAuthenticationResponse(authenticationResponse);
                switch (authenticationResponse.outcome) {
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.REDIRECT: {
                        window.location.href = authenticationResponse.redirect;
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.AUTHENTICATED: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("User is authenticated and now requesting an instance");
                        this.webSocket.send(new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageRequestInstance().payload());
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.INVALID_TOKEN: {
                        console.warn("Authentication error : Invalid Token");
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.ERROR: {
                        console.warn("Authentication Error from server Check what you are sending");
                        break;
                    }
                    default: {
                        console.error("The Outcome Message has not been handled : this is really bad");
                        break;
                    }
                }
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.INSTANCE_STATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("INSTANCE_STATE");
                var instanceState = JSON.parse(event.data);
                this.onInstanceStateChange(instanceState);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("CONFIG");
                var config = JSON.parse(event.data);
                this.onConfig(config);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("PLAYER_COUNT");
                var playerCount = JSON.parse(event.data);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Player Count: " + (playerCount.count - 1));
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("ANSWER");
                var answer = JSON.parse(event.data);
                this.onWebRtcAnswer(answer);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("ICE_CANDIDATE");
                var iceCandidate = JSON.parse(event.data);
                this.onIceCandidate(iceCandidate.candidate);
                break;
            }
            default: {
                console.error("Error Message type not Defined");
                break;
            }
        }
    };
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    WebSocketController.prototype.handleOnOpen = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Connected to the signalling server via WebSocket");
    };
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    WebSocketController.prototype.handleOnError = function (event) {
        console.error('WebSocket error: ');
        console.log(event);
    };
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    WebSocketController.prototype.handleOnClose = function (event) {
        this.onWebSocketOncloseOverlayMessage(event);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.verboseLog("Disconnected to the signalling server via WebSocket: " + JSON.stringify(event.code) + " - " + event.reason);
    };
    WebSocketController.prototype.sendWebRtcOffer = function (offer) {
        var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer);
        this.webSocket.send(payload.payload());
    };
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    WebSocketController.prototype.sendIceCandidate = function (candidate) {
        console.log("Sending Ice Candidate");
        if (this.webSocket && this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            var IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    };
    /**
     * Closes the Websocket connection
     */
    WebSocketController.prototype.close = function () {
        this.webSocket.close();
    };
    /**
     * Sends the Aggregated Stats to the signaling server
     * @param stats - Stats Payload
     */
    WebSocketController.prototype.sendStats = function (stats) {
        var data = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageStats(stats);
        this.webSocket.send(data.payload());
    };
    /** Event used for Displaying websocket closed messages */
    WebSocketController.prototype.onWebSocketOncloseOverlayMessage = function (event) { };
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    WebSocketController.prototype.onConfig = function (messageConfig) { };
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    WebSocketController.prototype.onIceCandidate = function (iceCandidate) { };
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    WebSocketController.prototype.onWebRtcAnswer = function (messageAnswer) { };
    /**
     * Event fired with the websocket receives a instance state
     * @param instanceState - UE Instance State
     */
    WebSocketController.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Event fired with the websocket receives a Authentication Response
     * @param authResponse - Authentication Response
     */
    WebSocketController.prototype.onAuthenticationResponse = function (authResponse) { };
    return WebSocketController;
}());

/* 524f4d4d */ 


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_core.js":
/*!************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_core.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapter_factory.js */ "./node_modules/webrtc-adapter/src/js/adapter_factory.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





const adapter =
  (0,_adapter_factory_js__WEBPACK_IMPORTED_MODULE_0__.adapterFactory)({window: typeof window === 'undefined' ? undefined : window});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (adapter);


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_factory.js":
/*!***************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_factory.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "adapterFactory": () => (/* binding */ adapterFactory)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chrome/chrome_shim */ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js");
/* harmony import */ var _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firefox/firefox_shim */ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js");
/* harmony import */ var _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./safari/safari_shim */ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js");
/* harmony import */ var _common_shim__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common_shim */ "./node_modules/webrtc-adapter/src/js/common_shim.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_5__);
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */


  // Browser shims.






// Shimming starts here.
function adapterFactory({window} = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimSafari: true,
}) {
  // Utils.
  const logging = _utils__WEBPACK_IMPORTED_MODULE_0__.log;
  const browserDetails = _utils__WEBPACK_IMPORTED_MODULE_0__.detectBrowser(window);

  const adapter = {
    browserDetails,
    commonShim: _common_shim__WEBPACK_IMPORTED_MODULE_4__,
    extractVersion: _utils__WEBPACK_IMPORTED_MODULE_0__.extractVersion,
    disableLog: _utils__WEBPACK_IMPORTED_MODULE_0__.disableLog,
    disableWarnings: _utils__WEBPACK_IMPORTED_MODULE_0__.disableWarnings,
    // Expose sdp as a convenience. For production apps include directly.
    sdp: sdp__WEBPACK_IMPORTED_MODULE_5__,
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__ || !_chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimPeerConnection ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      if (browserDetails.version === null) {
        logging('Chrome shim can not determine version, not shimming.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__;

      // Must be called before shimPeerConnection.
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);

      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimMediaStream(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimPeerConnection(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimOnTrack(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimAddTrackRemoveTrack(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetSendersWithDtmf(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimGetStats(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.shimSenderReceiverGetStats(window, browserDetails);
      _chrome_chrome_shim__WEBPACK_IMPORTED_MODULE_1__.fixNegotiationNeeded(window, browserDetails);

      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimConnectionState(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.removeExtmapAllowMixed(window, browserDetails);
      break;
    case 'firefox':
      if (!_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__ || !_firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimPeerConnection ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__;

      // Must be called before shimPeerConnection.
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);

      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimGetUserMedia(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimPeerConnection(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimOnTrack(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimRemoveStream(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimSenderGetStats(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimReceiverGetStats(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimRTCDataChannel(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimAddTransceiver(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimGetParameters(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimCreateOffer(window, browserDetails);
      _firefox_firefox_shim__WEBPACK_IMPORTED_MODULE_2__.shimCreateAnswer(window, browserDetails);

      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimConnectionState(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);
      break;
    case 'safari':
      if (!_safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__ || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__;

      // Must be called before shimCallbackAPI.
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimAddIceCandidateNullOrEmpty(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimParameterlessSetLocalDescription(window, browserDetails);

      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimRTCIceServerUrls(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimCreateOfferLegacy(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimCallbacksAPI(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimLocalStreamsAPI(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimRemoteStreamsAPI(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimTrackEventTransceiver(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimGetUserMedia(window, browserDetails);
      _safari_safari_shim__WEBPACK_IMPORTED_MODULE_3__.shimAudioContext(window, browserDetails);

      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimRTCIceCandidate(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimMaxMessageSize(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.shimSendThrowTypeError(window, browserDetails);
      _common_shim__WEBPACK_IMPORTED_MODULE_4__.removeExtmapAllowMixed(window, browserDetails);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fixNegotiationNeeded": () => (/* binding */ fixNegotiationNeeded),
/* harmony export */   "shimAddTrackRemoveTrack": () => (/* binding */ shimAddTrackRemoveTrack),
/* harmony export */   "shimAddTrackRemoveTrackWithNative": () => (/* binding */ shimAddTrackRemoveTrackWithNative),
/* harmony export */   "shimGetDisplayMedia": () => (/* reexport safe */ _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__.shimGetDisplayMedia),
/* harmony export */   "shimGetSendersWithDtmf": () => (/* binding */ shimGetSendersWithDtmf),
/* harmony export */   "shimGetStats": () => (/* binding */ shimGetStats),
/* harmony export */   "shimGetUserMedia": () => (/* reexport safe */ _getusermedia__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia),
/* harmony export */   "shimMediaStream": () => (/* binding */ shimMediaStream),
/* harmony export */   "shimOnTrack": () => (/* binding */ shimOnTrack),
/* harmony export */   "shimPeerConnection": () => (/* binding */ shimPeerConnection),
/* harmony export */   "shimSenderReceiverGetStats": () => (/* binding */ shimSenderReceiverGetStats)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js");
/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */






function shimMediaStream(window) {
  window.MediaStream = window.MediaStream || window.webkitMediaStream;
}

function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
      window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
      get() {
        return this._ontrack;
      },
      set(f) {
        if (this._ontrack) {
          this.removeEventListener('track', this._ontrack);
        }
        this.addEventListener('track', this._ontrack = f);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        if (!this._ontrackpoly) {
          this._ontrackpoly = (e) => {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', te => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === te.track.id);
              } else {
                receiver = {track: te.track};
              }

              const event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(track => {
              let receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = this.getReceivers()
                  .find(r => r.track && r.track.id === track.id);
              } else {
                receiver = {track};
              }
              const event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            });
          };
          this.addEventListener('addstream', this._ontrackpoly);
        }
        return origSetRemoteDescription.apply(this, arguments);
      };
  } else {
    // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {
      if (!e.transceiver) {
        Object.defineProperty(e, 'transceiver',
          {value: {receiver: e.receiver}});
      }
      return e;
    });
  }
}

function shimGetSendersWithDtmf(window) {
  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
  if (typeof window === 'object' && window.RTCPeerConnection &&
      !('getSenders' in window.RTCPeerConnection.prototype) &&
      'createDTMFSender' in window.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === undefined) {
            if (track.kind === 'audio') {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };

    // augment addTrack when getSenders is not available.
    if (!window.RTCPeerConnection.prototype.getSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice(); // return a copy of the internal state.
      };
      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addTrack =
        function addTrack(track, stream) {
          let sender = origAddTrack.apply(this, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(this, track);
            this._senders.push(sender);
          }
          return sender;
        };

      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
      window.RTCPeerConnection.prototype.removeTrack =
        function removeTrack(sender) {
          origRemoveTrack.apply(this, arguments);
          const idx = this._senders.indexOf(sender);
          if (idx !== -1) {
            this._senders.splice(idx, 1);
          }
        };
    }
    const origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach(track => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };

    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        this._senders = this._senders || [];
        origRemoveStream.apply(this, [stream]);

        stream.getTracks().forEach(track => {
          const sender = this._senders.find(s => s.track === track);
          if (sender) { // remove sender
            this._senders.splice(this._senders.indexOf(sender), 1);
          }
        });
      };
  } else if (typeof window === 'object' && window.RTCPeerConnection &&
             'getSenders' in window.RTCPeerConnection.prototype &&
             'createDTMFSender' in window.RTCPeerConnection.prototype &&
             window.RTCRtpSender &&
             !('dtmf' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };

    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
      get() {
        if (this._dtmf === undefined) {
          if (this.track.kind === 'audio') {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}

function shimGetStats(window) {
  if (!window.RTCPeerConnection) {
    return;
  }

  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;

    // If selector is a function then we are in the old style stats so just
    // pass back the original getStats format to avoid breaking old users.
    if (arguments.length > 0 && typeof selector === 'function') {
      return origGetStats.apply(this, arguments);
    }

    // When spec-style getStats is supported, return those when called with
    // either no arguments or the selector argument is null.
    if (origGetStats.length === 0 && (arguments.length === 0 ||
        typeof selector !== 'function')) {
      return origGetStats.apply(this, []);
    }

    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach(report => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: 'local-candidate',
            remotecandidate: 'remote-candidate'
          }[report.type] || report.type
        };
        report.names().forEach(name => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });

      return standardReport;
    };

    // shim getStats with maplike support
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map(key => [key, stats[key]]));
    };

    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };

      return origGetStats.apply(this, [successCallbackWrapper_,
        selector]);
    }

    // promise-support
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        }, reject]);
    }).then(onSucc, onErr);
  };
}

function shimSenderReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender && window.RTCRtpReceiver)) {
    return;
  }

  // shim sender stats.
  if (!('getStats' in window.RTCRtpSender.prototype)) {
    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach(sender => sender._pc = this);
        return senders;
      };
    }

    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then(result =>
        /* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */
        _utils_js__WEBPACK_IMPORTED_MODULE_0__.filterStats(result, sender.track, true));
    };
  }

  // shim receiver stats.
  if (!('getStats' in window.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers =
        function getReceivers() {
          const receivers = origGetReceivers.apply(this, []);
          receivers.forEach(receiver => receiver._pc = this);
          return receivers;
        };
    }
    _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then(result =>
        _utils_js__WEBPACK_IMPORTED_MODULE_0__.filterStats(result, receiver.track, false));
    };
  }

  if (!('getStats' in window.RTCRtpSender.prototype &&
      'getStats' in window.RTCRtpReceiver.prototype)) {
    return;
  }

  // shim RTCPeerConnection.getStats(track).
  const origGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 &&
        arguments[0] instanceof window.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach(s => {
        if (s.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s;
          }
        }
      });
      this.getReceivers().forEach(r => {
        if (r.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r;
          }
        }
        return r.track === track;
      });
      if (err || (sender && receiver)) {
        return Promise.reject(new DOMException(
          'There are more than one sender or receiver for the track.',
          'InvalidAccessError'));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        'There is no sender or receiver for the track.',
        'InvalidAccessError'));
    }
    return origGetStats.apply(this, arguments);
  };
}

function shimAddTrackRemoveTrackWithNative(window) {
  // shim addTrack/removeTrack with native variants in order to make
  // the interactions with legacy getLocalStreams behave as in other browsers.
  // Keeps a mapping stream.id => [stream, rtpsenders...]
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams)
        .map(streamId => this._shimmedLocalStreams[streamId][0]);
    };

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      const sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders()
      .filter(newSender => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(streamId => {
          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            this._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (this._shimmedLocalStreams[streamId].length === 1) {
            delete this._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
}

function shimAddTrackRemoveTrack(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // shim addTrack and removeTrack.
  if (window.RTCPeerConnection.prototype.addTrack &&
      browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window);
  }

  // also shim pc.getLocalStreams when addTrack is shimmed
  // to return the original streams.
  const origGetLocalStreams = window.RTCPeerConnection.prototype
      .getLocalStreams;
  window.RTCPeerConnection.prototype.getLocalStreams =
    function getLocalStreams() {
      const nativeStreams = origGetLocalStreams.apply(this);
      this._reverseStreams = this._reverseStreams || {};
      return nativeStreams.map(stream => this._reverseStreams[stream.id]);
    };

  const origAddStream = window.RTCPeerConnection.prototype.addStream;
  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};

    stream.getTracks().forEach(track => {
      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }
    });
    // Add identity mapping for consistency with addTrack.
    // Unless this is being used with a stream from addTrack.
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };

  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};

      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);
      delete this._reverseStreams[(this._streams[stream.id] ?
          this._streams[stream.id].id : stream.id)];
      delete this._streams[stream.id];
    };

  window.RTCPeerConnection.prototype.addTrack =
    function addTrack(track, stream) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      const streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(t => t === track)) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      const alreadyExists = this.getSenders().find(s => s.track === track);
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      this._streams = this._streams || {};
      this._reverseStreams = this._reverseStreams || {};
      const oldStream = this._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(() => {
          this.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        const newStream = new window.MediaStream([track]);
        this._streams[stream.id] = newStream;
        this._reverseStreams[newStream.id] = stream;
        this.addStream(newStream);
      }
      return this.getSenders().find(s => s.track === track);
    };

  // replace the internal stream id with the external one and
  // vice versa.
  function replaceInternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
          externalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  function replaceExternalStreamId(pc, description) {
    let sdp = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach(internalId => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
          internalStream.id);
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp
    });
  }
  ['createOffer', 'createAnswer'].forEach(function(method) {
    const nativeMethod = window.RTCPeerConnection.prototype[method];
    const methodObj = {[method]() {
      const args = arguments;
      const isLegacyCall = arguments.length &&
          typeof arguments[0] === 'function';
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          }, arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments)
      .then(description => replaceInternalStreamId(this, description));
    }};
    window.RTCPeerConnection.prototype[method] = methodObj[method];
  });

  const origSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(this, arguments);
      }
      arguments[0] = replaceExternalStreamId(this, arguments[0]);
      return origSetLocalDescription.apply(this, arguments);
    };

  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

  const origLocalDescription = Object.getOwnPropertyDescriptor(
      window.RTCPeerConnection.prototype, 'localDescription');
  Object.defineProperty(window.RTCPeerConnection.prototype,
      'localDescription', {
        get() {
          const description = origLocalDescription.get.apply(this);
          if (description.type === '') {
            return description;
          }
          return replaceInternalStreamId(this, description);
        }
      });

  window.RTCPeerConnection.prototype.removeTrack =
    function removeTrack(sender) {
      if (this.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      const isLocal = sender._pc === this;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      this._streams = this._streams || {};
      let stream;
      Object.keys(this._streams).forEach(streamid => {
        const hasTrack = this._streams[streamid].getTracks()
          .find(track => sender.track === track);
        if (hasTrack) {
          stream = this._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          this.removeStream(this._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        this.dispatchEvent(new Event('negotiationneeded'));
      }
    };
}

function shimPeerConnection(window, browserDetails) {
  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
  }
  if (!window.RTCPeerConnection) {
    return;
  }

  // shim implicit creation of RTCSessionDescription/RTCIceCandidate
  if (browserDetails.version < 53) {
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }
}

// Attempt to fix ONN in plan-b mode.
function fixNegotiationNeeded(window, browserDetails) {
  _utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {
    const pc = e.target;
    if (browserDetails.version < 72 || (pc.getConfiguration &&
        pc.getConfiguration().sdpSemantics === 'plan-b')) {
      if (pc.signalingState !== 'stable') {
        return;
      }
    }
    return e;
  });
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js":
/*!**********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetDisplayMedia": () => (/* binding */ shimGetDisplayMedia)
/* harmony export */ });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */

function shimGetDisplayMedia(window, getSourceId) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  // getSourceId is a function that returns a promise resolving with
  // the sourceId of the screen/window/tab to be shared.
  if (typeof getSourceId !== 'function') {
    console.error('shimGetDisplayMedia: getSourceId argument is not ' +
        'a function');
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      return getSourceId(constraints)
        .then(sourceId => {
          const widthSpecified = constraints.video && constraints.video.width;
          const heightSpecified = constraints.video &&
            constraints.video.height;
          const frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetUserMedia": () => (/* binding */ shimGetUserMedia)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


const logging = _utils_js__WEBPACK_IMPORTED_MODULE_0__.log;

function shimGetUserMedia(window, browserDetails) {
  const navigator = window && window.navigator;

  if (!navigator.mediaDevices) {
    return;
  }

  const constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    const cc = {};
    Object.keys(c).forEach(key => {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        let oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(mix => {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      const remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      let face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      const getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(devices => {
            devices = devices.filter(d => d.kind === 'videoinput');
            let dev = devices.find(d => matches.some(match =>
              d.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes('back')) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  const shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, c => {
      navigator.webkitGetUserMedia(c, onSuccess, e => {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };
  navigator.getUserMedia = getUserMedia_.bind(navigator);

  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
  // function which returns a Promise, it does not accept spec-style
  // constraints.
  if (navigator.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(track => {
            track.stop();
          });
          throw new DOMException('', 'NotFoundError');
        }
        return stream;
      }, e => Promise.reject(shimError_(e))));
    };
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/common_shim.js":
/*!***********************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/common_shim.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "removeExtmapAllowMixed": () => (/* binding */ removeExtmapAllowMixed),
/* harmony export */   "shimAddIceCandidateNullOrEmpty": () => (/* binding */ shimAddIceCandidateNullOrEmpty),
/* harmony export */   "shimConnectionState": () => (/* binding */ shimConnectionState),
/* harmony export */   "shimMaxMessageSize": () => (/* binding */ shimMaxMessageSize),
/* harmony export */   "shimParameterlessSetLocalDescription": () => (/* binding */ shimParameterlessSetLocalDescription),
/* harmony export */   "shimRTCIceCandidate": () => (/* binding */ shimRTCIceCandidate),
/* harmony export */   "shimSendThrowTypeError": () => (/* binding */ shimSendThrowTypeError)
/* harmony export */ });
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */





function shimRTCIceCandidate(window) {
  // foundation is arbitrarily chosen as an indicator for full support for
  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
      window.RTCIceCandidate.prototype)) {
    return;
  }

  const NativeRTCIceCandidate = window.RTCIceCandidate;
  window.RTCIceCandidate = function RTCIceCandidate(args) {
    // Remove the a= which shouldn't be part of the candidate string.
    if (typeof args === 'object' && args.candidate &&
        args.candidate.indexOf('a=') === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substr(2);
    }

    if (args.candidate && args.candidate.length) {
      // Augment the native candidate with the parsed fields.
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = sdp__WEBPACK_IMPORTED_MODULE_0___default().parseCandidate(args.candidate);
      const augmentedCandidate = Object.assign(nativeCandidate,
          parsedCandidate);

      // Add a serializer that does not serialize the extra attributes.
      augmentedCandidate.toJSON = function toJSON() {
        return {
          candidate: augmentedCandidate.candidate,
          sdpMid: augmentedCandidate.sdpMid,
          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
          usernameFragment: augmentedCandidate.usernameFragment,
        };
      };
      return augmentedCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

  // Hook up the augmented candidate in onicecandidate and
  // addEventListener('icecandidate', ...)
  _utils__WEBPACK_IMPORTED_MODULE_1__.wrapPeerConnectionEvent(window, 'icecandidate', e => {
    if (e.candidate) {
      Object.defineProperty(e, 'candidate', {
        value: new window.RTCIceCandidate(e.candidate),
        writable: 'false'
      });
    }
    return e;
  });
}

function shimMaxMessageSize(window, browserDetails) {
  if (!window.RTCPeerConnection) {
    return;
  }

  if (!('sctp' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
      get() {
        return typeof this._sctp === 'undefined' ? null : this._sctp;
      }
    });
  }

  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = sdp__WEBPACK_IMPORTED_MODULE_0___default().splitSections(description.sdp);
    sections.shift();
    return sections.some(mediaSection => {
      const mLine = sdp__WEBPACK_IMPORTED_MODULE_0___default().parseMLine(mediaSection);
      return mLine && mLine.kind === 'application'
          && mLine.protocol.indexOf('SCTP') !== -1;
    });
  };

  const getRemoteFirefoxVersion = function(description) {
    // TODO: Is there a better solution for detecting Firefox?
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    // Test for NaN (yes, this is ugly)
    return version !== version ? -1 : version;
  };

  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    // Every implementation we know can send at least 64 KiB.
    // Note: Although Chrome is technically able to send up to 256 KiB, the
    //       data does not reach the other peer reliably.
    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === 'firefox') {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          // FF < 57 will send in 16 KiB chunks using the deprecated PPID
          // fragmentation.
          canSendMaxMessageSize = 16384;
        } else {
          // However, other FF (and RAWRTC) can reassemble PPID-fragmented
          // messages. Thus, supporting ~2 GiB when sending.
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        // Currently, all FF >= 57 will reset the remote maximum message size
        // to the default value when a data channel is created at a later
        // stage. :(
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
        canSendMaxMessageSize =
          browserDetails.version === 57 ? 65535 : 65536;
      } else {
        // FF >= 60 supports sending ~2 GiB
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };

  const getMaxMessageSize = function(description, remoteIsFirefox) {
    // Note: 65536 bytes is the default value from the SDP spec. Also,
    //       every implementation we know supports receiving 65536 bytes.
    let maxMessageSize = 65536;

    // FF 57 has a slightly incorrect default remote max message size, so
    // we need to adjust it here to avoid a failure when sending.
    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
    if (browserDetails.browser === 'firefox'
         && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }

    const match = sdp__WEBPACK_IMPORTED_MODULE_0___default().matchPrefix(description.sdp,
      'a=max-message-size:');
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substr(19), 10);
    } else if (browserDetails.browser === 'firefox' &&
                remoteIsFirefox !== -1) {
      // If the maximum message size is not present in the remote SDP and
      // both local and remote are Firefox, the remote peer can receive
      // ~2 GiB.
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };

  const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
    function setRemoteDescription() {
      this._sctp = null;
      // Chrome decided to not expose .sctp in plan-b mode.
      // As usual, adapter.js has to do an 'ugly worakaround'
      // to cover up the mess.
      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
        const {sdpSemantics} = this.getConfiguration();
        if (sdpSemantics === 'plan-b') {
          Object.defineProperty(this, 'sctp', {
            get() {
              return typeof this._sctp === 'undefined' ? null : this._sctp;
            },
            enumerable: true,
            configurable: true,
          });
        }
      }

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        const isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        const canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        let maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        const sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get() {
            return maxMessageSize;
          }
        });
        this._sctp = sctp;
      }

      return origSetRemoteDescription.apply(this, arguments);
    };
}

function shimSendThrowTypeError(window) {
  if (!(window.RTCPeerConnection &&
      'createDataChannel' in window.RTCPeerConnection.prototype)) {
    return;
  }

  // Note: Although Firefox >= 57 has a native implementation, the maximum
  //       message size can be reset for all data channels at a later stage.
  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;
    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc.readyState === 'open' &&
          pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError('Message too large (can send a maximum of ' +
          pc.sctp.maxMessageSize + ' bytes)');
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  const origCreateDataChannel =
    window.RTCPeerConnection.prototype.createDataChannel;
  window.RTCPeerConnection.prototype.createDataChannel =
    function createDataChannel() {
      const dataChannel = origCreateDataChannel.apply(this, arguments);
      wrapDcSend(dataChannel, this);
      return dataChannel;
    };
  _utils__WEBPACK_IMPORTED_MODULE_1__.wrapPeerConnectionEvent(window, 'datachannel', e => {
    wrapDcSend(e.channel, e.target);
    return e;
  });
}


/* shims RTCConnectionState by pretending it is the same as iceConnectionState.
 * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
 * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
 * since DTLS failures would be hidden. See
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
 * for the Firefox tracking bug.
 */
function shimConnectionState(window) {
  if (!window.RTCPeerConnection ||
      'connectionState' in window.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  Object.defineProperty(proto, 'connectionState', {
    get() {
      return {
        completed: 'connected',
        checking: 'connecting'
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, 'onconnectionstatechange', {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener('connectionstatechange',
            this._onconnectionstatechange);
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener('connectionstatechange',
            this._onconnectionstatechange = cb);
      }
    },
    enumerable: true,
    configurable: true
  });

  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = e => {
          const pc = e.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event('connectionstatechange', e);
            pc.dispatchEvent(newEvent);
          }
          return e;
        };
        this.addEventListener('iceconnectionstatechange',
          this._connectionstatechangepoly);
      }
      return origMethod.apply(this, arguments);
    };
  });
}

function removeExtmapAllowMixed(window, browserDetails) {
  /* remove a=extmap-allow-mixed for webrtc.org < M71 */
  if (!window.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
  window.RTCPeerConnection.prototype.setRemoteDescription =
  function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
      const sdp = desc.sdp.split('\n').filter((line) => {
        return line.trim() !== 'a=extmap-allow-mixed';
      }).join('\n');
      // Safari enforces read-only-ness of RTCSessionDescription fields.
      if (window.RTCSessionDescription &&
          desc instanceof window.RTCSessionDescription) {
        arguments[0] = new window.RTCSessionDescription({
          type: desc.type,
          sdp,
        });
      } else {
        desc.sdp = sdp;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}

function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
  // Support for addIceCandidate(null or undefined)
  // as well as addIceCandidate({candidate: "", ...})
  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
  // Note: must be called before other polyfills which change the signature.
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeAddIceCandidate =
      window.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.addIceCandidate =
    function addIceCandidate() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      // Firefox 68+ emits and processes {candidate: "", ...}, ignore
      // in older versions.
      // Native support for ignoring exists for Chrome M77+.
      // Safari ignores as well, exact version unknown but works in the same
      // version that also ignores addIceCandidate(null).
      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)
           || (browserDetails.browser === 'firefox'
               && browserDetails.version < 68)
           || (browserDetails.browser === 'safari'))
          && arguments[0] && arguments[0].candidate === '') {
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
}

// Note: Make sure to call this ahead of APIs that modify
// setLocalDescription.length
function shimParameterlessSetLocalDescription(window, browserDetails) {
  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeSetLocalDescription =
      window.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window.RTCPeerConnection.prototype.setLocalDescription =
    function setLocalDescription() {
      let desc = arguments[0] || {};
      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {
        return nativeSetLocalDescription.apply(this, arguments);
      }
      // The remaining steps should technically happen when SLD comes off the
      // RTCPeerConnection's operations chain (not ahead of going on it), but
      // this is too difficult to shim. Instead, this shim only covers the
      // common case where the operations chain is empty. This is imperfect, but
      // should cover many cases. Rationale: Even if we can't reduce the glare
      // window to zero on imperfect implementations, there's value in tapping
      // into the perfect negotiation pattern that several browsers support.
      desc = {type: desc.type, sdp: desc.sdp};
      if (!desc.type) {
        switch (this.signalingState) {
          case 'stable':
          case 'have-local-offer':
          case 'have-remote-pranswer':
            desc.type = 'offer';
            break;
          default:
            desc.type = 'answer';
            break;
        }
      }
      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {
        return nativeSetLocalDescription.apply(this, [desc]);
      }
      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;
      return func.apply(this)
        .then(d => nativeSetLocalDescription.apply(this, [d]));
    };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimAddTransceiver": () => (/* binding */ shimAddTransceiver),
/* harmony export */   "shimCreateAnswer": () => (/* binding */ shimCreateAnswer),
/* harmony export */   "shimCreateOffer": () => (/* binding */ shimCreateOffer),
/* harmony export */   "shimGetDisplayMedia": () => (/* reexport safe */ _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__.shimGetDisplayMedia),
/* harmony export */   "shimGetParameters": () => (/* binding */ shimGetParameters),
/* harmony export */   "shimGetUserMedia": () => (/* reexport safe */ _getusermedia__WEBPACK_IMPORTED_MODULE_1__.shimGetUserMedia),
/* harmony export */   "shimOnTrack": () => (/* binding */ shimOnTrack),
/* harmony export */   "shimPeerConnection": () => (/* binding */ shimPeerConnection),
/* harmony export */   "shimRTCDataChannel": () => (/* binding */ shimRTCDataChannel),
/* harmony export */   "shimReceiverGetStats": () => (/* binding */ shimReceiverGetStats),
/* harmony export */   "shimRemoveStream": () => (/* binding */ shimRemoveStream),
/* harmony export */   "shimSenderGetStats": () => (/* binding */ shimSenderGetStats)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/* harmony import */ var _getusermedia__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js");
/* harmony import */ var _getdisplaymedia__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getdisplaymedia */ "./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */






function shimOnTrack(window) {
  if (typeof window === 'object' && window.RTCTrackEvent &&
      ('receiver' in window.RTCTrackEvent.prototype) &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimPeerConnection(window, browserDetails) {
  if (typeof window !== 'object' ||
      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {
    return; // probably media.peerconnection.enabled=false in about:config
  }
  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
    // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
  }

  if (browserDetails.version < 53) {
    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          const nativeMethod = window.RTCPeerConnection.prototype[method];
          const methodObj = {[method]() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          }};
          window.RTCPeerConnection.prototype[method] = methodObj[method];
        });
  }

  const modernStatsTypes = {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  };

  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;
  window.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null])
      .then(stats => {
        if (browserDetails.version < 53 && !onSucc) {
          // Shim only promise getStats with spec-hyphens in type names
          // Leave callback version alone; misc old uses of forEach before Map
          try {
            stats.forEach(stat => {
              stat.type = modernStatsTypes[stat.type] || stat.type;
            });
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e;
            }
            // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
            stats.forEach((stat, i) => {
              stats.set(i, Object.assign({}, stat, {
                type: modernStatsTypes[stat.type] || stat.type
              }));
            });
          }
        }
        return stats;
      })
      .then(onSucc, onErr);
  };
}

function shimSenderGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach(sender => sender._pc = this);
      return senders;
    };
  }

  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) :
        Promise.resolve(new Map());
  };
}

function shimReceiverGetStats(window) {
  if (!(typeof window === 'object' && window.RTCPeerConnection &&
      window.RTCRtpSender)) {
    return;
  }
  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach(receiver => receiver._pc = this);
      return receivers;
    };
  }
  _utils__WEBPACK_IMPORTED_MODULE_0__.wrapPeerConnectionEvent(window, 'track', e => {
    e.receiver._pc = e.srcElement;
    return e;
  });
  window.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}

function shimRemoveStream(window) {
  if (!window.RTCPeerConnection ||
      'removeStream' in window.RTCPeerConnection.prototype) {
    return;
  }
  window.RTCPeerConnection.prototype.removeStream =
    function removeStream(stream) {
      _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('removeStream', 'removeTrack');
      this.getSenders().forEach(sender => {
        if (sender.track && stream.getTracks().includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
}

function shimRTCDataChannel(window) {
  // rename DataChannel to RTCDataChannel (native fix in FF60):
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
  if (window.DataChannel && !window.RTCDataChannel) {
    window.RTCDataChannel = window.DataChannel;
  }
}

function shimAddTransceiver(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window.RTCPeerConnection.prototype.addTransceiver =
      function addTransceiver() {
        this.setParametersPromises = [];
        const initParameters = arguments[1];
        const shouldPerformCheck = initParameters &&
                                  'sendEncodings' in initParameters;
        if (shouldPerformCheck) {
          // If sendEncodings params are provided, validate grammar
          initParameters.sendEncodings.forEach((encodingParam) => {
            if ('rid' in encodingParam) {
              const ridRegex = /^[a-z0-9]{0,16}$/i;
              if (!ridRegex.test(encodingParam.rid)) {
                throw new TypeError('Invalid RID value provided.');
              }
            }
            if ('scaleResolutionDownBy' in encodingParam) {
              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                throw new RangeError('scale_resolution_down_by must be >= 1.0');
              }
            }
            if ('maxFramerate' in encodingParam) {
              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                throw new RangeError('max_framerate must be >= 0.0');
              }
            }
          });
        }
        const transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
          // Check if the init options were applied. If not we do this in an
          // asynchronous way and save the promise reference in a global object.
          // This is an ugly hack, but at the same time is way more robust than
          // checking the sender parameters before and after the createOffer
          // Also note that after the createoffer we are not 100% sure that
          // the params were asynchronously applied so we might miss the
          // opportunity to recreate offer.
          const {sender} = transceiver;
          const params = sender.getParameters();
          if (!('encodings' in params) ||
              // Avoid being fooled by patched getParameters() below.
              (params.encodings.length === 1 &&
               Object.keys(params.encodings[0]).length === 0)) {
            params.encodings = initParameters.sendEncodings;
            sender.sendEncodings = initParameters.sendEncodings;
            this.setParametersPromises.push(sender.setParameters(params)
              .then(() => {
                delete sender.sendEncodings;
              }).catch(() => {
                delete sender.sendEncodings;
              })
            );
          }
        }
        return transceiver;
      };
  }
}

function shimGetParameters(window) {
  if (!(typeof window === 'object' && window.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window.RTCRtpSender.prototype.getParameters =
      function getParameters() {
        const params = origGetParameters.apply(this, arguments);
        if (!('encodings' in params)) {
          params.encodings = [].concat(this.sendEncodings || [{}]);
        }
        return params;
      };
  }
}

function shimCreateOffer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateOffer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}

function shimCreateAnswer(window) {
  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
  // Firefox ignores the init sendEncodings options passed to addTransceiver
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
  if (!(typeof window === 'object' && window.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises)
      .then(() => {
        return origCreateAnswer.apply(this, arguments);
      })
      .finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js":
/*!***********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetDisplayMedia": () => (/* binding */ shimGetDisplayMedia)
/* harmony export */ });
/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */


function shimGetDisplayMedia(window, preferredMediaSource) {
  if (window.navigator.mediaDevices &&
    'getDisplayMedia' in window.navigator.mediaDevices) {
    return;
  }
  if (!(window.navigator.mediaDevices)) {
    return;
  }
  window.navigator.mediaDevices.getDisplayMedia =
    function getDisplayMedia(constraints) {
      if (!(constraints && constraints.video)) {
        const err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimGetUserMedia": () => (/* binding */ shimGetUserMedia)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
/* eslint-env node */




function shimGetUserMedia(window, browserDetails) {
  const navigator = window && window.navigator;
  const MediaStreamTrack = window && window.MediaStreamTrack;

  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };

  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints =
        MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
}


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/safari/safari_shim.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shimAudioContext": () => (/* binding */ shimAudioContext),
/* harmony export */   "shimCallbacksAPI": () => (/* binding */ shimCallbacksAPI),
/* harmony export */   "shimConstraints": () => (/* binding */ shimConstraints),
/* harmony export */   "shimCreateOfferLegacy": () => (/* binding */ shimCreateOfferLegacy),
/* harmony export */   "shimGetUserMedia": () => (/* binding */ shimGetUserMedia),
/* harmony export */   "shimLocalStreamsAPI": () => (/* binding */ shimLocalStreamsAPI),
/* harmony export */   "shimRTCIceServerUrls": () => (/* binding */ shimRTCIceServerUrls),
/* harmony export */   "shimRemoteStreamsAPI": () => (/* binding */ shimRemoteStreamsAPI),
/* harmony export */   "shimTrackEventTransceiver": () => (/* binding */ shimTrackEventTransceiver)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */



function shimLocalStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getLocalStreams =
      function getLocalStreams() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
  }
  if (!('addStream' in window.RTCPeerConnection.prototype)) {
    const _addTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      // Try to emulate Chrome's behaviour of adding in audio-video order.
      // Safari orders by track id.
      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,
        stream));
      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,
        stream));
    };

    window.RTCPeerConnection.prototype.addTrack =
      function addTrack(track, ...streams) {
        if (streams) {
          streams.forEach((stream) => {
            if (!this._localStreams) {
              this._localStreams = [stream];
            } else if (!this._localStreams.includes(stream)) {
              this._localStreams.push(stream);
            }
          });
        }
        return _addTrack.apply(this, arguments);
      };
  }
  if (!('removeStream' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.removeStream =
      function removeStream(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        const index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        const tracks = stream.getTracks();
        this.getSenders().forEach(sender => {
          if (tracks.includes(sender.track)) {
            this.removeTrack(sender);
          }
        });
      };
  }
}

function shimRemoteStreamsAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
    window.RTCPeerConnection.prototype.getRemoteStreams =
      function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
  }
  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
      get() {
        return this._onaddstream;
      },
      set(f) {
        if (this._onaddstream) {
          this.removeEventListener('addstream', this._onaddstream);
          this.removeEventListener('track', this._onaddstreampoly);
        }
        this.addEventListener('addstream', this._onaddstream = f);
        this.addEventListener('track', this._onaddstreampoly = (e) => {
          e.streams.forEach(stream => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event('addstream');
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription =
      window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription =
      function setRemoteDescription() {
        const pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(stream => {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              const event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
  }
}

function shimCallbacksAPI(window) {
  if (typeof window !== 'object' || !window.RTCPeerConnection) {
    return;
  }
  const prototype = window.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;

  prototype.createOffer =
    function createOffer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  prototype.createAnswer =
    function createAnswer(successCallback, failureCallback) {
      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      const promise = origCreateAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;

  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;

  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}

function shimGetUserMedia(window) {
  const navigator = window && window.navigator;

  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // shim not needed in Safari 12.1
    const mediaDevices = navigator.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }

  if (!navigator.getUserMedia && navigator.mediaDevices &&
    navigator.mediaDevices.getUserMedia) {
    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator.mediaDevices.getUserMedia(constraints)
      .then(cb, errcb);
    }.bind(navigator);
  }
}

function shimConstraints(constraints) {
  if (constraints && constraints.video !== undefined) {
    return Object.assign({},
      constraints,
      {video: _utils__WEBPACK_IMPORTED_MODULE_0__.compactObject(constraints.video)}
    );
  }

  return constraints;
}

function shimRTCIceServerUrls(window) {
  if (!window.RTCPeerConnection) {
    return;
  }
  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
  const OrigPeerConnection = window.RTCPeerConnection;
  window.RTCPeerConnection =
    function RTCPeerConnection(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        const newIceServers = [];
        for (let i = 0; i < pcConfig.iceServers.length; i++) {
          let server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            _utils__WEBPACK_IMPORTED_MODULE_0__.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  // wrap static methods. Currently just generateCertificate.
  if ('generateCertificate' in OrigPeerConnection) {
    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}

function shimTrackEventTransceiver(window) {
  // Add event.transceiver member over deprecated event.receiver
  if (typeof window === 'object' && window.RTCTrackEvent &&
      'receiver' in window.RTCTrackEvent.prototype &&
      !('transceiver' in window.RTCTrackEvent.prototype)) {
    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
      get() {
        return {receiver: this.receiver};
      }
    });
  }
}

function shimCreateOfferLegacy(window) {
  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
  window.RTCPeerConnection.prototype.createOffer =
    function createOffer(offerOptions) {
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio =
            !!offerOptions.offerToReceiveAudio;
        }
        const audioTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'audio');
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          this.addTransceiver('audio', {direction: 'recvonly'});
        }

        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo =
            !!offerOptions.offerToReceiveVideo;
        }
        const videoTransceiver = this.getTransceivers().find(transceiver =>
          transceiver.receiver.track.kind === 'video');
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('sendonly');
            } else {
              videoTransceiver.direction = 'sendonly';
            }
          } else if (videoTransceiver.direction === 'recvonly') {
            if (videoTransceiver.setDirection) {
              videoTransceiver.setDirection('inactive');
            } else {
              videoTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          this.addTransceiver('video', {direction: 'recvonly'});
        }
      }
      return origCreateOffer.apply(this, arguments);
    };
}

function shimAudioContext(window) {
  if (typeof window !== 'object' || window.AudioContext) {
    return;
  }
  window.AudioContext = window.webkitAudioContext;
}



/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compactObject": () => (/* binding */ compactObject),
/* harmony export */   "deprecated": () => (/* binding */ deprecated),
/* harmony export */   "detectBrowser": () => (/* binding */ detectBrowser),
/* harmony export */   "disableLog": () => (/* binding */ disableLog),
/* harmony export */   "disableWarnings": () => (/* binding */ disableWarnings),
/* harmony export */   "extractVersion": () => (/* binding */ extractVersion),
/* harmony export */   "filterStats": () => (/* binding */ filterStats),
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "walkStats": () => (/* binding */ walkStats),
/* harmony export */   "wrapPeerConnectionEvent": () => (/* binding */ wrapPeerConnectionEvent)
/* harmony export */ });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


let logDisabled_ = true;
let deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  const proto = window.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e) => {
      const modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get() {
      return this['_on' + eventNameToWrap];
    },
    set(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

function disableLog(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  logDisabled_ = bool;
  return (bool) ? 'adapter.js logging disabled' :
      'adapter.js logging enabled';
}

/**
 * Disable or enable deprecation warnings
 * @param {!boolean} bool set to true to disable warnings.
 */
function disableWarnings(bool) {
  if (typeof bool !== 'boolean') {
    return new Error('Argument type: ' + typeof bool +
        '. Please use a boolean.');
  }
  deprecationWarnings_ = !bool;
  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
}

function log() {
  if (typeof window === 'object') {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== 'undefined' && typeof console.log === 'function') {
      console.log.apply(console, arguments);
    }
  }
}

/**
 * Shows a deprecation warning suggesting the modern and spec-compatible API.
 */
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
      ' instead.');
}

/**
 * Browser detector.
 *
 * @return {object} result containing browser and version
 *     properties.
 */
function detectBrowser(window) {
  // Returned result object.
  const result = {browser: null, version: null};

  // Fail early if it's not a browser
  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  const {navigator} = window;

  if (navigator.mozGetUserMedia) { // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent,
        /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia ||
      (window.isSecureContext === false && window.webkitRTCPeerConnection &&
       !window.RTCIceGatherer)) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    // Chrome 74 removed webkitGetUserMedia on http as well so we need the
    // more complicated fallback to webkitRTCPeerConnection.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent,
        /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (window.RTCPeerConnection &&
      navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent,
        /AppleWebKit\/(\d+)\./, 1);
    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&
        'currentDirection' in window.RTCRtpTransceiver.prototype;
  } else { // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */
function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
}

/**
 * Remove all empty objects and undefined values
 * from a nested object -- an enhanced and vanilla version
 * of Lodash's `compact`.
 */
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }

  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === undefined || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, {[key]: value});
  }, {});
}

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(name => {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(id => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  const filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach(value => {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(trackStat => {
    result.forEach(stats => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}



/***/ }),

/***/ "./src/Custom/config.js":
/*!******************************!*\
  !*** ./src/Custom/config.js ***!
  \******************************/
/***/ ((module) => {



module.exports = {
  systemName: 'MetaEditor',
  websiteUrl: 'https://metaeditor.io',
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ActionOverlay": () => (/* reexport safe */ _Overlay_ActionOverlay__WEBPACK_IMPORTED_MODULE_4__.ActionOverlay),
/* harmony export */   "AfkLogic": () => (/* reexport safe */ _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_6__.AfkLogic),
/* harmony export */   "AfkOverlay": () => (/* reexport safe */ _Overlay_AfkOverlay__WEBPACK_IMPORTED_MODULE_5__.AfkOverlay),
/* harmony export */   "AggregatedStats": () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_9__.AggregatedStats),
/* harmony export */   "Config": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.Config),
/* harmony export */   "ControlSchemeType": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.ControlSchemeType),
/* harmony export */   "DelegateBase": () => (/* reexport safe */ _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_3__.DelegateBase),
/* harmony export */   "EmitClass": () => (/* reexport safe */ _Custom___WEBPACK_IMPORTED_MODULE_12__.EmitClass),
/* harmony export */   "Encoder": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_8__.Encoder),
/* harmony export */   "EventsClass": () => (/* reexport safe */ _Custom___WEBPACK_IMPORTED_MODULE_12__.EventsClass),
/* harmony export */   "InitialSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_8__.InitialSettings),
/* harmony export */   "InstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_10__.InstanceState),
/* harmony export */   "LatencyTestResults": () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_7__.LatencyTestResults),
/* harmony export */   "Logger": () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_11__.Logger),
/* harmony export */   "MessageAuthResponse": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_10__.MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_10__.MessageAuthResponseOutcomeType),
/* harmony export */   "MessageInstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_10__.MessageInstanceState),
/* harmony export */   "WebRTC": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_8__.WebRTC),
/* harmony export */   "version": () => (/* binding */ version),
/* harmony export */   "webRtcPlayerController": () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__.webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ "./node_modules/webrtc-adapter/src/js/adapter_core.js");
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Delegate/DelegateBase */ "./src/Delegate/DelegateBase.ts");
/* harmony import */ var _Overlay_ActionOverlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Overlay/ActionOverlay */ "./src/Overlay/ActionOverlay.ts");
/* harmony import */ var _Overlay_AfkOverlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Overlay/AfkOverlay */ "./src/Overlay/AfkOverlay.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Custom___WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Custom/ */ "./src/Custom/index.ts");














var version = "1.1.0";
// ::START


// ::END

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,