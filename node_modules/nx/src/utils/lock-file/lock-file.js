"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pruneLockFile = exports.writeLockFile = exports.parseLockFile = void 0;
const fs_extra_1 = require("fs-extra");
const package_manager_1 = require("../package-manager");
const yarn_1 = require("./yarn");
const npm_1 = require("./npm");
const pnpm_1 = require("./pnpm");
/**
 * Parses lock file and maps dependencies and metadata to {@link LockFileData}
 */
function parseLockFile(packageManager = (0, package_manager_1.detectPackageManager)()) {
    if (packageManager === 'yarn') {
        const file = (0, fs_extra_1.readFileSync)('yarn.lock', 'utf8');
        return (0, yarn_1.parseYarnLockFile)(file);
    }
    if (packageManager === 'pnpm') {
        const file = (0, fs_extra_1.readFileSync)('pnpm-lock.yaml', 'utf8');
        return (0, pnpm_1.parsePnpmLockFile)(file);
    }
    if (packageManager === 'npm') {
        const file = (0, fs_extra_1.readFileSync)('package-lock.json', 'utf8');
        return (0, npm_1.parseNpmLockFile)(file);
    }
    throw Error(`Unknown package manager: ${packageManager}`);
}
exports.parseLockFile = parseLockFile;
/**
 * Stringifies {@link LockFileData} content and writes it to lock file
 */
function writeLockFile(lockFile, packageManager = (0, package_manager_1.detectPackageManager)()) {
    if (packageManager === 'yarn') {
        const content = (0, yarn_1.stringifyYarnLockFile)(lockFile);
        (0, fs_extra_1.writeFileSync)('yarn.lock', content);
        return;
    }
    if (packageManager === 'pnpm') {
        const content = (0, pnpm_1.stringifyPnpmLockFile)(lockFile);
        (0, fs_extra_1.writeFileSync)('pnpm-lock.yaml', content);
        return;
    }
    if (packageManager === 'npm') {
        const content = (0, npm_1.stringifyNpmLockFile)(lockFile);
        (0, fs_extra_1.writeFileSync)('package-lock.json', content);
        return;
    }
    throw Error(`Unknown package manager: ${packageManager}`);
}
exports.writeLockFile = writeLockFile;
/**
 * Prunes {@link LockFileData} based on minimal necessary set of packages
 * Returns new {@link LockFileData}
 */
function pruneLockFile(lockFile, packages, packageManager = (0, package_manager_1.detectPackageManager)()) {
    if (packageManager === 'yarn') {
        return (0, yarn_1.pruneYarnLockFile)(lockFile, packages);
    }
    if (packageManager === 'pnpm') {
        return (0, pnpm_1.prunePnpmLockFile)(lockFile, packages);
    }
    if (packageManager === 'npm') {
        return (0, npm_1.pruneNpmLockFile)(lockFile, packages);
    }
    throw Error(`Unknown package manager: ${packageManager}`);
}
exports.pruneLockFile = pruneLockFile;
//# sourceMappingURL=lock-file.js.map