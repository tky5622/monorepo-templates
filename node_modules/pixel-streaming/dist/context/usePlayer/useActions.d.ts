export declare const useActions: () => {
    state: any;
    cls: {
        initReady: boolean;
        readonly info: {
            loading: {
                readonly active: any;
                readonly percent: any;
                readonly leftSeconds: any;
                readonly time: string;
                stop(): void;
                start(seconds: number): void;
            };
        };
        readonly methods: {
            commands: {
                clear: () => any;
            };
            callbacks: {
                clear: () => any;
            };
        };
        /**
         * Allow command if RTCPlayer exist and connection is active
         */
        _allowCommand(command: string): boolean;
        /**
         * Emit system command
         */
        emitCommandSystem(command: string, value: any): void;
        /**
         * Check callbacks_list and mark command item
         * as confirmed if callback found by verification_id
         */
        emitAsyncCommand(command: string, value: any): Promise<any>;
        /**
         * Emit command via portal commands (by uuid)
         */
        emitUuidAsync(uuid: string): Promise<any>;
        /**
         * One time config initialization
         */
        initConfig(config: any, psConfig: any, ueSettings: any): void;
        initPlayer(streamingUrl: string): void;
        streamingConnect(): void;
        streamingStop(): void;
        switchStart(): void;
        clientCb(cb: Function): void;
        changeVolume(volume?: number): void;
    };
    computed: {
        readonly streaming: any;
        readonly mouse: {
            moving: any;
        };
    };
    dispatch: any;
};
