import * as client from 'unreal-pixel-streaming';
export declare const Logger: typeof client.Logger, EventsClass: {
    lastMouseButtonEvent: string;
    _event(key: string): {
        key: string;
        dispatch: (detail: any) => void;
    };
    readonly callbacks: {
        key: string;
        dispatch: (detail: any) => void;
    };
    readonly commands: {
        key: string;
        dispatch: (detail: any) => void;
    };
    readonly mouseAction: {
        key: string;
        dispatch: (detail: any) => void;
    };
    readonly ueInitialSettings: {
        key: string;
        dispatch: (detail: any) => void;
    };
    readonly mouse: {
        move: (offsetX: any, offsetY: any, movementX: any, movementY: any) => void;
        down: (button: any, offsetX: any, offsetY: any) => void;
        up: (button: any, offsetX: any, offsetY: any) => void;
        wheel: (wheelDelta: number, offsetX: any, offsetY: any) => void;
    };
    readonly webrtcStatus: {
        key: string;
        dispatch: (detail: any) => void;
    };
    setWebrtcStatus(status: string, errorCode?: any): void;
    readonly webrtcStatusList: {
        initializing: string;
        initialized_no_autoplay: string;
        initialized: string;
        active: string;
        activation: string;
        disconnected: string;
        stopped: string;
        error: string;
    };
};
declare global {
    interface Window {
        RTCPlayer: any;
    }
}
interface ClientBase {
    streamingUrl: string;
}
export interface psConfigSchema {
    [key: string]: any;
    enableVerboseLogging: boolean;
    enableSpsAutoplay: boolean;
    startVideoMuted: boolean;
    controlScheme: client.ControlSchemeType;
    suppressBrowserKeys: boolean;
    fakeMouseWithTouches: boolean;
}
export declare class ClientClass implements ClientBase {
    streamingUrl: string;
    events: object;
    psConfig: psConfigSchema;
    constructor(streamingUrl: string, psConfig: psConfigSchema);
    init(): client.webRtcPlayerController;
}
export declare const ClientAccess: {
    readonly client: any;
    clientCb(cb: Function): void;
    connect(): void;
    close(): void;
    emitCommand(command: string, value: any): void;
    emitCommandSystem(command: string, payload: any): void;
    emitConsole(payload: string): void;
    restartStreamAutomaticity(): void;
};
export {};
