import * as client from 'unreal-pixel-streaming';
/**
 * Class for the base overlay structure
 */
export declare class OverlayBase implements client.IOverlay {
    protected rootElement: HTMLDivElement;
    protected rootDiv: HTMLDivElement;
    /**
     * Construct an overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     */
    protected constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement);
    /**
     * Show the overlay
     */
    show(): void;
    /**
     * Hide the overlay
     */
    hide(): void;
}
/**
 * Class for the base action overlay structure
 */
export declare class ActionOverlayBase extends client.ActionOverlay {
    protected rootElement: HTMLDivElement;
    protected rootDiv: HTMLDivElement;
    private textElement;
    /**
     * Construct an action overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     * @param textElement an element that contains text for the action overlay
     */
    constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement);
    /**
     * Show the overlay
     */
    show(): void;
    /**
     * Hide the overlay
     */
    hide(): void;
}
/**
 * Class for the afk overlay base
 */
export declare class AfkOverlayBase extends client.AfkOverlay {
    protected rootElement: HTMLDivElement;
    protected rootDiv: HTMLDivElement;
    private textElement;
    private countDownSpanElementId;
    /**
     * Construct an Afk overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     * @param textElement an element that contains text for the action overlay
     * @param countDownSpanElementId the id of the span that holds the countdown element
     */
    constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement, countDownSpanElementId: string);
    /**
     * Show the overlay
     */
    show(): void;
    /**
     * Hide the overlay
     */
    hide(): void;
    /**
     * Update the count down spans number for the overlay
     * @param countdown the count down number to be inserted into the span for updating
     */
    update(countdown: number): void;
}
/**
 * Class for the text overlay base
 */
export declare class TextOverlayBase extends OverlayBase implements client.ITextOverlay {
    private textElement;
    /**
     * Construct a text overlay
     * @param rootDiv the root element this overlay will be inserted into
     * @param rootElement the root element that is the overlay
     * @param textElement an element that contains text for the action overlay
     */
    constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement);
    /**
     * Update the text overlays inner text
     * @param text the update text to be inserted into the overlay
     */
    update(text: string): void;
}
export declare class NativeDOMDelegate extends client.DelegateBase {
    config: client.Config;
    latencyStartTime: number;
    videoStartTime: number;
    videoEncoderAvgQP: number;
    iWebRtcController: client.IWebRtcPlayerController;
    showStats: boolean;
    logging: boolean;
    statusLight: HTMLDivElement;
    forceTurnToggle: HTMLInputElement;
    qualityControlOwnershipCheckBox: HTMLInputElement;
    toggleMatchViewPortRes: HTMLInputElement;
    controlSchemeToggle: HTMLInputElement;
    controlSchemeToggleTitle: HTMLDivElement;
    uiDescriptorText: HTMLInputElement;
    encoderMinQpText: HTMLInputElement;
    encoderMaxQpText: HTMLInputElement;
    webRtcFpsText: HTMLInputElement;
    webRtcMinBitrateText: HTMLInputElement;
    webRtcMaxBitrateText: HTMLInputElement;
    sendStatsToServer: HTMLInputElement;
    preStreamContainer: HTMLDivElement;
    viewSettingsHeader: HTMLDivElement;
    commandsHeader: HTMLDivElement;
    streamingSettingsHeader: HTMLDivElement;
    statsHeader: HTMLDivElement;
    latencyHeader: HTMLDivElement;
    viewSettingsContainer: HTMLDivElement;
    commandsContainer: HTMLDivElement;
    streamingSettingsContainer: HTMLDivElement;
    statsContainer: HTMLDivElement;
    latencyContainer: HTMLDivElement;
    constructor(config: client.Config);
    /**
     * Builds the connect overlay
     */
    buildConnectOverlay(): void;
    /**
     * Builds the play overlay
     */
    buildPlayOverlay(): void;
    /**
     * Builds the Afk overlay
     */
    buildAfkOverlay(): void;
    /**
     * Builds the info overlay
     */
    buildInfoOverlay(): void;
    /**
     * Builds the error overlay
     */
    buildErrorOverlay(): void;
    /**
    * Set up functionality to happen when an instance state change occurs and updates the info overlay with the response
    * @param instanceState - the message instance state
    */
    onInstanceStateChange(instanceState: client.MessageInstanceState): void;
    /**
     * Set up functionality to happen when receiving an auth response and updates an info overlay with the response
     * @param authResponse - the auth response message type
     */
    onAuthenticationResponse(authResponse: client.MessageAuthResponse): void;
    /**
     * Set up button click functions and button functionality
     */
    ConfigureButtons(): void;
    /**
     * Set up toggle element for controlling hovering mouse or locked mouse
     * @param toggleElement the toggle html element to be set up
     */
    setUpControlSchemeTypeToggle(toggleElement: HTMLInputElement): void;
    /**
     * Set up url toggle buttons
     * @param toggleElement the toggle element being activated
     * @param urlParameterKey the url key that is being made use of
     */
    setUpToggleWithUrlParams(toggleElement: HTMLInputElement, urlParameterKey: string): void;
    /**
     * Disable shared session links for all players
     * @returns false
     */
    IsLinkSharingEnabled(): Promise<boolean>;
    /**
     * Handle when the Video has been Initialised
     */
    onVideoInitialised(): void;
    /**
     * Extended from the base functionality; displays the text overlay and resets the buttons overlay upon disconnect
     * @param event
     */
    onDisconnect(event: CloseEvent): void;
    /**
     * `Takes the InitialSettings and wired to frontend
     * @param settings - Settings sent from the UE Instance`
     */
    onInitialSettings(settings: client.InitialSettings): void;
    /**
    * Used to handle the Video Stats from the Peer Connection Client
    * @param stats - Stats generate from the Peer Connection Client
    */
    onVideoStats(stats: client.AggregatedStats): void;
    /**
    * formats Bytes coming in for video stats
    * @param bytes number to convert
    * @param decimals number of decimal places
    */
    formatBytes(bytes: number, decimals: number): string;
    /**
    * Handles the result of the UE Latency Test
    * @param latencyTimings - Latency Test Timings sent from the UE Instance
    */
    onLatencyTestResult(latencyTimings: client.LatencyTestResults): void;
    /**
        *
        * converts the Video Encoder QP to a colour light
        * @param QP - The video encoder QP number needed to find the average
        */
    onVideoEncoderAvgQP(QP: number): void;
    /**
     * Handles when the ownership flag is sent from the signaling server
     * @param hasQualityOwnership - flag if the user has quality ownership
     */
    onQualityControlOwnership(hasQualityOwnership: boolean): void;
    /**
     * used to set the speed of the status light
     *
     * @param speed - Set the speed of the blink if the status light higher the speed the faster the blink
     */
    BlinkVideoQualityStatus(speed: number): void;
    afkConnect(): void;
    sendEncoderSettings(payload: client.Encoder): void;
    sendWebRtcSettings(payload: client.WebRTC): void;
}
/**
 * The static check to allow verbose logging
 */
export declare class LoggingOptions {
    static verboseLogging: boolean;
}
/**
 * The static image for the play button
 */
export declare class Images {
    static playButton: string;
}
