"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addFiles = void 0;
const devkit_1 = require("@nrwl/devkit");
const ts = require("typescript");
const ast_utils_1 = require("../../../utils/ast-utils");
const component_test_1 = require("../../component-test/component-test");
const allowedFileExt = new RegExp(/\.[jt]sx?/g);
const isSpecFile = new RegExp(/(spec|test)\./g);
function addFiles(tree, projectConfig, options) {
    const cypressConfigPath = (0, devkit_1.joinPathFragments)(projectConfig.root, 'cypress.config.ts');
    if (tree.exists(cypressConfigPath)) {
        tree.delete(cypressConfigPath);
    }
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '..', 'files'), projectConfig.root, {
        tpl: '',
    });
    if (options.generateTests) {
        (0, devkit_1.visitNotIgnoredFiles)(tree, projectConfig.sourceRoot, (filePath) => {
            if (isComponent(tree, filePath)) {
                (0, component_test_1.componentTestGenerator)(tree, {
                    project: options.project,
                    componentPath: filePath,
                });
            }
        });
    }
}
exports.addFiles = addFiles;
function isComponent(tree, filePath) {
    if (isSpecFile.test(filePath) || !allowedFileExt.test(filePath)) {
        return false;
    }
    const content = tree.read(filePath, 'utf-8');
    const sourceFile = ts.createSourceFile(filePath, content, ts.ScriptTarget.Latest, true);
    const cmpDeclaration = (0, ast_utils_1.getComponentNode)(sourceFile);
    return !!cmpDeclaration;
}
//# sourceMappingURL=add-files.js.map