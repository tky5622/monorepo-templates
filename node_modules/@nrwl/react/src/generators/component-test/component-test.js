"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentTestGenerator = void 0;
const cypress_version_1 = require("@nrwl/cypress/src/utils/cypress-version");
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const ts = require("typescript");
const ast_utils_1 = require("../../utils/ast-utils");
const component_props_1 = require("../../utils/component-props");
function componentTestGenerator(tree, options) {
    (0, cypress_version_1.assertMinimumCypressVersion)(10);
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const normalizedPath = options.componentPath.startsWith(projectConfig.sourceRoot)
        ? (0, path_1.relative)(projectConfig.sourceRoot, options.componentPath)
        : options.componentPath;
    const componentPath = (0, devkit_1.joinPathFragments)(projectConfig.sourceRoot, normalizedPath);
    if (tree.exists(componentPath)) {
        generateSpecsForComponents(tree, componentPath);
    }
}
exports.componentTestGenerator = componentTestGenerator;
function generateSpecsForComponents(tree, filePath) {
    const sourceFile = ts.createSourceFile(filePath, tree.read(filePath, 'utf-8'), ts.ScriptTarget.Latest, true);
    const cmpNodes = (0, ast_utils_1.findExportDeclarationsForJsx)(sourceFile);
    const componentDir = (0, path_1.dirname)(filePath);
    const ext = (0, path_1.extname)(filePath);
    const fileName = (0, path_1.basename)(filePath, ext);
    if (tree.exists((0, devkit_1.joinPathFragments)(componentDir, `${fileName}.cy${ext}`))) {
        return;
    }
    const defaultExport = (0, ast_utils_1.getComponentNode)(sourceFile);
    if (cmpNodes === null || cmpNodes === void 0 ? void 0 : cmpNodes.length) {
        const components = cmpNodes.map((cmp) => {
            const defaults = (0, component_props_1.getDefaultsForComponent)(sourceFile, cmp);
            const isDefaultExport = defaultExport
                ? defaultExport.name.text === cmp.name.text
                : false;
            return {
                isDefaultExport,
                props: [...defaults.props, ...defaults.argTypes],
                name: cmp.name.text,
                typeName: defaults.propsTypeName,
            };
        });
        const namedImports = components
            .reduce((imports, cmp) => {
            if (cmp.typeName) {
                imports.push(cmp.typeName);
            }
            if (cmp.isDefaultExport) {
                return imports;
            }
            imports.push(cmp.name);
            return imports;
        }, [])
            .join(', ');
        const namedImportStatement = namedImports.length > 0 ? `, { ${namedImports} }` : '';
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, 'files'), componentDir, {
            fileName,
            components,
            importStatement: defaultExport
                ? `import ${defaultExport.name.text}${namedImportStatement} from './${fileName}'`
                : `import { ${namedImports} } from './${fileName}'`,
            ext,
        });
    }
}
exports.default = componentTestGenerator;
//# sourceMappingURL=component-test.js.map