"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressInitSchematic = exports.cypressInitGenerator = void 0;
const devkit_1 = require("@nrwl/devkit");
const versions_1 = require("../../utils/versions");
function setupE2ETargetDefaults(tree) {
    var _a, _b, _c, _d;
    var _e, _f;
    const workspaceConfiguration = (0, devkit_1.readWorkspaceConfiguration)(tree);
    if (!workspaceConfiguration.namedInputs) {
        return;
    }
    // E2e targets depend on all their project's sources + production sources of dependencies
    (_a = workspaceConfiguration.targetDefaults) !== null && _a !== void 0 ? _a : (workspaceConfiguration.targetDefaults = {});
    const productionFileSet = !!((_b = workspaceConfiguration.namedInputs) === null || _b === void 0 ? void 0 : _b.production);
    (_c = (_e = workspaceConfiguration.targetDefaults).e2e) !== null && _c !== void 0 ? _c : (_e.e2e = {});
    (_d = (_f = workspaceConfiguration.targetDefaults.e2e).inputs) !== null && _d !== void 0 ? _d : (_f.inputs = [
        'default',
        productionFileSet ? '^production' : '^default',
    ]);
    (0, devkit_1.updateWorkspaceConfiguration)(tree, workspaceConfiguration);
}
function updateDependencies(tree) {
    (0, devkit_1.removeDependenciesFromPackageJson)(tree, ['@nrwl/cypress'], []);
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
        ['@nrwl/cypress']: versions_1.nxVersion,
        cypress: versions_1.cypressVersion,
        '@types/node': versions_1.typesNodeVersion,
    });
}
function cypressInitGenerator(tree, options) {
    setupE2ETargetDefaults(tree);
    return !options.skipPackageJson ? updateDependencies(tree) : () => { };
}
exports.cypressInitGenerator = cypressInitGenerator;
exports.default = cypressInitGenerator;
exports.cypressInitSchematic = (0, devkit_1.convertNxGenerator)(cypressInitGenerator);
//# sourceMappingURL=init.js.map