"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createExecutorContext = exports.getProjectConfigByPath = exports.nxE2EPreset = exports.nxBaseCypressPreset = void 0;
const devkit_1 = require("@nrwl/devkit");
const runtime_lint_utils_1 = require("@nrwl/workspace/src/utils/runtime-lint-utils");
const project_graph_1 = require("nx/src/project-graph/project-graph");
const path_1 = require("path");
const fs_1 = require("fs");
function nxBaseCypressPreset(pathToConfig) {
    // prevent from placing path outside the root of the workspace
    // if they pass in a file or directory
    const normalizedPath = (0, fs_1.lstatSync)(pathToConfig).isDirectory()
        ? pathToConfig
        : (0, path_1.dirname)(pathToConfig);
    const projectPath = (0, path_1.relative)(devkit_1.workspaceRoot, normalizedPath);
    const offset = (0, path_1.relative)(normalizedPath, devkit_1.workspaceRoot);
    const videosFolder = (0, path_1.join)(offset, 'dist', 'cypress', projectPath, 'videos');
    const screenshotsFolder = (0, path_1.join)(offset, 'dist', 'cypress', projectPath, 'screenshots');
    return {
        videosFolder,
        screenshotsFolder,
        video: true,
        chromeWebSecurity: false,
    };
}
exports.nxBaseCypressPreset = nxBaseCypressPreset;
/**
 * nx E2E Preset for Cypress
 * @description
 * this preset contains the base configuration
 * for your e2e tests that nx recommends.
 * you can easily extend this within your cypress config via spreading the preset
 * @example
 * export default defineConfig({
 *   e2e: {
 *     ...nxE2EPreset(__dirname)
 *     // add your own config here
 *   }
 * })
 *
 * @param pathToConfig will be used to construct the output paths for videos and screenshots
 */
function nxE2EPreset(pathToConfig) {
    return Object.assign(Object.assign({}, nxBaseCypressPreset(pathToConfig)), { fileServerFolder: '.', supportFile: 'src/support/e2e.ts', specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}', fixturesFolder: 'src/fixtures' });
}
exports.nxE2EPreset = nxE2EPreset;
function getProjectConfigByPath(graph, configPath) {
    var _a, _b, _c;
    var _d;
    const configFileFromWorkspaceRoot = (0, path_1.relative)(devkit_1.workspaceRoot, configPath);
    const normalizedPathFromWorkspaceRoot = (0, devkit_1.normalizePath)((0, fs_1.lstatSync)(configPath).isFile()
        ? configFileFromWorkspaceRoot.replace((0, path_1.extname)(configPath), '')
        : configFileFromWorkspaceRoot);
    const mappedGraph = (0, runtime_lint_utils_1.mapProjectGraphFiles)(graph);
    const componentTestingProjectName = mappedGraph.allFiles[normalizedPathFromWorkspaceRoot];
    if (!componentTestingProjectName ||
        !((_a = graph.nodes[componentTestingProjectName]) === null || _a === void 0 ? void 0 : _a.data)) {
        throw new Error((0, devkit_1.stripIndents) `Unable to find the project configuration that includes ${normalizedPathFromWorkspaceRoot}. 
      Found project name? ${componentTestingProjectName}. 
      Graph has data? ${!!((_b = graph.nodes[componentTestingProjectName]) === null || _b === void 0 ? void 0 : _b.data)}`);
    }
    // make sure name is set since it can be undefined
    (_c = (_d = graph.nodes[componentTestingProjectName].data).name) !== null && _c !== void 0 ? _c : (_d.name = componentTestingProjectName);
    return graph.nodes[componentTestingProjectName].data;
}
exports.getProjectConfigByPath = getProjectConfigByPath;
function createExecutorContext(graph, targets, projectName, targetName, configurationName) {
    const projectConfigs = (0, project_graph_1.readProjectsConfigurationFromProjectGraph)(graph);
    return {
        cwd: process.cwd(),
        projectGraph: graph,
        target: targets[targetName],
        targetName,
        configurationName,
        root: devkit_1.workspaceRoot,
        isVerbose: false,
        projectName,
        workspace: Object.assign(Object.assign({}, (0, devkit_1.readNxJson)()), projectConfigs),
    };
}
exports.createExecutorContext = createExecutorContext;
//# sourceMappingURL=cypress-preset.js.map