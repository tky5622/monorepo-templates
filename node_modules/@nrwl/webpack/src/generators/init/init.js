"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpackInitSchematic = exports.webpackInitGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const versions_1 = require("@nrwl/js/src/utils/versions");
const versions_2 = require("../../utils/versions");
function webpackInitGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let task;
        if (schema.compiler === 'babel') {
            initRootBabelConfig(tree);
        }
        if (schema.compiler === 'swc') {
            task = (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
                '@swc/helpers': versions_2.swcHelpersVersion,
                '@swc/core': versions_1.swcCoreVersion,
                'swc-loader': versions_2.swcLoaderVersion,
            });
        }
        if (schema.compiler === 'tsc') {
            task = (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { tslib: versions_2.tsLibVersion });
        }
        if (!schema.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return task;
    });
}
exports.webpackInitGenerator = webpackInitGenerator;
function initRootBabelConfig(tree) {
    var _a;
    if (tree.exists('/babel.config.json') || tree.exists('/babel.config.js')) {
        return;
    }
    (0, devkit_1.writeJson)(tree, '/babel.config.json', {
        babelrcRoots: ['*'], // Make sure .babelrc files other than root can be loaded in a monorepo
    });
    const workspaceConfiguration = (0, devkit_1.readWorkspaceConfiguration)(tree);
    if ((_a = workspaceConfiguration.namedInputs) === null || _a === void 0 ? void 0 : _a.sharedGlobals) {
        workspaceConfiguration.namedInputs.sharedGlobals.push('{workspaceRoot}/babel.config.json');
    }
    (0, devkit_1.updateWorkspaceConfiguration)(tree, workspaceConfiguration);
}
exports.default = webpackInitGenerator;
exports.webpackInitSchematic = (0, devkit_1.convertNxGenerator)(webpackInitGenerator);
//# sourceMappingURL=init.js.map