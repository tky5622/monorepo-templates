"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.devServerExecutor = void 0;
const tslib_1 = require("tslib");
const webpack = require("webpack");
const devkit_1 = require("@nrwl/devkit");
const rxjs_for_await_1 = require("@nrwl/devkit/src/utils/rxjs-for-await");
const operators_1 = require("rxjs/operators");
const WebpackDevServer = require("webpack-dev-server");
const get_dev_server_config_1 = require("./lib/get-dev-server-config");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utilities/buildable-libs-utils");
const run_webpack_1 = require("../../utils/run-webpack");
const custom_webpack_1 = require("../../utils/webpack/custom-webpack");
const normalize_options_1 = require("../webpack/lib/normalize-options");
const get_emitted_files_1 = require("../webpack/lib/get-emitted-files");
function devServerExecutor(serveOptions, context) {
    return tslib_1.__asyncGenerator(this, arguments, function* devServerExecutor_1() {
        const { root: projectRoot, sourceRoot } = context.workspace.projects[context.projectName];
        const buildOptions = (0, normalize_options_1.normalizeOptions)(getBuildOptions(serveOptions, context), context.root, sourceRoot);
        if (!buildOptions.index) {
            throw new Error(`Cannot run dev-server without "index" option. Check the build options for ${context.projectName}.`);
        }
        if (!buildOptions.buildLibsFromSource) {
            const { target, dependencies } = (0, buildable_libs_utils_1.calculateProjectDependencies)(context.projectGraph, context.root, context.projectName, 'build', // should be generalized
            context.configurationName);
            buildOptions.tsConfig = (0, buildable_libs_utils_1.createTmpTsConfig)(buildOptions.tsConfig, context.root, target.data.root, dependencies);
        }
        let webpackConfig = (0, get_dev_server_config_1.getDevServerConfig)(context, buildOptions, serveOptions);
        if (buildOptions.webpackConfig) {
            let customWebpack = (0, custom_webpack_1.resolveCustomWebpackConfig)(buildOptions.webpackConfig, buildOptions.tsConfig);
            if (typeof customWebpack.then === 'function') {
                customWebpack = yield tslib_1.__await(customWebpack);
            }
            webpackConfig = yield tslib_1.__await(customWebpack(webpackConfig, {
                buildOptions,
                configuration: serveOptions.buildTarget.split(':')[2],
            }));
        }
        return yield tslib_1.__await(yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues((0, rxjs_for_await_1.eachValueFrom)((0, run_webpack_1.runWebpackDevServer)(webpackConfig, webpack, WebpackDevServer).pipe((0, operators_1.tap)(({ stats }) => {
            console.info(stats.toString(webpackConfig.stats));
        }), (0, operators_1.map)(({ baseUrl, stats }) => {
            return {
                baseUrl,
                emittedFiles: (0, get_emitted_files_1.getEmittedFiles)(stats),
                success: !stats.hasErrors(),
            };
        })))))));
    });
}
exports.devServerExecutor = devServerExecutor;
function getBuildOptions(options, context) {
    const target = (0, devkit_1.parseTargetString)(options.buildTarget);
    const overrides = {
        watch: false,
    };
    if (options.maxWorkers) {
        overrides.maxWorkers = options.maxWorkers;
    }
    if (options.memoryLimit) {
        overrides.memoryLimit = options.memoryLimit;
    }
    if (options.baseHref) {
        overrides.baseHref = options.baseHref;
    }
    const buildOptions = (0, devkit_1.readTargetOptions)(target, context);
    return Object.assign(Object.assign({}, buildOptions), overrides);
}
exports.default = devServerExecutor;
//# sourceMappingURL=dev-server.impl.js.map