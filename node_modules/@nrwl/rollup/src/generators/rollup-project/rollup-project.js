"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rollupProjectSchematic = exports.rollupProjectGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const init_1 = require("../init/init");
function rollupProjectGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const task = yield (0, init_1.rollupInitGenerator)(tree, options);
        checkForTargetConflicts(tree, options);
        addBuildTarget(tree, options);
        yield (0, devkit_1.formatFiles)(tree);
        return task;
    });
}
exports.rollupProjectGenerator = rollupProjectGenerator;
function checkForTargetConflicts(tree, options) {
    var _a;
    if (options.skipValidation)
        return;
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    if ((_a = project.targets) === null || _a === void 0 ? void 0 : _a.build) {
        throw new Error(`Project "${options.project}" already has a build target. Pass --skipValidation to ignore this error.`);
    }
}
function addBuildTarget(tree, options) {
    var _a, _b, _c;
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const packageJsonPath = (0, devkit_1.joinPathFragments)(project.root, 'package.json');
    if (!tree.exists(packageJsonPath)) {
        const { npmScope } = (0, devkit_1.getWorkspaceLayout)(tree);
        const importPath = options.importPath || (0, devkit_1.getImportPath)(npmScope, options.project);
        (0, devkit_1.writeJson)(tree, packageJsonPath, {
            name: importPath,
            version: '0.0.1',
        });
    }
    const tsConfig = (_a = options.tsConfig) !== null && _a !== void 0 ? _a : (0, devkit_1.joinPathFragments)(project.root, 'tsconfig.lib.json');
    const buildOptions = {
        main: (_b = options.main) !== null && _b !== void 0 ? _b : (0, devkit_1.joinPathFragments)(project.root, 'src/main.ts'),
        outputPath: (0, devkit_1.joinPathFragments)('dist', project.root),
        compiler: (_c = options.compiler) !== null && _c !== void 0 ? _c : 'babel',
        tsConfig,
        project: `${project.root}/package.json`,
        external: options.external,
    };
    if (options.rollupConfig) {
        buildOptions.rollupConfig = options.rollupConfig;
    }
    if (tree.exists((0, devkit_1.joinPathFragments)(project.root, 'README.md'))) {
        buildOptions.assets = [
            {
                glob: `${project.root}/README.md`,
                input: '.',
                output: '.',
            },
        ];
    }
    (0, devkit_1.updateProjectConfiguration)(tree, options.project, Object.assign(Object.assign({}, project), { targets: Object.assign(Object.assign({}, project.targets), { build: {
                executor: '@nrwl/rollup:rollup',
                outputs: ['{options.outputPath}'],
                defaultConfiguration: 'production',
                options: buildOptions,
                configurations: {
                    production: {
                        optimization: true,
                        sourceMap: false,
                        namedChunks: false,
                        extractLicenses: true,
                        vendorChunk: false,
                    },
                },
            } }) }));
}
exports.default = rollupProjectGenerator;
exports.rollupProjectSchematic = (0, devkit_1.convertNxGenerator)(rollupProjectGenerator);
//# sourceMappingURL=rollup-project.js.map