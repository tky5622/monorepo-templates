"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withLess = void 0;
const tslib_1 = require("tslib");
// Adapted from https://raw.githubusercontent.com/elado/next-with-less/main/src/index.js
const webpack_merge_1 = require("webpack-merge");
const addLessToRegExp = (rx) => new RegExp(rx.source.replace('|sass', '|sass|less'), rx.flags);
function patchNextCSSWithLess(nextCSSModule = require('next/dist/build/webpack/config/blocks/css')) {
    nextCSSModule.regexLikeCss = addLessToRegExp(nextCSSModule.regexLikeCss);
}
patchNextCSSWithLess();
function withLess(_a) {
    var { lessLoaderOptions = {} } = _a, nextConfig = tslib_1.__rest(_a, ["lessLoaderOptions"]);
    return Object.assign({}, nextConfig, {
        webpack(config, opts) {
            // there are 2 relevant sass rules in next.js - css modules and global css
            let sassModuleRule;
            // global sass rule (does not exist in server builds)
            let sassGlobalRule;
            const cssRule = config.module.rules.find((rule) => { var _a; return (_a = rule.oneOf) === null || _a === void 0 ? void 0 : _a.find((r) => r === null || r === void 0 ? void 0 : r[Symbol.for('__next_css_remove')]); });
            const addLessToRuleTest = (test) => {
                if (Array.isArray(test)) {
                    return test.map((rx) => addLessToRegExp(rx));
                }
                else {
                    return addLessToRegExp(test);
                }
            };
            cssRule.oneOf.forEach((rule) => {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                if ((_a = rule.options) === null || _a === void 0 ? void 0 : _a.__next_css_remove)
                    return;
                if (((_b = rule.use) === null || _b === void 0 ? void 0 : _b.loader) === 'error-loader') {
                    rule.test = addLessToRuleTest(rule.test);
                }
                else if ((_d = (_c = rule.use) === null || _c === void 0 ? void 0 : _c.loader) === null || _d === void 0 ? void 0 : _d.includes('file-loader')) {
                    rule.issuer = addLessToRuleTest(rule.issuer);
                }
                else if ((_f = (_e = rule.use) === null || _e === void 0 ? void 0 : _e.includes) === null || _f === void 0 ? void 0 : _f.call(_e, 'ignore-loader')) {
                    rule.test = addLessToRuleTest(rule.test);
                }
                else if (((_g = rule.test) === null || _g === void 0 ? void 0 : _g.source) === '\\.module\\.(scss|sass)$') {
                    sassModuleRule = rule;
                }
                else if (((_h = rule.test) === null || _h === void 0 ? void 0 : _h.source) === '(?<!\\.module)\\.(scss|sass)$') {
                    sassGlobalRule = rule;
                }
            });
            const lessLoader = {
                loader: 'less-loader',
                options: Object.assign(Object.assign({}, lessLoaderOptions), { lessOptions: Object.assign({ javascriptEnabled: true }, lessLoaderOptions.lessOptions) }),
            };
            let lessModuleRule = (0, webpack_merge_1.merge)(sassModuleRule);
            const configureLessRule = (rule) => {
                rule.test = new RegExp(rule.test.source.replace('(scss|sass)', 'less'));
                // replace sass-loader (last entry) with less-loader
                rule.use.splice(-1, 1, lessLoader);
            };
            configureLessRule(lessModuleRule);
            cssRule.oneOf.splice(cssRule.oneOf.indexOf(sassModuleRule) + 1, 0, lessModuleRule);
            if (sassGlobalRule) {
                let lessGlobalRule = (0, webpack_merge_1.merge)(sassGlobalRule);
                configureLessRule(lessGlobalRule);
                cssRule.oneOf.splice(cssRule.oneOf.indexOf(sassGlobalRule) + 1, 0, lessGlobalRule);
            }
            if (typeof nextConfig.webpack === 'function') {
                return nextConfig.webpack(config, opts);
            }
            return config;
        },
    });
}
exports.withLess = withLess;
module.exports = withLess;
module.exports.withLess = withLess;
module.exports.patchNext = patchNextCSSWithLess;
//# sourceMappingURL=with-less.js.map