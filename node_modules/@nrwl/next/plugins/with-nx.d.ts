import type { NextConfig } from 'next';
export interface WithNxOptions extends NextConfig {
    nx?: {
        svgr?: boolean;
    };
}
export interface WithNxContext {
    workspaceRoot: string;
    libsDir: string;
}
export declare function withNx(nextConfig?: WithNxOptions, context?: WithNxContext): {
    webpack: (config: any, options: any) => any;
    exportPathMap?: (defaultMap: import("next/dist/server/config-shared").ExportPathMap, ctx: {
        dev: boolean;
        dir: string;
        outDir: string;
        distDir: string;
        buildId: string;
    }) => import("next/dist/server/config-shared").ExportPathMap | Promise<import("next/dist/server/config-shared").ExportPathMap>;
    i18n?: import("next/dist/server/config-shared").I18NConfig;
    eslint: import("next/dist/server/config-shared").ESLintConfig;
    typescript?: import("next/dist/server/config-shared").TypeScriptConfig;
    headers?: () => Promise<import("next/dist/lib/load-custom-routes").Header[]>;
    rewrites?: () => Promise<import("next/dist/lib/load-custom-routes").Rewrite[] | {
        beforeFiles: import("next/dist/lib/load-custom-routes").Rewrite[];
        afterFiles: import("next/dist/lib/load-custom-routes").Rewrite[];
        fallback: import("next/dist/lib/load-custom-routes").Rewrite[];
    }>;
    redirects?: () => Promise<import("next/dist/lib/load-custom-routes").Redirect[]>;
    webpack5?: false;
    excludeDefaultMomentLocales?: boolean;
    trailingSlash?: boolean;
    env?: Record<string, string>;
    distDir?: string;
    cleanDistDir?: boolean;
    assetPrefix?: string;
    useFileSystemPublicRoutes?: boolean;
    generateBuildId?: () => string | Promise<string>;
    generateEtags?: boolean;
    pageExtensions?: string[];
    compress?: boolean;
    analyticsId?: string;
    poweredByHeader?: boolean;
    images?: Partial<import("next/dist/shared/lib/image-config").ImageConfigComplete>;
    devIndicators?: {
        buildActivity?: boolean;
        buildActivityPosition?: "bottom-right" | "bottom-left" | "top-right" | "top-left";
    };
    onDemandEntries?: {
        maxInactiveAge?: number;
        pagesBufferLength?: number;
    };
    amp?: {
        canonicalBase?: string;
    };
    basePath?: string;
    sassOptions?: {
        [key: string]: any;
    };
    productionBrowserSourceMaps?: boolean;
    optimizeFonts?: boolean;
    reactStrictMode?: boolean;
    publicRuntimeConfig?: {
        [key: string]: any;
    };
    serverRuntimeConfig?: {
        [key: string]: any;
    };
    httpAgentOptions?: {
        keepAlive?: boolean;
    };
    future?: {
        webpack5?: false;
    };
    outputFileTracing?: boolean;
    staticPageGenerationTimeout?: number;
    crossOrigin?: false | "anonymous" | "use-credentials";
    swcMinify?: boolean;
    compiler?: {
        reactRemoveProperties?: boolean | {
            properties?: string[];
        };
        relay?: {
            src: string;
            artifactDirectory?: string;
            language?: "typescript" | "flow";
        };
        removeConsole?: boolean | {
            exclude?: string[];
        };
        styledComponents?: boolean | {
            displayName?: boolean;
            topLevelImportPaths?: string[];
            ssr?: boolean;
            fileName?: boolean;
            meaninglessFileNames?: string[];
            minify?: boolean;
            transpileTemplateLiterals?: boolean;
            namespace?: string;
            pure?: boolean;
            cssProp?: boolean;
        };
        emotion?: boolean | {
            sourceMap?: boolean;
            autoLabel?: "dev-only" | "always" | "never";
            labelFormat?: string;
        };
    };
    output?: "standalone";
    experimental?: import("next/dist/server/config-shared").ExperimentalConfig;
};
