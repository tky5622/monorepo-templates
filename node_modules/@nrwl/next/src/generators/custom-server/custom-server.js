"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customServerSchematic = exports.customServerGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
function customServerGenerator(host, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const project = (0, devkit_1.readProjectConfiguration)(host, options.project);
        if (((_b = (_a = project.targets) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.executor) !== '@nrwl/next:build') {
            devkit_1.logger.error(`Project ${options.project} is not a Next.js project. Did you generate it with "nx g @nrwl/next:app"?`);
            return;
        }
        const outputPath = (_e = (_d = (_c = project.targets) === null || _c === void 0 ? void 0 : _c.build) === null || _d === void 0 ? void 0 : _d.options) === null || _e === void 0 ? void 0 : _e.outputPath;
        const root = (_h = (_g = (_f = project.targets) === null || _f === void 0 ? void 0 : _f.build) === null || _g === void 0 ? void 0 : _g.options) === null || _h === void 0 ? void 0 : _h.root;
        if (!root ||
            !outputPath ||
            !((_l = (_k = (_j = project.targets) === null || _j === void 0 ? void 0 : _j.build) === null || _k === void 0 ? void 0 : _k.configurations) === null || _l === void 0 ? void 0 : _l.development) ||
            !((_p = (_o = (_m = project.targets) === null || _m === void 0 ? void 0 : _m.build) === null || _o === void 0 ? void 0 : _o.configurations) === null || _p === void 0 ? void 0 : _p.production)) {
            devkit_1.logger.error(`Project ${options.project} has invalid config. Did you generate it with "nx g @nrwl/next:app"?`);
            return;
        }
        if (((_q = project.targets) === null || _q === void 0 ? void 0 : _q['build-custom-server']) ||
            ((_r = project.targets) === null || _r === void 0 ? void 0 : _r['serve-custom-server'])) {
            devkit_1.logger.warn(`Project ${options.project} has custom server targets already: build-custom-server, serve-custom-server. Remove these targets from project and try again.`);
            return;
        }
        (0, devkit_1.generateFiles)(host, (0, devkit_1.joinPathFragments)(__dirname, 'files'), project.root, Object.assign(Object.assign({}, options), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(project.root), projectRoot: project.root, tmpl: '' }));
        project.targets.build.dependsOn = ['build-custom-server'];
        project.targets.serve.options.customServerTarget = `${options.project}:serve-custom-server`;
        project.targets.serve.configurations.development.customServerTarget = `${options.project}:serve-custom-server:development`;
        project.targets.serve.configurations.production.customServerTarget = `${options.project}:serve-custom-server:production`;
        project.targets['build-custom-server'] = {
            executor: '@nrwl/js:tsc',
            defaultConfiguration: 'production',
            options: {
                outputPath,
                main: `${root}/server/main.ts`,
                tsConfig: `${root}/tsconfig.server.json`,
                clean: false,
                assets: [],
            },
            configurations: {
                development: {},
                production: {},
            },
        };
        project.targets['serve-custom-server'] = {
            executor: '@nrwl/js:node',
            defaultConfiguration: 'development',
            options: {
                buildTarget: `${options.project}:build-custom-server`,
            },
            configurations: {
                development: {
                    buildTarget: `${options.project}:build-custom-server:development`,
                },
                production: {
                    buildTarget: `${options.project}:build-custom-server:production`,
                },
            },
        };
        (0, devkit_1.updateProjectConfiguration)(host, options.project, project);
        (0, devkit_1.updateJson)(host, 'nx.json', (json) => {
            var _a, _b;
            var _c;
            (_a = json.tasksRunnerOptions) !== null && _a !== void 0 ? _a : (json.tasksRunnerOptions = {});
            (_b = (_c = json.tasksRunnerOptions).default) !== null && _b !== void 0 ? _b : (_c.default = { options: {} });
            json.tasksRunnerOptions.default.options.cacheableOperations = [
                ...json.tasksRunnerOptions.default.options.cacheableOperations,
                'build-custom-server',
            ];
            return json;
        });
    });
}
exports.customServerGenerator = customServerGenerator;
exports.customServerSchematic = (0, devkit_1.convertNxGenerator)(customServerGenerator);
//# sourceMappingURL=custom-server.js.map