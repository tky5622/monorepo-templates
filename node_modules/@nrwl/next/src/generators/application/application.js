"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationSchematic = exports.applicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const normalize_options_1 = require("./lib/normalize-options");
const add_cypress_1 = require("./lib/add-cypress");
const add_jest_1 = require("./lib/add-jest");
const add_project_1 = require("./lib/add-project");
const create_application_files_1 = require("./lib/create-application-files");
const create_next_server_files_1 = require("./lib/create-next-server-files");
const set_defaults_1 = require("./lib/set-defaults");
const update_jest_config_1 = require("./lib/update-jest-config");
const init_1 = require("../init/init");
const styles_1 = require("../../utils/styles");
const add_linting_1 = require("./lib/add-linting");
const custom_server_1 = require("../custom-server/custom-server");
function applicationGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = (0, normalize_options_1.normalizeOptions)(host, schema);
        const nextTask = yield (0, init_1.nextInitGenerator)(host, Object.assign(Object.assign({}, options), { skipFormat: true }));
        (0, create_application_files_1.createApplicationFiles)(host, options);
        (0, create_next_server_files_1.createNextServerFiles)(host, options);
        (0, add_project_1.addProject)(host, options);
        const cypressTask = yield (0, add_cypress_1.addCypress)(host, options);
        const jestTask = yield (0, add_jest_1.addJest)(host, options);
        const lintTask = yield (0, add_linting_1.addLinting)(host, options);
        (0, update_jest_config_1.updateJestConfig)(host, options);
        const styledTask = (0, styles_1.addStyleDependencies)(host, options.style);
        (0, set_defaults_1.setDefaults)(host, options);
        if (options.customServer) {
            yield (0, custom_server_1.customServerGenerator)(host, {
                project: options.name,
                compiler: options.swc ? 'swc' : 'tsc',
            });
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(host);
        }
        return (0, run_tasks_in_serial_1.runTasksInSerial)(nextTask, cypressTask, jestTask, lintTask, styledTask);
    });
}
exports.applicationGenerator = applicationGenerator;
exports.applicationSchematic = (0, devkit_1.convertNxGenerator)(applicationGenerator);
//# sourceMappingURL=application.js.map