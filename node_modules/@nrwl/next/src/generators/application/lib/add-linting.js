"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLinting = void 0;
const tslib_1 = require("tslib");
const linter_1 = require("@nrwl/linter");
const devkit_1 = require("@nrwl/devkit");
const react_1 = require("@nrwl/react");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
function addLinting(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const lintTask = yield (0, linter_1.lintProjectGenerator)(host, {
            linter: options.linter,
            project: options.projectName,
            tsConfigPaths: [
                (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'tsconfig.app.json'),
            ],
            unitTestRunner: options.unitTestRunner,
            eslintFilePatterns: [`${options.appProjectRoot}/**/*.{ts,tsx,js,jsx}`],
            skipFormat: true,
        });
        if (options.linter === linter_1.Linter.EsLint) {
            const reactEslintJson = (0, react_1.createReactEslintJson)(options.appProjectRoot, options.setParserOptionsProject);
            (0, devkit_1.updateJson)(host, (0, devkit_1.joinPathFragments)(options.appProjectRoot, '.eslintrc.json'), () => {
                // Turn off @next/next/no-html-link-for-pages since there is an issue with nextjs throwing linting errors
                // TODO(nicholas): remove after Vercel updates nextjs linter to only lint ["*.ts", "*.tsx", "*.js", "*.jsx"]
                var _a, _b, _c;
                reactEslintJson.ignorePatterns = [
                    ...reactEslintJson.ignorePatterns,
                    '.next/**/*',
                ];
                reactEslintJson.rules = Object.assign({ '@next/next/no-html-link-for-pages': 'off' }, reactEslintJson.rules);
                // Find the override that handles both TS and JS files.
                const commonOverride = (_a = reactEslintJson.overrides) === null || _a === void 0 ? void 0 : _a.find((o) => ['*.ts', '*.tsx', '*.js', '*.jsx'].every((ext) => o.files.includes(ext)));
                if (commonOverride) {
                    // Only set parserOptions.project if it already exists (defined by options.setParserOptionsProject)
                    if ((_b = commonOverride.parserOptions) === null || _b === void 0 ? void 0 : _b.project) {
                        commonOverride.parserOptions.project = [
                            `${options.appProjectRoot}/tsconfig(.*)?.json`,
                        ];
                    }
                    // Configure custom pages directory for next rule
                    if (commonOverride.rules) {
                        commonOverride.rules = Object.assign(Object.assign({}, commonOverride.rules), { '@next/next/no-html-link-for-pages': [
                                'error',
                                `${options.appProjectRoot}/pages`,
                            ] });
                    }
                }
                (_c = reactEslintJson.extends) !== null && _c !== void 0 ? _c : (reactEslintJson.extends = []);
                if (typeof reactEslintJson.extends === 'string') {
                    reactEslintJson.extends = [reactEslintJson.extends];
                }
                // add next.js configuration
                reactEslintJson.extends.unshift(...['next', 'next/core-web-vitals']);
                // remove nx/react plugin, as it conflicts with the next.js one
                reactEslintJson.extends = reactEslintJson.extends.filter((name) => name !== 'plugin:@nrwl/nx/react');
                reactEslintJson.extends.unshift('plugin:@nrwl/nx/react-typescript');
                if (!reactEslintJson.env) {
                    reactEslintJson.env = {};
                }
                reactEslintJson.env.jest = true;
                return reactEslintJson;
            });
        }
        const installTask = (0, devkit_1.addDependenciesToPackageJson)(host, react_1.extraEslintDependencies.dependencies, react_1.extraEslintDependencies.devDependencies);
        return (0, run_tasks_in_serial_1.runTasksInSerial)(lintTask, installTask);
    });
}
exports.addLinting = addLinting;
//# sourceMappingURL=add-linting.js.map