"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addStyleDependencies = exports.NEXT_SPECIFIC_STYLE_DEPENDENCIES = void 0;
const devkit_1 = require("@nrwl/devkit");
const react_1 = require("@nrwl/react");
const versions_1 = require("./versions");
exports.NEXT_SPECIFIC_STYLE_DEPENDENCIES = {
    'styled-components': {
        dependencies: react_1.CSS_IN_JS_DEPENDENCIES['styled-components'].dependencies,
        devDependencies: Object.assign(Object.assign({}, react_1.CSS_IN_JS_DEPENDENCIES['styled-components'].devDependencies), { 'babel-plugin-styled-components': versions_1.babelPluginStyledComponentsVersion }),
    },
    '@emotion/styled': {
        dependencies: Object.assign(Object.assign({}, react_1.CSS_IN_JS_DEPENDENCIES['@emotion/styled'].dependencies), { '@emotion/server': versions_1.emotionServerVersion }),
        devDependencies: react_1.CSS_IN_JS_DEPENDENCIES['@emotion/styled'].devDependencies,
    },
    css: {
        dependencies: {},
        devDependencies: {},
    },
    scss: {
        dependencies: {},
        devDependencies: { sass: versions_1.sassVersion },
    },
    less: {
        dependencies: {},
        devDependencies: {
            'less-loader': versions_1.lessLoader,
        },
    },
    styl: {
        dependencies: {
            'stylus-loader': versions_1.stylusLoader,
        },
        devDependencies: {},
    },
};
function addStyleDependencies(host, style) {
    const extraDependencies = exports.NEXT_SPECIFIC_STYLE_DEPENDENCIES[style];
    if (!extraDependencies)
        return () => { };
    const installTask = (0, devkit_1.addDependenciesToPackageJson)(host, extraDependencies.dependencies, extraDependencies.devDependencies);
    // @zeit/next-less & @zeit/next-stylus internal configuration is working only
    // for specific CSS loader version, causing PNPM resolution to fail.
    if (host.exists('pnpm-lock.yaml') && (style === 'less' || style === 'styl')) {
        (0, devkit_1.updateJson)(host, `package.json`, (json) => {
            json.resolutions = Object.assign(Object.assign({}, json.resolutions), { 'css-loader': '1.0.1' });
            return json;
        });
    }
    return installTask;
}
exports.addStyleDependencies = addStyleDependencies;
//# sourceMappingURL=styles.js.map