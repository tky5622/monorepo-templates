"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGlobPatternsOfDependentProjects = void 0;
const devkit_1 = require("@nrwl/devkit");
const devkit_2 = require("@nrwl/devkit");
const project_graph_utils_1 = require("nx/src/utils/project-graph-utils");
const path_1 = require("path");
/**
 * Use createGlobPatterns instead
 * @deprecated Use createGlobPatternsForDependencies instead
 */
function createGlobPatternsOfDependentProjects(projectName, fileGlobPattern = '/**/!(*.stories|*.spec).tsx') {
    devkit_1.logger.warn(`createGlobPatternsOfDependentProjects is deprecated. Use "createGlobPatternsForDependencies(__dirname)" from "@nrwl/next/tailwind" instead`);
    try {
        const [projectDirs, warnings] = (0, project_graph_utils_1.getSourceDirOfDependentProjects)(projectName);
        if (warnings.length > 0) {
            devkit_1.logger.warn(`
[createGlobPatternsForDependencies] Failed to generate glob pattern for the following:
${warnings.join('\n- ')}\n
due to missing "sourceRoot" in the dependencies' project configuration
      `);
        }
        return projectDirs.map((sourceDir) => (0, path_1.resolve)(devkit_2.workspaceRoot, (0, devkit_1.joinPathFragments)(sourceDir, fileGlobPattern)));
    }
    catch (e) {
        throw new Error(`createGlobPatternsOfDependentProjects: Error when generating globs: ${e === null || e === void 0 ? void 0 : e.message}`);
    }
}
exports.createGlobPatternsOfDependentProjects = createGlobPatternsOfDependentProjects;
//# sourceMappingURL=generate-globs.js.map