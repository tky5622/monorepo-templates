"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixPageDirForEslint = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
function fixPageDirForEslint(host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = (0, devkit_1.getProjects)(host);
        projects.forEach((project) => {
            var _a, _b;
            const eslintRcJson = (0, devkit_1.joinPathFragments)(project.root, '.eslintrc.json');
            if (host.exists(eslintRcJson)) {
                const config = (0, devkit_1.readJson)(host, eslintRcJson);
                // Ignore non-nextjs projects
                if (!((_a = config === null || config === void 0 ? void 0 : config.extends) === null || _a === void 0 ? void 0 : _a.includes('next')))
                    return;
                // Find the override that handles both TS and JS files.
                const commonOverride = (_b = config.overrides) === null || _b === void 0 ? void 0 : _b.find((o) => ['*.ts', '*.tsx', '*.js', '*.jsx'].every((ext) => o.files.includes(ext)));
                if (commonOverride &&
                    !commonOverride.rules['@next/next/no-html-link-for-pages']) {
                    commonOverride.rules = Object.assign(Object.assign({}, commonOverride.rules), { '@next/next/no-html-link-for-pages': [
                            'error',
                            `${project.root}/pages`,
                        ] });
                    (0, devkit_1.writeJson)(host, eslintRcJson, config);
                }
            }
        });
        yield (0, devkit_1.formatFiles)(host);
    });
}
exports.fixPageDirForEslint = fixPageDirForEslint;
exports.default = fixPageDirForEslint;
//# sourceMappingURL=fix-page-dir-for-eslint.js.map