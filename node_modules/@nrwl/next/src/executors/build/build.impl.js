"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
require("dotenv/config");
const devkit_1 = require("@nrwl/devkit");
const build_1 = require("next/dist/build");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const semver_1 = require("semver");
const fileutils_1 = require("@nrwl/workspace/src/utilities/fileutils");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utilities/buildable-libs-utils");
const version_utils_1 = require("@nrwl/workspace/src/utilities/version-utils");
const config_1 = require("../../utils/config");
const create_package_json_1 = require("./lib/create-package-json");
const create_next_config_file_1 = require("./lib/create-next-config-file");
const check_project_1 = require("./lib/check-project");
const constants_1 = require("../../utils/constants");
function buildExecutor(options, context) {
    var _a, _b, _c;
    var _d, _e;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // Cast to any to overwrite NODE_ENV
        (_d = process.env).NODE_ENV || (_d.NODE_ENV = 'production');
        let dependencies = [];
        const root = (0, path_1.resolve)(context.root, options.root);
        const libsDir = (0, path_1.join)(context.root, (0, devkit_1.workspaceLayout)().libsDir);
        (0, check_project_1.checkPublicDirectory)(root);
        if (!options.buildLibsFromSource && context.targetName) {
            const result = (0, buildable_libs_utils_1.calculateProjectDependencies)(context.projectGraph, context.root, context.projectName, context.targetName, context.configurationName);
            dependencies = result.dependencies;
        }
        // Set `__NEXT_REACT_ROOT` based on installed ReactDOM version
        const packageJsonPath = (0, path_1.join)(root, 'package.json');
        const packageJson = (0, fs_extra_1.existsSync)(packageJsonPath)
            ? (0, devkit_1.readJsonFile)(packageJsonPath)
            : undefined;
        const rootPackageJson = (0, devkit_1.readJsonFile)((0, path_1.join)(devkit_1.workspaceRoot, 'package.json'));
        const reactDomVersion = (_b = (_a = packageJson === null || packageJson === void 0 ? void 0 : packageJson.dependencies) === null || _a === void 0 ? void 0 : _a['react-dom']) !== null && _b !== void 0 ? _b : (_c = rootPackageJson.dependencies) === null || _c === void 0 ? void 0 : _c['react-dom'];
        const hasReact18 = reactDomVersion &&
            (0, semver_1.gte)((0, version_utils_1.checkAndCleanWithSemver)('react-dom', reactDomVersion), '18.0.0');
        if (hasReact18) {
            (_e = process.env).__NEXT_REACT_ROOT || (_e.__NEXT_REACT_ROOT = 'true');
        }
        const config = yield (0, config_1.prepareConfig)(constants_1.PHASE_PRODUCTION_BUILD, options, context, dependencies, libsDir);
        yield (0, build_1.default)(root, config);
        if (!(0, fileutils_1.directoryExists)(options.outputPath)) {
            (0, fs_extra_1.mkdir)(options.outputPath);
        }
        yield (0, create_package_json_1.createPackageJson)(options, context);
        (0, create_next_config_file_1.createNextConfigFile)(options, context);
        (0, fs_extra_1.copySync)((0, path_1.join)(root, 'public'), (0, path_1.join)(options.outputPath, 'public'));
        return { success: true };
    });
}
exports.default = buildExecutor;
//# sourceMappingURL=build.impl.js.map