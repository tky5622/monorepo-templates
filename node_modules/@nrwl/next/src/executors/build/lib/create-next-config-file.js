"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNextConfigFile = void 0;
const devkit_1 = require("@nrwl/devkit");
const ts = require("typescript");
const fs_1 = require("fs");
const path_1 = require("path");
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
function createNextConfigFile(options, context) {
    const nextConfigPath = options.nextConfig
        ? (0, path_1.join)(context.root, options.nextConfig)
        : (0, path_1.join)(context.root, options.root, 'next.config.js');
    // Copy config file and our `with-nx.js` file to remove dependency on @nrwl/next for production build.
    if ((0, fs_1.existsSync)(nextConfigPath)) {
        (0, fs_1.writeFileSync)((0, path_1.join)(options.outputPath, 'with-nx.js'), getWithNxContent());
        (0, fs_1.writeFileSync)((0, path_1.join)(options.outputPath, 'next.config.js'), (0, fs_1.readFileSync)(nextConfigPath)
            .toString()
            .replace('@nrwl/next/plugins/with-nx', './with-nx.js'));
    }
}
exports.createNextConfigFile = createNextConfigFile;
function getWithNxContent() {
    var _a;
    const withNxFile = (0, path_1.join)(__dirname, '../../../../plugins/with-nx.js');
    let withNxContent = (0, fs_1.readFileSync)(withNxFile).toString();
    const withNxSource = ts.createSourceFile(withNxFile, withNxContent, ts.ScriptTarget.Latest, true);
    const getWithNxContextDeclaration = (_a = (0, typescript_1.findNodes)(withNxSource, ts.SyntaxKind.FunctionDeclaration)) === null || _a === void 0 ? void 0 : _a.find((node) => { var _a; return ((_a = node.name) === null || _a === void 0 ? void 0 : _a.text) === 'getWithNxContext'; });
    if (getWithNxContextDeclaration) {
        withNxContent = (0, devkit_1.applyChangesToString)(withNxContent, [
            {
                type: devkit_1.ChangeType.Delete,
                start: getWithNxContextDeclaration.getStart(withNxSource),
                length: getWithNxContextDeclaration.getWidth(withNxSource),
            },
            {
                type: devkit_1.ChangeType.Insert,
                index: getWithNxContextDeclaration.getStart(withNxSource),
                text: (0, devkit_1.stripIndents) `function getWithNxContext() {
          return {
            workspaceRoot: '${devkit_1.workspaceRoot}',
            libsDir: '${(0, devkit_1.workspaceLayout)().libsDir}'
          }
        }`,
            },
        ]);
    }
    return withNxContent;
}
//# sourceMappingURL=create-next-config-file.js.map