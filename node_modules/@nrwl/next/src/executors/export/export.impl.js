"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
require("dotenv/config");
const devkit_1 = require("@nrwl/devkit");
const export_1 = require("next/dist/export");
const path_1 = require("path");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utilities/buildable-libs-utils");
const devkit_2 = require("@nrwl/devkit");
const config_1 = require("../../utils/config");
const constants_1 = require("../../utils/constants");
const nextTrace = require("next/dist/trace");
function exportExecutor(options, context) {
    var e_1, _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let dependencies = [];
        if (!options.buildLibsFromSource) {
            const result = (0, buildable_libs_utils_1.calculateProjectDependencies)(context.projectGraph, context.root, context.projectName, 'build', // this should be generalized
            context.configurationName);
            dependencies = result.dependencies;
        }
        const libsDir = (0, path_1.join)(context.root, (0, devkit_2.workspaceLayout)().libsDir);
        const buildTarget = (0, devkit_1.parseTargetString)(options.buildTarget);
        const build = yield (0, devkit_1.runExecutor)(buildTarget, {}, context);
        try {
            for (var build_1 = tslib_1.__asyncValues(build), build_1_1; build_1_1 = yield build_1.next(), !build_1_1.done;) {
                const result = build_1_1.value;
                if (!result.success) {
                    return result;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (build_1_1 && !build_1_1.done && (_a = build_1.return)) yield _a.call(build_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        const buildOptions = (0, devkit_1.readTargetOptions)(buildTarget, context);
        const root = (0, path_1.resolve)(context.root, buildOptions.root);
        const config = yield (0, config_1.prepareConfig)(constants_1.PHASE_EXPORT, buildOptions, context, dependencies, libsDir);
        // Taken from:
        // https://github.com/vercel/next.js/blob/ead56eaab68409e96c19f7d9139747bac1197aa9/packages/next/cli/next-export.ts#L13
        const nextExportCliSpan = nextTrace.trace('next-export-cli');
        yield (0, export_1.default)(root, {
            statusMessage: 'Exporting',
            silent: options.silent,
            threads: options.threads,
            outdir: `${buildOptions.outputPath}/exported`,
        }, nextExportCliSpan, config);
        return { success: true };
    });
}
exports.default = exportExecutor;
//# sourceMappingURL=export.impl.js.map